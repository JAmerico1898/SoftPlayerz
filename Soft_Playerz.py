import streamlit as st
from streamlit_option_menu import option_menu
import streamlit.components.v1 as html
#from PIL import image
import numpy as np
import pandas as pd
from st_aggrid import AgGrid, GridOptionsBuilder, ColumnsAutoSizeMode
import plotly.express as px
import io
import matplotlib.pyplot as plt
from soccerplots.radar_chart import Radar
from sklearn.decomposition import PCA
from PIL import Image
from fpdf import FPDF
from pandas.plotting import table
import seaborn as sns

   
#CABEÇALHO DO FORM
st.markdown("<h1 style='text-align: center;'>Plataforma de Scouting</h1>", unsafe_allow_html=True)
st.markdown("<h2 style='text-align: center;'>Mapeamento de Jogadores</h2>", unsafe_allow_html=True)
st.markdown("<h6 style='text-align: center;'>app by @JAmerico1898</h6>", unsafe_allow_html=True)
st.markdown("<h6 style='text-align: center;'>Atualizado em 26Maio2024 (dados do Wyscout).</h6>", unsafe_allow_html=True)
st.markdown("---")

df = pd.read_csv("jogadores.csv")
df1 = pd.read_csv("jogador.csv")
df2 = pd.read_csv("Funções.csv")
df5 = pd.read_csv("ligas.csv")
df6 = pd.read_csv("Posições.csv")
df7 = pd.read_csv("temporadas.csv")
df8 = pd.read_csv("nacionalidades.csv")
df9 = pd.read_csv("contratos.csv")
df10 = pd.read_csv('jogadores_similares_2.csv')
df14 = pd.read_csv("performance_historica.csv")

with st.sidebar:

    jogadores = df1["Atleta"]
    choose = option_menu("Galeria de Apps", ["Ranking de Jogadores", "10 Melhores da Liga", "Nacionais pelo Mundo", "Free Agents pelo Mundo", "Histórico de Performance", "Jogadores Similares", "Histórico do Jogador", "Sobre o APP"],
                         icons=['graph-up-arrow', 'sort-numeric-down', 'globe2', 'search', 'clock-history', 'arrows-collapse-vertical', 'mortarboard', 'book'],
                         menu_icon="universal-access", default_index=0, 
                         styles={
                         "container": {"padding": "5!important", "background-color": "#fafafa"},
                         "icon": {"color": "orange", "font-size": "25px"},
                         "nav-link": {"font-size": "16px", "text-align": "left", "margin":"0px", "--hover-color": "#eee"},
                         "nav-link-selected": {"background-color": "#02ab21"},    
                         }
                         )
###############################################################################################################################
###############################################################################################################################
###############################################################################################################################
###############################################################################################################################

if choose == "Histórico de Performance":
    st.markdown("<h2 style='text-align: center;'>Histórico de Performance de Jogadores</h2>", unsafe_allow_html=True)
    st.markdown("<h3 style='text-align: center;'>2020-2024</h3>", unsafe_allow_html=True)
    jogadores = st.selectbox("Digite o nome do seu jogador. A grafia deve ser exata!", options=jogadores, index=None, placeholder="Jogador")
    if jogadores:
        #Determinar a Equipe
        df50 = df14.loc[(df14['Atleta']==jogadores)]
        equipes = df50['Equipe atual'].unique()
        equipe_atual = st.selectbox("Equipe em que o Jogador atua (junho/2024)", options=equipes)
        if equipe_atual:
            performance_historica = df14.loc[(df14['Atleta']==jogadores) & (df14['Equipe atual']==equipe_atual)]
            unique_ids = performance_historica['ID'].unique()
            if len(unique_ids) != 1:
                ids = st.selectbox("Escolha o ID do Jogador.", options=unique_ids)
                if ids:
                    performance_historica = df14.loc[(df14['Atleta']==jogadores) & (df14['Equipe atual']==equipe_atual) & (df14['ID']==ids)]
                    st.markdown("<h4 style='text-align: center;'>Performance do Jogador</b></h4>", unsafe_allow_html=True)
                    st.markdown("<h5 style='text-align: center;'>Temporadas 2020-2024</b></h5>", unsafe_allow_html=True)
                    fontsize=25
                    markdown_amount_1 = f"<div style='text-align:center; font-size:{fontsize}px; font-weight:bold'>{jogadores}</div>"
                    st.markdown(markdown_amount_1, unsafe_allow_html=True)
                    st.markdown("---")

                    def plot_percentil_for_atleta(df, atleta_name):
                        # Filter the dataframe for the given Atleta
                        atleta_df = df[df['Atleta'] == atleta_name].copy()

                        # Replace 'nihil' in 'Percentil' with 0 and convert to numeric
                        atleta_df['Percentil'] = atleta_df['Percentil'].replace('nihil', 0).astype(float).astype(int)
                        atleta_df['Minutagem'] = atleta_df['Minutagem'].replace('nihil', 0).astype(float).astype(int)

                        # Group by Temporada to get the highest Percentil for each combination
                        atleta_df = atleta_df.groupby(['Temporada', 'Equipe', 'Liga', 'Perfil']).agg({
                            'Percentil': 'max',
                            'Ranking': 'max',  # Assuming the highest ranking is preferred
                            'Size': 'max',     # Assuming the highest size is preferred
                            'Minutagem': 'max',  # Keep max for calculating Minutagem
                        }).reset_index()

                        # Ensure Temporada is treated as an integer
                        atleta_df['Temporada'] = atleta_df['Temporada'].astype(int)
                        
                        # Sort the data by Temporada and Percentil (descending)
                        atleta_df_sorted = atleta_df.sort_values(by=['Temporada', 'Percentil', 'Equipe'], ascending=[True, False, True]).drop_duplicates(subset=['Temporada', 'Equipe'])

                        #First Club Detection
                        first_club = atleta_df_sorted.sort_values(by=['Temporada', 'Percentil'], ascending=[True, False]).drop_duplicates(subset=['Temporada'])

                        #Second Club Detection
                        # Convert DataFrames to sets of tuples
                        set_1 = set(atleta_df_sorted.itertuples(index=False, name=None))
                        set_2 = set(first_club.itertuples(index=False, name=None))

                        # Get the difference between the first set and the second set
                        difference_set = set_1 - set_2

                        # Convert the result back to a DataFrame
                        second_club = pd.DataFrame(list(difference_set), columns=atleta_df_sorted.columns)

                        # Plotting
                        fig, ax = plt.subplots(figsize=(10, 6))

                        prev_equipe = None
                        prev_temporada = None
                        prev_percentil = None

                        colors = ['blue', 'red', 'green', 'purple', 'orange']  # List of colors to alternate
                        color_index = 0

                        for i, row in first_club.iterrows():
                            temporada = row['Temporada']
                            equipe = row['Equipe']
                            percentil = row['Percentil']
                            ranking = row['Ranking']
                            size = row['Size']
                            minutagem = row['Minutagem']
                            liga = row['Liga']
                            perfil = row['Perfil']

                            # Change color based on team switch
                            if equipe != prev_equipe and prev_equipe is not None:
                                color_index = (color_index + 1) % len(colors)
                            color = colors[color_index]

                            # Plot the current point
                            ax.plot(temporada, percentil, 'o', color=color)
                            
                            # Annotate the current point
                            if perfil == 'nihil':
                                annotation = ""
                            else:
                                annotation = f"Percentil: {percentil}\nRanking: {ranking}/{size}\n{minutagem} min/jogo"
                            
                            ax.annotate(annotation, (temporada, percentil), textcoords="offset points", xytext=(0,15), ha='center', fontsize=11, color=color)

                            # Annotate Liga below the x-ticks based on Perfil
                            if perfil == 'nihil':
                                below_annotation = "<900min\n jogados"
                            else:
                                below_annotation = f"{liga}\n{equipe}\n{perfil}"
                            
                            ax.annotate(below_annotation, (temporada, 0), textcoords="offset points", xytext=(0,-55), ha='center', fontsize=11, color=color)

                            # Connect the current point with the previous point, if exists
                            if prev_temporada is not None:
                                ax.plot([prev_temporada, temporada], [prev_percentil, percentil], color=color)

                            # Update previous values
                            prev_equipe = equipe
                            prev_temporada = temporada
                            prev_percentil = percentil

                        # Add the second club's data points (loose points)
                        for i, row in second_club.iterrows():
                            temporada = row['Temporada']
                            equipe = row['Equipe']
                            percentil = row['Percentil']
                            ranking = row['Ranking']
                            size = row['Size']
                            minutagem = row['Minutagem']
                            liga = row['Liga']
                            perfil = row['Perfil']

                            if temporada in first_club['Temporada'].values and equipe != first_club[first_club['Temporada'] == temporada]['Equipe'].values[0]:
                                # Plot the second club's data point
                                ax.plot(temporada, percentil, 'o', color='black')  # Use a different color for the second club's data point
                                
                                # Annotate the second club's data point
                                annotation = f"Percentil: {percentil}\n{equipe}\n{perfil}\n{minutagem} min/jogo"
                                ax.annotate(annotation, (temporada, percentil), textcoords="offset points", xytext=(0,-50), ha='center', fontsize=11, color='black')

                        # Add labels and title
                        ax.set_ylabel('Percentil', fontsize=14, fontweight='bold')
                        ax.set_title(f'', pad=70)  # Increase the pad value to increase the distance
                        ax.set_ylim(0, 100)  # Set y-axis range from 0 to 100

                        # Adjust the left spine to create padding
                        ax.spines['left'].set_position(('outward', 18))  # Adjust this value as needed
                        ax.spines['left'].set_visible(False)
                        ax.set_xticks([2020, 2021, 2022, 2023, 2024])  # Set x-ticks to the desired years
                        ax.tick_params(axis='x', labelsize=12)
                        plt.setp(ax.get_xticklabels(), fontweight='bold')
                        ax.tick_params(axis='y', labelsize=12, length=0)
                        plt.setp(ax.get_yticklabels(), fontweight='bold')
                        ax.spines['top'].set_visible(False)
                        ax.spines['right'].set_visible(False)
                        st.pyplot(fig)

                    # Assuming performance_historica is already loaded and processed
                    # Replace 'ATLETA_NAME' with the actual name of the Atleta you want to plot
                    plot_percentil_for_atleta(performance_historica, jogadores)
            else:
                performance_historica = df14.loc[(df14['Atleta']==jogadores) & (df14['Equipe atual']==equipe_atual)]
                st.markdown("<h4 style='text-align: center;'>Performance do Jogador</b></h4>", unsafe_allow_html=True)
                st.markdown("<h5 style='text-align: center;'>Temporadas 2020-2024</b></h5>", unsafe_allow_html=True)
                fontsize=25
                markdown_amount_1 = f"<div style='text-align:center; font-size:{fontsize}px; font-weight:bold'>{jogadores}</div>"
                st.markdown(markdown_amount_1, unsafe_allow_html=True)
                st.markdown("---")

                def plot_percentil_for_atleta(df, atleta_name):
                    # Filter the dataframe for the given Atleta
                    atleta_df = df[df['Atleta'] == atleta_name].copy()

                    # Replace 'nihil' in 'Percentil' with 0 and convert to numeric
                    atleta_df['Percentil'] = atleta_df['Percentil'].replace('nihil', 0).astype(float).astype(int)
                    atleta_df['Minutagem'] = atleta_df['Minutagem'].replace('nihil', 0).astype(float).astype(int)

                    # Group by Temporada to get the highest Percentil for each combination
                    atleta_df = atleta_df.groupby(['Temporada', 'Equipe', 'Liga', 'Perfil']).agg({
                        'Percentil': 'max',
                        'Ranking': 'max',  # Assuming the highest ranking is preferred
                        'Size': 'max',     # Assuming the highest size is preferred
                        'Minutagem': 'max',  # Keep max for calculating Minutagem
                    }).reset_index()

                    # Ensure Temporada is treated as an integer
                    atleta_df['Temporada'] = atleta_df['Temporada'].astype(int)
                    
                    # Sort the data by Temporada and Percentil (descending)
                    atleta_df_sorted = atleta_df.sort_values(by=['Temporada', 'Percentil', 'Equipe'], ascending=[True, False, True]).drop_duplicates(subset=['Temporada', 'Equipe'])

                    #First Club Detection
                    first_club = atleta_df_sorted.sort_values(by=['Temporada', 'Percentil'], ascending=[True, False]).drop_duplicates(subset=['Temporada'])

                    #Second Club Detection
                    # Convert DataFrames to sets of tuples
                    set_1 = set(atleta_df_sorted.itertuples(index=False, name=None))
                    set_2 = set(first_club.itertuples(index=False, name=None))

                    # Get the difference between the first set and the second set
                    difference_set = set_1 - set_2

                    # Convert the result back to a DataFrame
                    second_club = pd.DataFrame(list(difference_set), columns=atleta_df_sorted.columns)

                    # Plotting
                    fig, ax = plt.subplots(figsize=(10, 6))

                    prev_equipe = None
                    prev_temporada = None
                    prev_percentil = None

                    colors = ['blue', 'red', 'green', 'purple', 'orange']  # List of colors to alternate
                    color_index = 0

                    for i, row in first_club.iterrows():
                        temporada = row['Temporada']
                        equipe = row['Equipe']
                        percentil = row['Percentil']
                        ranking = row['Ranking']
                        size = row['Size']
                        minutagem = row['Minutagem']
                        liga = row['Liga']
                        perfil = row['Perfil']

                        # Change color based on team switch
                        if equipe != prev_equipe and prev_equipe is not None:
                            color_index = (color_index + 1) % len(colors)
                        color = colors[color_index]

                        # Plot the current point
                        ax.plot(temporada, percentil, 'o', color=color)
                        
                        # Annotate the current point
                        if perfil == 'nihil':
                            annotation = ""
                        else:
                            annotation = f"Percentil: {percentil}\nRanking: {ranking}/{size}\n{minutagem} min/jogo"
                        
                        ax.annotate(annotation, (temporada, percentil), textcoords="offset points", xytext=(0,15), ha='center', fontsize=11, color=color)

                        # Annotate Liga below the x-ticks based on Perfil
                        if perfil == 'nihil':
                            below_annotation = "<900min\n jogados"
                        else:
                            below_annotation = f"{liga}\n{equipe}\n{perfil}"
                        
                        ax.annotate(below_annotation, (temporada, 0), textcoords="offset points", xytext=(0,-55), ha='center', fontsize=11, color=color)

                        # Connect the current point with the previous point, if exists
                        if prev_temporada is not None:
                            ax.plot([prev_temporada, temporada], [prev_percentil, percentil], color=color)

                        # Update previous values
                        prev_equipe = equipe
                        prev_temporada = temporada
                        prev_percentil = percentil

                    # Add the second club's data points (loose points)
                    for i, row in second_club.iterrows():
                        temporada = row['Temporada']
                        equipe = row['Equipe']
                        percentil = row['Percentil']
                        ranking = row['Ranking']
                        size = row['Size']
                        minutagem = row['Minutagem']
                        liga = row['Liga']
                        perfil = row['Perfil']

                        if temporada in first_club['Temporada'].values and equipe != first_club[first_club['Temporada'] == temporada]['Equipe'].values[0]:
                            # Plot the second club's data point
                            ax.plot(temporada, percentil, 'o', color='black')  # Use a different color for the second club's data point
                            
                            # Annotate the second club's data point
                            annotation = f"Percentil: {percentil}\n{equipe}\n{perfil}\n{minutagem} min/jogo"
                            ax.annotate(annotation, (temporada, percentil), textcoords="offset points", xytext=(0,-50), ha='center', fontsize=11, color='black')

                    # Add labels and title
                    ax.set_ylabel('Percentil', fontsize=14, fontweight='bold')
                    ax.set_title(f'', pad=70)  # Increase the pad value to increase the distance
                    ax.set_ylim(0, 100)  # Set y-axis range from 0 to 100

                    # Adjust the left spine to create padding
                    ax.spines['left'].set_position(('outward', 18))  # Adjust this value as needed
                    ax.spines['left'].set_visible(False)
                    ax.set_xticks([2020, 2021, 2022, 2023, 2024])  # Set x-ticks to the desired years
                    ax.tick_params(axis='x', labelsize=12)
                    plt.setp(ax.get_xticklabels(), fontweight='bold')
                    ax.tick_params(axis='y', labelsize=12, length=0)
                    plt.setp(ax.get_yticklabels(), fontweight='bold')
                    ax.spines['top'].set_visible(False)
                    ax.spines['right'].set_visible(False)
                    st.pyplot(fig)

                # Assuming performance_historica is already loaded and processed
                # Replace 'ATLETA_NAME' with the actual name of the Atleta you want to plot
                plot_percentil_for_atleta(performance_historica, jogadores)

###############################################################################################################################
###############################################################################################################################
###############################################################################################################################
###############################################################################################################################

if choose == "Histórico do Jogador":
    st.markdown("<h2 style='text-align: center;'>Histórico do Jogador</h2>", unsafe_allow_html=True)
    st.markdown("<h3 style='text-align: center;'>2020-2024</h3>", unsafe_allow_html=True)
    nacionalidades = df8["Nacionalidade"]
    historico = pd.read_csv("base_bruta.csv")
    jogadores = st.selectbox("Digite o nome do seu jogador. A grafia deve ser exata!", options=jogadores, index=None, placeholder="Jogador")
    if jogadores:
        #Determinar a Nacionalidade
        df40 = historico.loc[(historico['Atleta']==jogadores)]
        nacionalidades = df40['Nacionalidade'].unique()
        nacionalidade = st.selectbox("Escolha a Nacionalidade do Jogador", options=nacionalidades)
   
#    if jogadores and nacionalidade:
        st.markdown("<h4 style='text-align: center;'>Histórico do Jogador<br>Temporadas 2020/2021/2022/2023/2024</b></h4>", unsafe_allow_html=True)
        historico = historico.loc[(historico['Atleta']==jogadores)&(historico['Nacionalidade']==nacionalidade)]
        historico = historico.iloc[:, np.r_[0, 2, 9, 10, 13, 15, 16]]
        historico = historico.rename(columns={"Equipe_Janela_Análise": "Equipe",
                                    "Versão_Temporada": "Temporada",
                                    "Posição.1": "Posição" 
                                    })
            
        historico = historico.sort_values(by='Temporada', ascending=False)

        # Styling DataFrame using Pandas
        def style_table(df):
            df = df.reset_index(drop=True)
            return df.style.format().set_table_styles(
                [{
                    'selector': 'thead th',
                    'props': [('font-weight', 'bold'),
                            ('border-style', 'solid'),
                            ('border-width', '0px 0px 2px 0px'),
                            ('border-color', 'black')]
                }, {
                    'selector': 'thead th:not(:first-child)',
                    'props': [('text-align', 'center')]  # Centering all headers except the first
                }, {
                    'selector': 'thead th:last-child',
                    'props': [('color', 'black')]  # Make last column header black
                }, {
                    'selector': 'td',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'center')]
                }, {
                    'selector': 'th',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'left')]
                }]
            ).set_properties(**{'padding': '8px'})

        # Displaying in Streamlit
        def main():
            #st.title("Your DataFrame")

            # Convert the styled DataFrame to HTML without the index and display it
            styled_html = style_table(historico).to_html(escape=False, index=False, hide_index=True)
            st.markdown(styled_html, unsafe_allow_html=True)

        if __name__ == '__main__':
            main()

###############################################################################################################################
###############################################################################################################################

if choose == "10 Melhores da Liga":
    st.markdown("<h2 style='text-align: center;'>10 Melhores da Liga</h2>", unsafe_allow_html=True)
    st.markdown("<h3 style='text-align: center;'>2020-2024</h3>", unsafe_allow_html=True)
    ligas = df5["Liga"]
    posições = df6["Posição"]
    temporadas = df7["Versão_Temporada"]
    liga = st.selectbox("Escolha a Liga", options=ligas)
    temporada = st.selectbox("Escolha a Temporada", options=temporadas)
    posição = st.selectbox("Escolha a Posição", options=posições, index=None, placeholder="Atacante")

    if liga and temporada:
        if posição == "Goleiro":
            st.markdown("<h4 style='text-align: center;'>10 Goleiros Clássicos Mais Bem Ranqueados<br></b></h4>", unsafe_allow_html=True)
            tabela_3 = pd.read_csv("1_Role_Goleiro.csv")
            tabela_3 = tabela_3[(tabela_3['Liga']==liga)&(tabela_3['Versão_Temporada']==temporada)]
            tabela_3 = tabela_3.iloc[:, np.r_[1, 30, 3, 7, 9:12, 15]]
            tabela_3 = tabela_3.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Posição_Wyscout':'Posição', 'Versão_Temporada':'Janela de Análise', 'Interceptações.1':'Interceptações'})
            tabela_3 = tabela_3.sort_values(by='Rating', ascending=False)
            tabela_3 = tabela_3.head(10)
            #st.dataframe(tabela_3, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_3).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()


            st.markdown("<h4 style='text-align: center;'><br>10 Goleiros Líberos Mais Bem Ranqueados<br></b></h4>", unsafe_allow_html=True)
            tabela_4 = pd.read_csv("2_Role_Goleiro_Líbero.csv")
            tabela_4 = tabela_4[(tabela_4['Liga']==liga)&(tabela_4['Versão_Temporada']==temporada)]
            tabela_4 = tabela_4.iloc[:, np.r_[1, 33, 3, 7, 9:12, 15]]
            tabela_4 = tabela_4.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Posição_Wyscout':'Posição', 'Versão_Temporada':'Janela de Análise', 'Interceptações.1':'Interceptações'})
            tabela_4 = tabela_4.sort_values(by='Rating', ascending=False)
            tabela_4 = tabela_4.head(10)
            #st.dataframe(tabela_4, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_4).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()



        elif posição == "Lateral":
            st.markdown("<h4 style='text-align: center;'>10 Laterais Defensivos Mais Bem Ranqueados<br></b></h4>", unsafe_allow_html=True)
            tabela_3 = pd.read_csv("3_Role_Lateral_Defensivo.csv")
            tabela_3 = tabela_3[(tabela_3['Liga']==liga)&(tabela_3['Versão_Temporada']==temporada)]
            tabela_3 = tabela_3.iloc[:, np.r_[1, 29, 3, 7, 9:12, 15]]
            tabela_3 = tabela_3.rename(columns={'Equipe_Janela_Análise':'Equipe'})
            tabela_3 = tabela_3.sort_values(by='Rating', ascending=False)
            tabela_3 = tabela_3.head(10)
            #st.dataframe(tabela_3, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_3).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()

            st.markdown("<h4 style='text-align: center;'><br>10 Laterais Ofensivos Mais Bem Ranqueados<br></b></h4>", unsafe_allow_html=True)
            tabela_4 = pd.read_csv("4_Role_Lateral_Ofensivo.csv")
            tabela_4 = tabela_4[(tabela_4['Liga']==liga)&(tabela_4['Versão_Temporada']==temporada)]
            tabela_4 = tabela_4.iloc[:, np.r_[1, 38, 3, 7, 9:12, 15]]
            tabela_4 = tabela_4.rename(columns={'Equipe_Janela_Análise':'Equipe'})
            tabela_4 = tabela_4.sort_values(by='Rating', ascending=False)
            tabela_4 = tabela_4.head(10)
            #st.dataframe(tabela_4, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_4).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()

            st.markdown("<h4 style='text-align: center;'><br>10 Laterais Equilibrados Mais Bem Ranqueados<br></b></h4>", unsafe_allow_html=True)
            tabela_5 = pd.read_csv("5_Role_Lateral_Equilibrado.csv")
            tabela_5 = tabela_5[(tabela_5['Liga']==liga)&(tabela_5['Versão_Temporada']==temporada)]
            tabela_5 = tabela_5.iloc[:, np.r_[1, 41, 3, 7, 9:12, 15]]
            tabela_5 = tabela_5.rename(columns={'Equipe_Janela_Análise':'Equipe'})
            tabela_5 = tabela_5.sort_values(by='Rating', ascending=False)
            tabela_5 = tabela_5.head(10)
            #st.dataframe(tabela_5, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_5).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()

        elif posição == "Zagueiro":
            st.markdown("<h4 style='text-align: center;'><br>10 Zagueiros Clássicos Mais Bem Ranqueados<br></b></h4>", unsafe_allow_html=True)
            tabela_6 = pd.read_csv("6_Role_Zagueiro_Defensivo.csv")
            tabela_6 = tabela_6[(tabela_6['Liga']==liga)&(tabela_6['Versão_Temporada']==temporada)]
            tabela_6 = tabela_6.iloc[:, np.r_[1, 29, 3, 7, 9:12, 15]]
            tabela_6 = tabela_6.rename(columns={'Equipe_Janela_Análise':'Equipe'})
            tabela_6 = tabela_6.sort_values(by='Rating', ascending=False)
            tabela_6 = tabela_6.head(10)
            #st.dataframe(tabela_6, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}", "Idade": "{:.0f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_6).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()

            st.markdown("<h4 style='text-align: center;'><br>10 Zagueiros Construtores Mais Bem Ranqueados<br></b></h4>", unsafe_allow_html=True)
            tabela_7 = pd.read_csv("7_Role_Zagueiro_Construtor.csv")
            tabela_7 = tabela_7[(tabela_7['Liga']==liga)&(tabela_7['Versão_Temporada']==temporada)]
            tabela_7 = tabela_7.iloc[:, np.r_[1, 33, 3, 7, 9:12, 15]]
            tabela_7 = tabela_7.rename(columns={'Equipe_Janela_Análise':'Equipe'})
            tabela_7 = tabela_7.sort_values(by='Rating', ascending=False)
            tabela_7 = tabela_7.head(10)
            #st.dataframe(tabela_7, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}", "Idade": "{:.0f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_7).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()

            st.markdown("<h4 style='text-align: center;'><br>10 Zagueiros Equilibrados Mais Bem Ranqueados<br></b></h4>", unsafe_allow_html=True)
            tabela_8 = pd.read_csv("8_Role_Zagueiro_Equilibrado.csv")
            tabela_8 = tabela_8[(tabela_8['Liga']==liga)&(tabela_8['Versão_Temporada']==temporada)]
            tabela_8 = tabela_8.iloc[:, np.r_[1, 36, 3, 7, 9:12, 15]]
            tabela_8 = tabela_8.rename(columns={'Equipe_Janela_Análise':'Equipe'})
            tabela_8 = tabela_8.sort_values(by='Rating', ascending=False)
            tabela_8 = tabela_8.head(10)
            #st.dataframe(tabela_8, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}", "Idade": "{:.0f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_8).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()


        elif posição == "Primeiro Volante":
            st.markdown("<h4 style='text-align: center;'>10 Primeiros Volantes Defensivos Mais Bem Ranqueados<br></b></h4>", unsafe_allow_html=True)
            tabela_12 = pd.read_csv("9_Role_Volante_Defensivo.csv")
            tabela_12 = tabela_12[(tabela_12['Liga']==liga)&(tabela_12['Versão_Temporada']==temporada)]
            tabela_12 = tabela_12.iloc[:, np.r_[1, 27, 3, 7, 9:12, 15]]
            tabela_12 = tabela_12.rename(columns={'Equipe_Janela_Análise':'Equipe'})
            tabela_12 = tabela_12.sort_values(by='Rating', ascending=False)
            tabela_12 = tabela_12.head(10)
            #st.dataframe(tabela_12, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_12).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()

            st.markdown("<h4 style='text-align: center;'><br>10 Primeiros Volantes Construtores Mais Bem Ranqueados<br></b></h4>", unsafe_allow_html=True)
            tabela_13 = pd.read_csv("10_Role_Volante_Construtor.csv")
            tabela_13 = tabela_13[(tabela_13['Liga']==liga)&(tabela_13['Versão_Temporada']==temporada)]
            tabela_13 = tabela_13.iloc[:, np.r_[1, 32, 3, 7, 9:12, 15]]
            tabela_13 = tabela_13.rename(columns={'Equipe_Janela_Análise':'Equipe'})
            tabela_13 = tabela_13.sort_values(by='Rating', ascending=False)
            tabela_13 = tabela_13.head(10)
            #st.dataframe(tabela_13, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_13).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()

            st.markdown("<h4 style='text-align: center;'><br>10 Primeiros Volantes Equilibrados Mais Bem Ranqueados<br></b></h4>", unsafe_allow_html=True)
            tabela_14 = pd.read_csv("11_Role_Volante_Equilibrado.csv")
            tabela_14 = tabela_14[(tabela_14['Liga']==liga)&(tabela_14['Versão_Temporada']==temporada)]
            tabela_14 = tabela_14.iloc[:, np.r_[1, 34, 3, 7, 9:12, 15]]
            tabela_14 = tabela_14.rename(columns={'Equipe_Janela_Análise':'Equipe'})
            tabela_14 = tabela_14.sort_values(by='Rating', ascending=False)
            tabela_14 = tabela_14.head(10)
            #st.dataframe(tabela_14, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_14).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()

        elif posição == "Segundo Volante":
            st.markdown("<h4 style='text-align: center;'>10 Segundos Volantes Box-to-Box Mais Bem Ranqueados<br></b></h4>", unsafe_allow_html=True)
            tabela_12 = pd.read_csv("12_Role_Segundo_Volante_Box_to_Box.csv")
            tabela_12 = tabela_12[(tabela_12['Liga']==liga)&(tabela_12['Versão_Temporada']==temporada)]
            tabela_12 = tabela_12.iloc[:, np.r_[1, 36, 3, 7, 9:12, 15]]
            tabela_12 = tabela_12.rename(columns={'Equipe_Janela_Análise':'Equipe'})
            tabela_12 = tabela_12.sort_values(by='Rating', ascending=False)
            tabela_12 = tabela_12.head(10)
            #st.dataframe(tabela_12, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}", "Idade": "{:.0f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_12).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()

            st.markdown("<h4 style='text-align: center;'><br>10 Segundos Volantes Organizadores Mais Bem Ranqueados<br></b></h4>", unsafe_allow_html=True)
            tabela_13 = pd.read_csv("13_Role_Segundo_Volante_Organizador.csv")
            tabela_13 = tabela_13[(tabela_13['Liga']==liga)&(tabela_13['Versão_Temporada']==temporada)]
            tabela_13 = tabela_13.iloc[:, np.r_[1, 33, 3, 7, 9:12, 15]]
            tabela_13 = tabela_13.rename(columns={'Equipe_Janela_Análise':'Equipe'})
            tabela_13 = tabela_13.sort_values(by='Rating', ascending=False)
            tabela_13 = tabela_13.head(10)
            #st.dataframe(tabela_13, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}", "Idade": "{:.0f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_13).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()

            st.markdown("<h4 style='text-align: center;'><br>10 Segundos Volantes Equilibrados Mais Bem Ranqueados<br></b></h4>", unsafe_allow_html=True)
            tabela_14 = pd.read_csv("14_Role_Segundo_Volante_Equilibrado.csv")
            tabela_14 = tabela_14[(tabela_14['Liga']==liga)&(tabela_14['Versão_Temporada']==temporada)]
            tabela_14 = tabela_14.iloc[:, np.r_[1, 36, 3, 7, 9:12, 15]]
            tabela_14 = tabela_14.rename(columns={'Equipe_Janela_Análise':'Equipe'})
            tabela_14 = tabela_14.sort_values(by='Rating', ascending=False)
            tabela_14 = tabela_14.head(10)
            #st.dataframe(tabela_14, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}", "Idade": "{:.0f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_14).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()

        elif posição == "Meia":
            st.markdown("<h4 style='text-align: center;'>10 Meias Organizadores Mais Bem Ranqueados<br></b></h4>", unsafe_allow_html=True)
            tabela_15 = pd.read_csv("15_Role_Meia_Organizador.csv")
            tabela_15 = tabela_15[(tabela_15['Liga']==liga)&(tabela_15['Versão_Temporada']==temporada)]
            tabela_15 = tabela_15.iloc[:, np.r_[1, 33, 3, 7, 9:12, 15]]
            tabela_15 = tabela_15.rename(columns={'Equipe_Janela_Análise':'Equipe'})
            tabela_15 = tabela_15.sort_values(by='Rating', ascending=False)
            tabela_15 = tabela_15.head(10)
            #st.dataframe(tabela_15, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_15).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()

            st.markdown("<h4 style='text-align: center;'><br>10 Meias Atacantes Mais Bem Ranqueados<br></b></h4>", unsafe_allow_html=True)
            tabela_16 = pd.read_csv("16_Role_Meia_Atacante.csv")
            tabela_16 = tabela_16[(tabela_16['Liga']==liga)&(tabela_16['Versão_Temporada']==temporada)]
            tabela_16 = tabela_16.iloc[:, np.r_[1, 40, 3, 7, 9:12, 15]]
            tabela_16 = tabela_16.rename(columns={'Equipe_Janela_Análise':'Equipe'})
            tabela_16 = tabela_16.sort_values(by='Rating', ascending=False)
            tabela_16 = tabela_16.head(10)
            #st.dataframe(tabela_16, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_16).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()

        elif posição == "Extremo":
            st.markdown("<h4 style='text-align: center;'>10 Extremos Organizadores Mais Bem Ranqueados<br></b></h4>", unsafe_allow_html=True)
            tabela_17 = pd.read_csv("17_Role_Extremo_Organizador.csv")
            tabela_17 = tabela_17[(tabela_17['Liga']==liga)&(tabela_17['Versão_Temporada']==temporada)]
            tabela_17 = tabela_17.iloc[:, np.r_[1, 36, 3, 7, 9:12, 15]]
            tabela_17 = tabela_17.rename(columns={'Equipe_Janela_Análise':'Equipe'})
            tabela_17 = tabela_17.sort_values(by='Rating', ascending=False)
            tabela_17 = tabela_17.head(10)
            #st.dataframe(tabela_17, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_17).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()

            st.markdown("<h4 style='text-align: center;'><br>10 Extremos Táticos Mais Bem Ranqueados<br></b></h4>", unsafe_allow_html=True)
            tabela_18 = pd.read_csv("18_Role_Extremo_Tático.csv")
            tabela_18 = tabela_18[(tabela_18['Liga']==liga)&(tabela_18['Versão_Temporada']==temporada)]
            tabela_18 = tabela_18.iloc[:, np.r_[1, 30, 3, 7, 9:12, 15]]
            tabela_18 = tabela_18.rename(columns={'Equipe_Janela_Análise':'Equipe'})
            tabela_18 = tabela_18.sort_values(by='Rating', ascending=False)
            tabela_18 = tabela_18.head(10)
            #st.dataframe(tabela_18, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_18).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()

            st.markdown("<h4 style='text-align: center;'><br>10 Extremos Agudos Mais Bem Ranqueados<br></b></h4>", unsafe_allow_html=True)
            tabela_19 = pd.read_csv("19_Role_Extremo_Agudo.csv")
            tabela_19 = tabela_19[(tabela_19['Liga']==liga)&(tabela_19['Versão_Temporada']==temporada)]
            tabela_19 = tabela_19.iloc[:, np.r_[1, 36, 3, 7, 9:12, 15]]
            tabela_19 = tabela_19.rename(columns={'Equipe_Janela_Análise':'Equipe'})
            tabela_19 = tabela_19.sort_values(by='Rating', ascending=False)
            tabela_19 = tabela_19.head(10)
            #st.dataframe(tabela_19, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_19).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()

        else:
            st.markdown("<h4 style='text-align: center;'>10 Atacantes Referências Mais Bem Ranqueados<br></b></h4>", unsafe_allow_html=True)
            tabela_17 = pd.read_csv("20_Role_Atacante_Referência.csv")
            tabela_17 = tabela_17[(tabela_17['Liga']==liga)&(tabela_17['Versão_Temporada']==temporada)]
            tabela_17 = tabela_17.iloc[:, np.r_[1, 33, 3, 7, 9:12, 15]]
            tabela_17 = tabela_17.rename(columns={'Equipe_Janela_Análise':'Equipe'})
            tabela_17 = tabela_17.sort_values(by='Rating', ascending=False)
            tabela_17 = tabela_17.head(10)
            #st.dataframe(tabela_17, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_17).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()

            st.markdown("<h4 style='text-align: center;'><br>10 Atacantes Móveis Mais Bem Ranqueados<br></b></h4>", unsafe_allow_html=True)
            tabela_18 = pd.read_csv("21_Role_Atacante_Móvel.csv")
            tabela_18 = tabela_18[(tabela_18['Liga']==liga)&(tabela_18['Versão_Temporada']==temporada)]
            tabela_18 = tabela_18.iloc[:, np.r_[1, 32, 3, 7, 9:12, 15]]
            tabela_18 = tabela_18.rename(columns={'Equipe_Janela_Análise':'Equipe'})
            tabela_18 = tabela_18.sort_values(by='Rating', ascending=False)
            tabela_18 = tabela_18.head(10)
            #st.dataframe(tabela_18, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_18).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()

            st.markdown("<h4 style='text-align: center;'><br>10 Segundos Atacantes Mais Bem Ranqueados<br></b></h4>", unsafe_allow_html=True)
            tabela_19 = pd.read_csv("22_Role_Segundo_Atacante.csv")
            tabela_19 = tabela_19[(tabela_19['Liga']==liga)&(tabela_19['Versão_Temporada']==temporada)]
            tabela_19 = tabela_19.iloc[:, np.r_[1, 36, 3, 7, 9:12, 15]]
            tabela_19 = tabela_19.rename(columns={'Equipe_Janela_Análise':'Equipe'})
            tabela_19 = tabela_19.sort_values(by='Rating', ascending=False)
            tabela_19 = tabela_19.head(10)
            #st.dataframe(tabela_19, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_19).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()

###############################################################################################################################
###############################################################################################################################
###############################################################################################################################
###############################################################################################################################

if choose == "Nacionais pelo Mundo":
    st.markdown("<h2 style='text-align: center;'>Nacionais pelo Mundo</h2>", unsafe_allow_html=True)
    st.markdown("<h3 style='text-align: center;'>2024</h3>", unsafe_allow_html=True)
    nacionalidades = df8["Nacionalidade"]
    posições = df6["Posição"]
    temporadas = df7["Versão_Temporada"]
    mundo_options = ['BRA1', 'ARG1', 'ENG1', 'ENG2', 'FRA1', 'FRA2', 'SPA1', 'SPA2', 'ITA1', 'ITA2', 'GER1', 'GER2', 'POR1', 'POR2', 'SWZ', 'CZH', 'CRO', 'SER', 'RUS', 'UKR', 'BEL1', 'BEL2', 'CHN',
             'DEN', 'GRE', 'HOL', 'JAP', 'MEX', 'SAUD', 'SCT', 'TUR', 'UAE', 'USA', 'BUL', 'AUT', 'QAT']
    nacionalidade = st.selectbox("Escolha a Nacionalidade do Atleta", options=nacionalidades)
    posição = st.selectbox("Escolha a Posição do Atleta", options=posições)
    temporada = 2024
    
    if nacionalidade and temporada:
        if posição == "Goleiro":
            st.markdown("<h4 style='text-align: center;'>Nacionais Mais Bem Ranqueados<br><br>Goleiros Clássicos</b></h4>", unsafe_allow_html=True)
            tabela_5 = pd.read_csv("1_Role_Goleiro_Full.csv")
            tabela_5 = tabela_5[(tabela_5['Nacionalidade']==nacionalidade)&(tabela_5['Versão_Temporada']==temporada)]
            tabela_5 = tabela_5.iloc[:, np.r_[1, 25, 30, 3, 4, 7, 9:12, 15]]
            tabela_5 = tabela_5.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Posição_Wyscout':'Posição', 'Versão_Temporada':'Janela de Análise', 'Interceptações.1':'Interceptações'})
            tabela_5 = tabela_5[(tabela_5['Liga'] == 'ENG1') | (tabela_5['Liga'] == 'ENG2') | (tabela_5['Liga'] == 'FRA1') | (tabela_5['Liga'] == 'FRA2') 
                                | (tabela_5['Liga'] == 'SPA1') | (tabela_5['Liga'] == 'ITA1') | (tabela_5['Liga'] == 'GER1') | (tabela_5['Liga'] == 'POR1') 
                                | (tabela_5['Liga'] == 'SWZ') | (tabela_5['Liga'] == 'RUS') | (tabela_5['Liga'] == 'UKR') | (tabela_5['Liga'] == 'BEL1') 
                                | (tabela_5['Liga'] == 'CHN') | (tabela_5['Liga'] == 'DEN') | (tabela_5['Liga'] == 'GRE') | (tabela_5['Liga'] == 'HOL') 
                                | (tabela_5['Liga'] == 'JAP') | (tabela_5['Liga'] == 'MEX') | (tabela_5['Liga'] == 'SAUD') | (tabela_5['Liga'] == 'TUR') 
                                | (tabela_5['Liga'] == 'UAE') | (tabela_5['Liga'] == 'USA') | (tabela_5['Liga'] == 'ITA2') | (tabela_5['Liga'] == 'GER2') 
                                | (tabela_5['Liga'] == 'POR2') | (tabela_5['Liga'] == 'BUL') | (tabela_5['Liga'] == 'AUT') | (tabela_5['Liga'] == 'QAT')
                                | (tabela_5['Liga'] == 'CRO') | (tabela_5['Liga'] == 'CZH') | (tabela_5['Liga'] == 'NOR') | (tabela_5['Liga'] == 'POL')
                                | (tabela_5['Liga'] == 'SCT') | (tabela_5['Liga'] == 'SER') | (tabela_5['Liga'] == 'SPA2')]
            tabela_5 = tabela_5.sort_values(by='Rating', ascending=False)
            tabela_5 = tabela_5.head(50)
            #st.dataframe(tabela_5, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_5).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()


            st.markdown("<h4 style='text-align: center;'><br>Nacionais Mais Bem Ranqueados<br><br>Goleiros Líberos</b></h4>", unsafe_allow_html=True)
            tabela_6 = pd.read_csv("2_Role_Goleiro_Líbero_Full.csv")
            tabela_6 = tabela_6[(tabela_6['Nacionalidade']==nacionalidade)&(tabela_6['Versão_Temporada']==temporada)]
            tabela_6 = tabela_6.iloc[:, np.r_[1, 28, 33, 3, 4, 7, 9:12, 15]]
            tabela_6 = tabela_6.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Posição_Wyscout':'Posição', 'Versão_Temporada':'Janela de Análise', 'Interceptações.1':'Interceptações'})
            tabela_6 = tabela_6[(tabela_6['Liga'] == 'ENG1') | (tabela_6['Liga'] == 'ENG2') | (tabela_6['Liga'] == 'FRA1') | (tabela_6['Liga'] == 'FRA2') 
                                | (tabela_6['Liga'] == 'SPA1') | (tabela_6['Liga'] == 'ITA1') | (tabela_6['Liga'] == 'GER1') | (tabela_6['Liga'] == 'POR1') 
                                | (tabela_6['Liga'] == 'SWZ') | (tabela_6['Liga'] == 'RUS') | (tabela_6['Liga'] == 'UKR') | (tabela_6['Liga'] == 'BEL1') 
                                | (tabela_6['Liga'] == 'CHN') | (tabela_6['Liga'] == 'DEN') | (tabela_6['Liga'] == 'GRE') | (tabela_6['Liga'] == 'HOL') 
                                | (tabela_6['Liga'] == 'JAP') | (tabela_6['Liga'] == 'MEX') | (tabela_6['Liga'] == 'SAUD') | (tabela_6['Liga'] == 'TUR') 
                                | (tabela_6['Liga'] == 'UAE') | (tabela_6['Liga'] == 'USA') | (tabela_6['Liga'] == 'ITA2') | (tabela_6['Liga'] == 'GER2') 
                                | (tabela_6['Liga'] == 'POR2') | (tabela_6['Liga'] == 'BUL') | (tabela_6['Liga'] == 'AUT') | (tabela_6['Liga'] == 'QAT')
                                | (tabela_6['Liga'] == 'CRO') | (tabela_6['Liga'] == 'CZH') | (tabela_6['Liga'] == 'NOR') | (tabela_6['Liga'] == 'POL')
                                | (tabela_6['Liga'] == 'SCT') | (tabela_6['Liga'] == 'SER') | (tabela_6['Liga'] == 'SPA2')]
            tabela_6 = tabela_6.sort_values(by='Rating', ascending=False)
            tabela_6 = tabela_6.head(50)
            #st.dataframe(tabela_6, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_6).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()


        elif posição == "Lateral":
            st.markdown("<h4 style='text-align: center;'><br>Nacionais Mais Bem Ranqueados<br><br>Laterais Defensivos</b></h4>", unsafe_allow_html=True)
            tabela_5 = pd.read_csv("3_Role_Lateral_Defensivo_Full.csv")
            tabela_5 = tabela_5[(tabela_5['Nacionalidade']==nacionalidade)&(tabela_5['Versão_Temporada']==temporada)]
            tabela_5 = tabela_5.iloc[:, np.r_[1, 24, 29, 3, 4, 7, 9:12, 15]]
            tabela_5 = tabela_5.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Posição_Wyscout':'Posição', 'Versão_Temporada':'Janela de Análise'})
            tabela_5 = tabela_5[(tabela_5['Liga'] == 'ENG1') | (tabela_5['Liga'] == 'ENG2') | (tabela_5['Liga'] == 'FRA1') | (tabela_5['Liga'] == 'FRA2') 
                                | (tabela_5['Liga'] == 'SPA1') | (tabela_5['Liga'] == 'ITA1') | (tabela_5['Liga'] == 'GER1') | (tabela_5['Liga'] == 'POR1') 
                                | (tabela_5['Liga'] == 'SWZ') | (tabela_5['Liga'] == 'RUS') | (tabela_5['Liga'] == 'UKR') | (tabela_5['Liga'] == 'BEL1') 
                                | (tabela_5['Liga'] == 'CHN') | (tabela_5['Liga'] == 'DEN') | (tabela_5['Liga'] == 'GRE') | (tabela_5['Liga'] == 'HOL') 
                                | (tabela_5['Liga'] == 'JAP') | (tabela_5['Liga'] == 'MEX') | (tabela_5['Liga'] == 'SAUD') | (tabela_5['Liga'] == 'TUR') 
                                | (tabela_5['Liga'] == 'UAE') | (tabela_5['Liga'] == 'USA') | (tabela_5['Liga'] == 'ITA2') | (tabela_5['Liga'] == 'GER2') 
                                | (tabela_5['Liga'] == 'POR2') | (tabela_5['Liga'] == 'BUL') | (tabela_5['Liga'] == 'AUT') | (tabela_5['Liga'] == 'QAT')
                                | (tabela_5['Liga'] == 'CRO') | (tabela_5['Liga'] == 'CZH') | (tabela_5['Liga'] == 'NOR') | (tabela_5['Liga'] == 'POL')
                                | (tabela_5['Liga'] == 'SCT') | (tabela_5['Liga'] == 'SER') | (tabela_5['Liga'] == 'SPA2')]
            tabela_5 = tabela_5.sort_values(by='Rating', ascending=False)
            tabela_5 = tabela_5.head(50)
            #st.dataframe(tabela_5, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_5).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()


            st.markdown("<h4 style='text-align: center;'><br>Nacionais Mais Bem Ranqueados<br><br>Laterais Ofensivos</b></h4>", unsafe_allow_html=True)
            tabela_6 = pd.read_csv("4_Role_Lateral_Ofensivo_Full.csv")
            tabela_6 = tabela_6[(tabela_6['Nacionalidade']==nacionalidade)&(tabela_6['Versão_Temporada']==temporada)]
            tabela_6 = tabela_6.iloc[:, np.r_[1, 33, 38, 3, 4, 7, 9:12, 15]]
            tabela_6 = tabela_6.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Posição_Wyscout':'Posição', 'Versão_Temporada':'Janela de Análise'})
            tabela_6 = tabela_6[(tabela_6['Liga'] == 'ENG1') | (tabela_6['Liga'] == 'ENG2') | (tabela_6['Liga'] == 'FRA1') | (tabela_6['Liga'] == 'FRA2') 
                                | (tabela_6['Liga'] == 'SPA1') | (tabela_6['Liga'] == 'ITA1') | (tabela_6['Liga'] == 'GER1') | (tabela_6['Liga'] == 'POR1') 
                                | (tabela_6['Liga'] == 'SWZ') | (tabela_6['Liga'] == 'RUS') | (tabela_6['Liga'] == 'UKR') | (tabela_6['Liga'] == 'BEL1') 
                                | (tabela_6['Liga'] == 'CHN') | (tabela_6['Liga'] == 'DEN') | (tabela_6['Liga'] == 'GRE') | (tabela_6['Liga'] == 'HOL') 
                                | (tabela_6['Liga'] == 'JAP') | (tabela_6['Liga'] == 'MEX') | (tabela_6['Liga'] == 'SAUD') | (tabela_6['Liga'] == 'TUR') 
                                | (tabela_6['Liga'] == 'UAE') | (tabela_6['Liga'] == 'USA') | (tabela_6['Liga'] == 'ITA2') | (tabela_6['Liga'] == 'GER2') 
                                | (tabela_6['Liga'] == 'POR2') | (tabela_6['Liga'] == 'BUL') | (tabela_6['Liga'] == 'AUT') | (tabela_6['Liga'] == 'QAT')
                                | (tabela_6['Liga'] == 'CRO') | (tabela_6['Liga'] == 'CZH') | (tabela_6['Liga'] == 'NOR') | (tabela_6['Liga'] == 'POL')
                                | (tabela_6['Liga'] == 'SCT') | (tabela_6['Liga'] == 'SER') | (tabela_6['Liga'] == 'SPA2')]
            tabela_6 = tabela_6.sort_values(by='Rating', ascending=False)
            tabela_6 = tabela_6.head(50)
            #st.dataframe(tabela_6, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_6).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()

            st.markdown("<h4 style='text-align: center;'><br>Nacionais Mais Bem Ranqueados<br><br>Laterais Equilibrados</b></h4>", unsafe_allow_html=True)
            tabela_7 = pd.read_csv("5_Role_Lateral_Equilibrado_Full.csv")
            tabela_7 = tabela_7[(tabela_7['Nacionalidade']==nacionalidade)&(tabela_7['Versão_Temporada']==temporada)]
            tabela_7 = tabela_7.iloc[:, np.r_[1, 36, 41, 3, 4, 7, 9:12, 15]]
            tabela_7 = tabela_7.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Posição_Wyscout':'Posição', 'Versão_Temporada':'Janela de Análise'})
            tabela_7 = tabela_7[(tabela_7['Liga'] == 'ENG1') | (tabela_7['Liga'] == 'ENG2') | (tabela_7['Liga'] == 'FRA1') | (tabela_7['Liga'] == 'FRA2') 
                                | (tabela_7['Liga'] == 'SPA1') | (tabela_7['Liga'] == 'ITA1') | (tabela_7['Liga'] == 'GER1') | (tabela_7['Liga'] == 'POR1') 
                                | (tabela_7['Liga'] == 'SWZ') | (tabela_7['Liga'] == 'RUS') | (tabela_7['Liga'] == 'UKR') | (tabela_7['Liga'] == 'BEL1') 
                                | (tabela_7['Liga'] == 'CHN') | (tabela_7['Liga'] == 'DEN') | (tabela_7['Liga'] == 'GRE') | (tabela_7['Liga'] == 'HOL') 
                                | (tabela_7['Liga'] == 'JAP') | (tabela_7['Liga'] == 'MEX') | (tabela_7['Liga'] == 'SAUD') | (tabela_7['Liga'] == 'TUR') 
                                | (tabela_7['Liga'] == 'UAE') | (tabela_7['Liga'] == 'USA') | (tabela_7['Liga'] == 'ITA2') | (tabela_7['Liga'] == 'GER2') 
                                | (tabela_7['Liga'] == 'POR2') | (tabela_7['Liga'] == 'BUL') | (tabela_7['Liga'] == 'AUT') | (tabela_7['Liga'] == 'QAT')
                                | (tabela_7['Liga'] == 'CRO') | (tabela_7['Liga'] == 'CZH') | (tabela_7['Liga'] == 'NOR') | (tabela_7['Liga'] == 'POL')
                                | (tabela_7['Liga'] == 'SCT') | (tabela_7['Liga'] == 'SER') | (tabela_7['Liga'] == 'SPA2')]
            tabela_7 = tabela_7.sort_values(by='Rating', ascending=False)
            tabela_7 = tabela_7.head(50)
            #st.dataframe(tabela_7, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_7).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()

        elif posição == "Zagueiro":
            st.markdown("<h4 style='text-align: center;'><br>Nacionais Mais Bem Ranqueados<br><br>Zagueiros Clássicos</b></h4>", unsafe_allow_html=True)
            tabela_8 = pd.read_csv("6_Role_Zagueiro_Defensivo_Full.csv")
            tabela_8 = tabela_8[(tabela_8['Nacionalidade']==nacionalidade)&(tabela_8['Versão_Temporada']==temporada)]
            tabela_8 = tabela_8.iloc[:, np.r_[1, 24, 29, 3, 4, 7, 9:12, 15]]
            tabela_8 = tabela_8.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Posição_Wyscout':'Posição', 'Versão_Temporada':'Janela de Análise'})
            tabela_8 = tabela_8[(tabela_8['Liga'] == 'ENG1') | (tabela_8['Liga'] == 'ENG2') | (tabela_8['Liga'] == 'FRA1') | (tabela_8['Liga'] == 'FRA2') 
                                | (tabela_8['Liga'] == 'SPA1') | (tabela_8['Liga'] == 'ITA1') | (tabela_8['Liga'] == 'GER1') | (tabela_8['Liga'] == 'POR1') 
                                | (tabela_8['Liga'] == 'SWZ') | (tabela_8['Liga'] == 'RUS') | (tabela_8['Liga'] == 'UKR') | (tabela_8['Liga'] == 'BEL1') 
                                | (tabela_8['Liga'] == 'CHN') | (tabela_8['Liga'] == 'DEN') | (tabela_8['Liga'] == 'GRE') | (tabela_8['Liga'] == 'HOL') 
                                | (tabela_8['Liga'] == 'JAP') | (tabela_8['Liga'] == 'MEX') | (tabela_8['Liga'] == 'SAUD') | (tabela_8['Liga'] == 'TUR') 
                                | (tabela_8['Liga'] == 'UAE') | (tabela_8['Liga'] == 'USA') | (tabela_8['Liga'] == 'ITA2') | (tabela_8['Liga'] == 'GER2') 
                                | (tabela_8['Liga'] == 'POR2') | (tabela_8['Liga'] == 'BUL') | (tabela_8['Liga'] == 'AUT') | (tabela_8['Liga'] == 'QAT')
                                | (tabela_8['Liga'] == 'CRO') | (tabela_8['Liga'] == 'CZH') | (tabela_8['Liga'] == 'NOR') | (tabela_8['Liga'] == 'POL')
                                | (tabela_8['Liga'] == 'SCT') | (tabela_8['Liga'] == 'SER') | (tabela_8['Liga'] == 'SPA2')]
            tabela_8 = tabela_8.sort_values(by='Rating', ascending=False)
            tabela_8 = tabela_8.head(50)
            #st.dataframe(tabela_8, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}", "Idade": "{:.0f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_8).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()

            st.markdown("<h4 style='text-align: center;'><br>Nacionais Mais Bem Ranqueados<br><br>Zagueiros Construtores</b></h4>", unsafe_allow_html=True)
            tabela_9 = pd.read_csv("7_Role_Zagueiro_Construtor_Full.csv")
            tabela_9 = tabela_9[(tabela_9['Nacionalidade']==nacionalidade)&(tabela_9['Versão_Temporada']==temporada)]
            tabela_9 = tabela_9.iloc[:, np.r_[1, 28, 33, 3, 4, 7, 9:12, 15]]
            tabela_9 = tabela_9.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Posição_Wyscout':'Posição', 'Versão_Temporada':'Janela de Análise'})
            tabela_9 = tabela_9[(tabela_9['Liga'] == 'ENG1') | (tabela_9['Liga'] == 'ENG2') | (tabela_9['Liga'] == 'FRA1') | (tabela_9['Liga'] == 'FRA2') 
                                | (tabela_9['Liga'] == 'SPA1') | (tabela_9['Liga'] == 'ITA1') | (tabela_9['Liga'] == 'GER1') | (tabela_9['Liga'] == 'POR1') 
                                | (tabela_9['Liga'] == 'SWZ') | (tabela_9['Liga'] == 'RUS') | (tabela_9['Liga'] == 'UKR') | (tabela_9['Liga'] == 'BEL1') 
                                | (tabela_9['Liga'] == 'CHN') | (tabela_9['Liga'] == 'DEN') | (tabela_9['Liga'] == 'GRE') | (tabela_9['Liga'] == 'HOL') 
                                | (tabela_9['Liga'] == 'JAP') | (tabela_9['Liga'] == 'MEX') | (tabela_9['Liga'] == 'SAUD') | (tabela_9['Liga'] == 'TUR') 
                                | (tabela_9['Liga'] == 'UAE') | (tabela_9['Liga'] == 'USA') | (tabela_9['Liga'] == 'ITA2') | (tabela_9['Liga'] == 'GER2') 
                                | (tabela_9['Liga'] == 'POR2') | (tabela_9['Liga'] == 'BUL') | (tabela_9['Liga'] == 'AUT') | (tabela_9['Liga'] == 'QAT')
                                | (tabela_9['Liga'] == 'CRO') | (tabela_9['Liga'] == 'CZH') | (tabela_9['Liga'] == 'NOR') | (tabela_9['Liga'] == 'POL')
                                | (tabela_9['Liga'] == 'SCT') | (tabela_9['Liga'] == 'SER') | (tabela_9['Liga'] == 'SPA2')]
            tabela_9 = tabela_9.sort_values(by='Rating', ascending=False)
            tabela_9 = tabela_9.head(50)
            #st.dataframe(tabela_9, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}", "Idade": "{:.0f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_9).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()

            st.markdown("<h4 style='text-align: center;'><br>Nacionais Mais Bem Ranqueados<br><br>Zagueiros Equilibrados</b></h4>", unsafe_allow_html=True)
            tabela_10 = pd.read_csv("8_Role_Zagueiro_Equilibrado_Full.csv")
            tabela_10 = tabela_10[(tabela_10['Nacionalidade']==nacionalidade)&(tabela_10['Versão_Temporada']==temporada)]
            tabela_10 = tabela_10.iloc[:, np.r_[1, 31, 36, 3, 4, 7, 9:12, 15]]
            tabela_10 = tabela_10.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Posição_Wyscout':'Posição', 'Versão_Temporada':'Janela de Análise'})
            tabela_10 = tabela_10[(tabela_10['Liga'] == 'ENG1') | (tabela_10['Liga'] == 'ENG2') | (tabela_10['Liga'] == 'FRA1') | (tabela_10['Liga'] == 'FRA2') 
                                | (tabela_10['Liga'] == 'SPA1') | (tabela_10['Liga'] == 'ITA1') | (tabela_10['Liga'] == 'GER1') | (tabela_10['Liga'] == 'POR1') 
                                | (tabela_10['Liga'] == 'SWZ') | (tabela_10['Liga'] == 'RUS') | (tabela_10['Liga'] == 'UKR') | (tabela_10['Liga'] == 'BEL1') 
                                | (tabela_10['Liga'] == 'CHN') | (tabela_10['Liga'] == 'DEN') | (tabela_10['Liga'] == 'GRE') | (tabela_10['Liga'] == 'HOL') 
                                | (tabela_10['Liga'] == 'JAP') | (tabela_10['Liga'] == 'MEX') | (tabela_10['Liga'] == 'SAUD') | (tabela_10['Liga'] == 'TUR') 
                                | (tabela_10['Liga'] == 'UAE') | (tabela_10['Liga'] == 'USA') | (tabela_10['Liga'] == 'ITA2') | (tabela_10['Liga'] == 'GER2') 
                                | (tabela_10['Liga'] == 'POR2') | (tabela_10['Liga'] == 'BUL') | (tabela_10['Liga'] == 'AUT') | (tabela_10['Liga'] == 'QAT')
                                | (tabela_10['Liga'] == 'CRO') | (tabela_10['Liga'] == 'CZH') | (tabela_10['Liga'] == 'NOR') | (tabela_10['Liga'] == 'POL')
                                | (tabela_10['Liga'] == 'SCT') | (tabela_10['Liga'] == 'SER') | (tabela_10['Liga'] == 'SPA2')]
            tabela_10 = tabela_10.sort_values(by='Rating', ascending=False)
            tabela_10 = tabela_10.head(50)
            #st.dataframe(tabela_10, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}", "Idade": "{:.0f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_10).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()

        elif posição == "Primeiro Volante":
            st.markdown("<h4 style='text-align: center;'><br>Nacionais Mais Bem Ranqueados<br><br>Primeiros Volantes Defensivos</b></h4>", unsafe_allow_html=True)
            tabela_11 = pd.read_csv("9_Role_Volante_Defensivo_Full.csv")
            tabela_11 = tabela_11[(tabela_11['Nacionalidade']==nacionalidade)&(tabela_11['Versão_Temporada']==temporada)]
            tabela_11 = tabela_11.iloc[:, np.r_[1, 22, 27, 3, 4, 7, 9:12, 15]]
            tabela_11 = tabela_11.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Posição_Wyscout':'Posição', 'Versão_Temporada':'Janela de Análise'})
            tabela_11 = tabela_11[(tabela_11['Liga'] == 'ENG1') | (tabela_11['Liga'] == 'ENG2') | (tabela_11['Liga'] == 'FRA1') | (tabela_11['Liga'] == 'FRA2') 
                                | (tabela_11['Liga'] == 'SPA1') | (tabela_11['Liga'] == 'ITA1') | (tabela_11['Liga'] == 'GER1') | (tabela_11['Liga'] == 'POR1') 
                                | (tabela_11['Liga'] == 'SWZ') | (tabela_11['Liga'] == 'RUS') | (tabela_11['Liga'] == 'UKR') | (tabela_11['Liga'] == 'BEL1') 
                                | (tabela_11['Liga'] == 'CHN') | (tabela_11['Liga'] == 'DEN') | (tabela_11['Liga'] == 'GRE') | (tabela_11['Liga'] == 'HOL') 
                                | (tabela_11['Liga'] == 'JAP') | (tabela_11['Liga'] == 'MEX') | (tabela_11['Liga'] == 'SAUD') | (tabela_11['Liga'] == 'TUR') 
                                | (tabela_11['Liga'] == 'UAE') | (tabela_11['Liga'] == 'USA') | (tabela_11['Liga'] == 'ITA2') | (tabela_11['Liga'] == 'GER2') 
                                | (tabela_11['Liga'] == 'POR2') | (tabela_11['Liga'] == 'BUL') | (tabela_11['Liga'] == 'AUT') | (tabela_11['Liga'] == 'QAT')
                                | (tabela_11['Liga'] == 'CRO') | (tabela_11['Liga'] == 'CZH') | (tabela_11['Liga'] == 'NOR') | (tabela_11['Liga'] == 'POL')
                                | (tabela_11['Liga'] == 'SCT') | (tabela_11['Liga'] == 'SER') | (tabela_11['Liga'] == 'SPA2')]
            tabela_11 = tabela_11.sort_values(by='Rating', ascending=False)
            tabela_11 = tabela_11.head(50)
            #st.dataframe(tabela_11, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_11).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()


            st.markdown("<h4 style='text-align: center;'><br>Nacionais Mais Bem Ranqueados<br><br>Primeiros Volantes Construtores</b></h4>", unsafe_allow_html=True)
            tabela_12 = pd.read_csv("10_Role_Volante_Construtor_Full.csv")
            tabela_12 = tabela_12[(tabela_12['Nacionalidade']==nacionalidade)&(tabela_12['Versão_Temporada']==temporada)]
            tabela_12 = tabela_12.iloc[:, np.r_[1, 27, 32, 3, 4, 7, 9:12, 15]]
            tabela_12 = tabela_12.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Posição_Wyscout':'Posição', 'Versão_Temporada':'Janela de Análise'})
            tabela_12 = tabela_12[(tabela_12['Liga'] == 'ENG1') | (tabela_12['Liga'] == 'ENG2') | (tabela_12['Liga'] == 'FRA1') | (tabela_12['Liga'] == 'FRA2') 
                                | (tabela_12['Liga'] == 'SPA1') | (tabela_12['Liga'] == 'ITA1') | (tabela_12['Liga'] == 'GER1') | (tabela_12['Liga'] == 'POR1') 
                                | (tabela_12['Liga'] == 'SWZ') | (tabela_12['Liga'] == 'RUS') | (tabela_12['Liga'] == 'UKR') | (tabela_12['Liga'] == 'BEL1') 
                                | (tabela_12['Liga'] == 'CHN') | (tabela_12['Liga'] == 'DEN') | (tabela_12['Liga'] == 'GRE') | (tabela_12['Liga'] == 'HOL') 
                                | (tabela_12['Liga'] == 'JAP') | (tabela_12['Liga'] == 'MEX') | (tabela_12['Liga'] == 'SAUD') | (tabela_12['Liga'] == 'TUR') 
                                | (tabela_12['Liga'] == 'UAE') | (tabela_12['Liga'] == 'USA') | (tabela_12['Liga'] == 'ITA2') | (tabela_12['Liga'] == 'GER2') 
                                | (tabela_12['Liga'] == 'POR2') | (tabela_12['Liga'] == 'BUL') | (tabela_12['Liga'] == 'AUT') | (tabela_12['Liga'] == 'QAT')
                                | (tabela_12['Liga'] == 'CRO') | (tabela_12['Liga'] == 'CZH') | (tabela_12['Liga'] == 'NOR') | (tabela_12['Liga'] == 'POL')
                                | (tabela_12['Liga'] == 'SCT') | (tabela_12['Liga'] == 'SER') | (tabela_12['Liga'] == 'SPA2')]
            tabela_12 = tabela_12.sort_values(by='Rating', ascending=False)
            tabela_12 = tabela_12.head(50)
            #st.dataframe(tabela_12, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_12).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()

            st.markdown("<h4 style='text-align: center;'><br>Nacionais Mais Bem Ranqueados<br><br>Primeiros Volantes Equilibrados</b></h4>", unsafe_allow_html=True)
            tabela_13 = pd.read_csv("11_Role_Volante_Equilibrado_Full.csv")
            tabela_13 = tabela_13[(tabela_13['Nacionalidade']==nacionalidade)&(tabela_13['Versão_Temporada']==temporada)]
            tabela_13 = tabela_13.iloc[:, np.r_[1, 29, 34, 3, 4, 7, 9:12, 15]]
            tabela_13 = tabela_13.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Posição_Wyscout':'Posição', 'Versão_Temporada':'Janela de Análise'})
            tabela_13 = tabela_13[(tabela_13['Liga'] == 'ENG1') | (tabela_13['Liga'] == 'ENG2') | (tabela_13['Liga'] == 'FRA1') | (tabela_13['Liga'] == 'FRA2') 
                                | (tabela_13['Liga'] == 'SPA1') | (tabela_13['Liga'] == 'ITA1') | (tabela_13['Liga'] == 'GER1') | (tabela_13['Liga'] == 'POR1') 
                                | (tabela_13['Liga'] == 'SWZ') | (tabela_13['Liga'] == 'RUS') | (tabela_13['Liga'] == 'UKR') | (tabela_13['Liga'] == 'BEL1') 
                                | (tabela_13['Liga'] == 'CHN') | (tabela_13['Liga'] == 'DEN') | (tabela_13['Liga'] == 'GRE') | (tabela_13['Liga'] == 'HOL') 
                                | (tabela_13['Liga'] == 'JAP') | (tabela_13['Liga'] == 'MEX') | (tabela_13['Liga'] == 'SAUD') | (tabela_13['Liga'] == 'TUR') 
                                | (tabela_13['Liga'] == 'UAE') | (tabela_13['Liga'] == 'USA') | (tabela_13['Liga'] == 'ITA2') | (tabela_13['Liga'] == 'GER2') 
                                | (tabela_13['Liga'] == 'POR2') | (tabela_13['Liga'] == 'BUL') | (tabela_13['Liga'] == 'AUT') | (tabela_13['Liga'] == 'QAT')
                                | (tabela_13['Liga'] == 'CRO') | (tabela_13['Liga'] == 'CZH') | (tabela_13['Liga'] == 'NOR') | (tabela_13['Liga'] == 'POL')
                                | (tabela_13['Liga'] == 'SCT') | (tabela_13['Liga'] == 'SER') | (tabela_13['Liga'] == 'SPA2')]
            tabela_13 = tabela_13.sort_values(by='Rating', ascending=False)
            tabela_13 = tabela_13.head(50)
            #st.dataframe(tabela_13, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_13).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()

        elif posição == "Segundo Volante":
            st.markdown("<h4 style='text-align: center;'><br>Nacionais Mais Bem Ranqueados<br><br>Segundos Volantes Box-to-Box</b></h4>", unsafe_allow_html=True)
            tabela_11 = pd.read_csv("12_Role_Segundo_Volante_Box_to_Box_Full.csv")
            tabela_11 = tabela_11[(tabela_11['Nacionalidade']==nacionalidade)&(tabela_11['Versão_Temporada']==temporada)]
            tabela_11 = tabela_11.iloc[:, np.r_[1, 31, 36, 3, 4, 7, 9:12, 15]]
            tabela_11 = tabela_11.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Posição_Wyscout':'Posição', 'Versão_Temporada':'Janela de Análise'})
            tabela_11 = tabela_11[(tabela_11['Liga'] == 'ENG1') | (tabela_11['Liga'] == 'ENG2') | (tabela_11['Liga'] == 'FRA1') | (tabela_11['Liga'] == 'FRA2') 
                                | (tabela_11['Liga'] == 'SPA1') | (tabela_11['Liga'] == 'ITA1') | (tabela_11['Liga'] == 'GER1') | (tabela_11['Liga'] == 'POR1') 
                                | (tabela_11['Liga'] == 'SWZ') | (tabela_11['Liga'] == 'RUS') | (tabela_11['Liga'] == 'UKR') | (tabela_11['Liga'] == 'BEL1') 
                                | (tabela_11['Liga'] == 'CHN') | (tabela_11['Liga'] == 'DEN') | (tabela_11['Liga'] == 'GRE') | (tabela_11['Liga'] == 'HOL') 
                                | (tabela_11['Liga'] == 'JAP') | (tabela_11['Liga'] == 'MEX') | (tabela_11['Liga'] == 'SAUD') | (tabela_11['Liga'] == 'TUR') 
                                | (tabela_11['Liga'] == 'UAE') | (tabela_11['Liga'] == 'USA') | (tabela_11['Liga'] == 'ITA2') | (tabela_11['Liga'] == 'GER2') 
                                | (tabela_11['Liga'] == 'POR2') | (tabela_11['Liga'] == 'BUL') | (tabela_11['Liga'] == 'AUT') | (tabela_11['Liga'] == 'QAT')
                                | (tabela_11['Liga'] == 'CRO') | (tabela_11['Liga'] == 'CZH') | (tabela_11['Liga'] == 'NOR') | (tabela_11['Liga'] == 'POL')
                                | (tabela_11['Liga'] == 'SCT') | (tabela_11['Liga'] == 'SER') | (tabela_11['Liga'] == 'SPA2')]
            tabela_11 = tabela_11.sort_values(by='Rating', ascending=False)
            tabela_11 = tabela_11.head(50)
            #st.dataframe(tabela_11, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}", "Idade": "{:.0f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_11).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()

            st.markdown("<h4 style='text-align: center;'><br>Nacionais Mais Bem Ranqueados<br><br>Segundos Volantes Organizadores</b></h4>", unsafe_allow_html=True)
            tabela_12 = pd.read_csv("13_Role_Segundo_Volante_Organizador_Full.csv")
            tabela_12 = tabela_12[(tabela_12['Nacionalidade']==nacionalidade)&(tabela_12['Versão_Temporada']==temporada)]
            tabela_12 = tabela_12.iloc[:, np.r_[1, 28, 33, 3, 4, 7, 9:12, 15]]
            tabela_12 = tabela_12.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Posição_Wyscout':'Posição', 'Versão_Temporada':'Janela de Análise'})
            tabela_12 = tabela_12[(tabela_12['Liga'] == 'ENG1') | (tabela_12['Liga'] == 'ENG2') | (tabela_12['Liga'] == 'FRA1') | (tabela_12['Liga'] == 'FRA2') 
                                | (tabela_12['Liga'] == 'SPA1') | (tabela_12['Liga'] == 'ITA1') | (tabela_12['Liga'] == 'GER1') | (tabela_12['Liga'] == 'POR1') 
                                | (tabela_12['Liga'] == 'SWZ') | (tabela_12['Liga'] == 'RUS') | (tabela_12['Liga'] == 'UKR') | (tabela_12['Liga'] == 'BEL1') 
                                | (tabela_12['Liga'] == 'CHN') | (tabela_12['Liga'] == 'DEN') | (tabela_12['Liga'] == 'GRE') | (tabela_12['Liga'] == 'HOL') 
                                | (tabela_12['Liga'] == 'JAP') | (tabela_12['Liga'] == 'MEX') | (tabela_12['Liga'] == 'SAUD') | (tabela_12['Liga'] == 'TUR') 
                                | (tabela_12['Liga'] == 'UAE') | (tabela_12['Liga'] == 'USA') | (tabela_12['Liga'] == 'ITA2') | (tabela_12['Liga'] == 'GER2') 
                                | (tabela_12['Liga'] == 'POR2') | (tabela_12['Liga'] == 'BUL') | (tabela_12['Liga'] == 'AUT') | (tabela_12['Liga'] == 'QAT')
                                | (tabela_12['Liga'] == 'CRO') | (tabela_12['Liga'] == 'CZH') | (tabela_12['Liga'] == 'NOR') | (tabela_12['Liga'] == 'POL')
                                | (tabela_12['Liga'] == 'SCT') | (tabela_12['Liga'] == 'SER') | (tabela_12['Liga'] == 'SPA2')]
            tabela_12 = tabela_12.sort_values(by='Rating', ascending=False)
            tabela_12 = tabela_12.head(50)
            #st.dataframe(tabela_12, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}", "Idade": "{:.0f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_12).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()


            st.markdown("<h4 style='text-align: center;'><br>Nacionais Mais Bem Ranqueados<br><br>Segundos Volantes Equilibrados</b></h4>", unsafe_allow_html=True)
            tabela_13 = pd.read_csv("14_Role_Segundo_Volante_Equilibrado_Full.csv")
            tabela_13 = tabela_13[(tabela_13['Nacionalidade']==nacionalidade)&(tabela_13['Versão_Temporada']==temporada)]
            tabela_13 = tabela_13.iloc[:, np.r_[1, 31, 36, 3, 4, 7, 9:12, 15]]
            tabela_13 = tabela_13.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Posição_Wyscout':'Posição', 'Versão_Temporada':'Janela de Análise'})
            tabela_13 = tabela_13[(tabela_13['Liga'] == 'ENG1') | (tabela_13['Liga'] == 'ENG2') | (tabela_13['Liga'] == 'FRA1') | (tabela_13['Liga'] == 'FRA2') 
                                | (tabela_13['Liga'] == 'SPA1') | (tabela_13['Liga'] == 'ITA1') | (tabela_13['Liga'] == 'GER1') | (tabela_13['Liga'] == 'POR1') 
                                | (tabela_13['Liga'] == 'SWZ') | (tabela_13['Liga'] == 'RUS') | (tabela_13['Liga'] == 'UKR') | (tabela_13['Liga'] == 'BEL1') 
                                | (tabela_13['Liga'] == 'CHN') | (tabela_13['Liga'] == 'DEN') | (tabela_13['Liga'] == 'GRE') | (tabela_13['Liga'] == 'HOL') 
                                | (tabela_13['Liga'] == 'JAP') | (tabela_13['Liga'] == 'MEX') | (tabela_13['Liga'] == 'SAUD') | (tabela_13['Liga'] == 'TUR') 
                                | (tabela_13['Liga'] == 'UAE') | (tabela_13['Liga'] == 'USA') | (tabela_13['Liga'] == 'ITA2') | (tabela_13['Liga'] == 'GER2') 
                                | (tabela_13['Liga'] == 'POR2') | (tabela_13['Liga'] == 'BUL') | (tabela_13['Liga'] == 'AUT') | (tabela_13['Liga'] == 'QAT')
                                | (tabela_13['Liga'] == 'CRO') | (tabela_13['Liga'] == 'CZH') | (tabela_13['Liga'] == 'NOR') | (tabela_13['Liga'] == 'POL')
                                | (tabela_13['Liga'] == 'SCT') | (tabela_13['Liga'] == 'SER') | (tabela_13['Liga'] == 'SPA2')]
            tabela_13 = tabela_13.sort_values(by='Rating', ascending=False)
            tabela_13 = tabela_13.head(50)
            #st.dataframe(tabela_13, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}", "Idade": "{:.0f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_13).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()


        elif posição == "Meia":
            st.markdown("<h4 style='text-align: center;'><br>Nacionais Mais Bem Ranqueados<br><br>Meias Organizadores </b></h4>", unsafe_allow_html=True)
            tabela_14 = pd.read_csv("15_Role_Meia_Organizador_Full.csv")
            tabela_14 = tabela_14[(tabela_14['Nacionalidade']==nacionalidade)&(tabela_14['Versão_Temporada']==temporada)]
            tabela_14 = tabela_14.iloc[:, np.r_[1, 28, 33, 3, 4, 7, 9:12, 15]]
            tabela_14 = tabela_14.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Posição_Wyscout':'Posição', 'Versão_Temporada':'Janela de Análise'})
            tabela_14 = tabela_14[(tabela_14['Liga'] == 'ENG1') | (tabela_14['Liga'] == 'ENG2') | (tabela_14['Liga'] == 'FRA1') | (tabela_14['Liga'] == 'FRA2') 
                                | (tabela_14['Liga'] == 'SPA1') | (tabela_14['Liga'] == 'ITA1') | (tabela_14['Liga'] == 'GER1') | (tabela_14['Liga'] == 'POR1') 
                                | (tabela_14['Liga'] == 'SWZ') | (tabela_14['Liga'] == 'RUS') | (tabela_14['Liga'] == 'UKR') | (tabela_14['Liga'] == 'BEL1') 
                                | (tabela_14['Liga'] == 'CHN') | (tabela_14['Liga'] == 'DEN') | (tabela_14['Liga'] == 'GRE') | (tabela_14['Liga'] == 'HOL') 
                                | (tabela_14['Liga'] == 'JAP') | (tabela_14['Liga'] == 'MEX') | (tabela_14['Liga'] == 'SAUD') | (tabela_14['Liga'] == 'TUR') 
                                | (tabela_14['Liga'] == 'UAE') | (tabela_14['Liga'] == 'USA') | (tabela_14['Liga'] == 'ITA2') | (tabela_14['Liga'] == 'GER2') 
                                | (tabela_14['Liga'] == 'POR2') | (tabela_14['Liga'] == 'BUL') | (tabela_14['Liga'] == 'AUT') | (tabela_14['Liga'] == 'QAT')
                                | (tabela_14['Liga'] == 'CRO') | (tabela_14['Liga'] == 'CZH') | (tabela_14['Liga'] == 'NOR') | (tabela_14['Liga'] == 'POL')
                                | (tabela_14['Liga'] == 'SCT') | (tabela_14['Liga'] == 'SER') | (tabela_14['Liga'] == 'SPA2')]
            tabela_14 = tabela_14.sort_values(by='Rating', ascending=False)
            tabela_14 = tabela_14.head(50)
            #st.dataframe(tabela_14, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_14).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()


            st.markdown("<h4 style='text-align: center;'><br>Nacionais Mais Bem Ranqueados<br><br>Meias Atacantes</b></h4>", unsafe_allow_html=True)
            tabela_15 = pd.read_csv("16_Role_Meia_Atacante_Full.csv")
            tabela_15 = tabela_15[(tabela_15['Nacionalidade']==nacionalidade)&(tabela_15['Versão_Temporada']==temporada)]
            tabela_15 = tabela_15.iloc[:, np.r_[1, 35, 40, 3, 4, 7, 9:12, 15]]
            tabela_15 = tabela_15.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Posição_Wyscout':'Posição', 'Versão_Temporada':'Janela de Análise'})
            tabela_15 = tabela_15[(tabela_15['Liga'] == 'ENG1') | (tabela_15['Liga'] == 'ENG2') | (tabela_15['Liga'] == 'FRA1') | (tabela_15['Liga'] == 'FRA2') 
                                | (tabela_15['Liga'] == 'SPA1') | (tabela_15['Liga'] == 'ITA1') | (tabela_15['Liga'] == 'GER1') | (tabela_15['Liga'] == 'POR1') 
                                | (tabela_15['Liga'] == 'SWZ') | (tabela_15['Liga'] == 'RUS') | (tabela_15['Liga'] == 'UKR') | (tabela_15['Liga'] == 'BEL1') 
                                | (tabela_15['Liga'] == 'CHN') | (tabela_15['Liga'] == 'DEN') | (tabela_15['Liga'] == 'GRE') | (tabela_15['Liga'] == 'HOL') 
                                | (tabela_15['Liga'] == 'JAP') | (tabela_15['Liga'] == 'MEX') | (tabela_15['Liga'] == 'SAUD') | (tabela_15['Liga'] == 'TUR') 
                                | (tabela_15['Liga'] == 'UAE') | (tabela_15['Liga'] == 'USA') | (tabela_15['Liga'] == 'ITA2') | (tabela_15['Liga'] == 'GER2') 
                                | (tabela_15['Liga'] == 'POR2') | (tabela_15['Liga'] == 'BUL') | (tabela_15['Liga'] == 'AUT') | (tabela_15['Liga'] == 'QAT')
                                | (tabela_15['Liga'] == 'CRO') | (tabela_15['Liga'] == 'CZH') | (tabela_15['Liga'] == 'NOR') | (tabela_15['Liga'] == 'POL')
                                | (tabela_15['Liga'] == 'SCT') | (tabela_15['Liga'] == 'SER') | (tabela_15['Liga'] == 'SPA2')]
            tabela_15 = tabela_15.sort_values(by='Rating', ascending=False)
            tabela_15 = tabela_15.head(50)
            #st.dataframe(tabela_15, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_15).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()

        elif posição == "Extremo":
            st.markdown("<h4 style='text-align: center;'><br>Nacionais Mais Bem Ranqueados<br><br>Extremos Organizadores</b></h4>", unsafe_allow_html=True)
            tabela_16 = pd.read_csv("17_Role_Extremo_Organizador_Full.csv")
            tabela_16 = tabela_16[(tabela_16['Nacionalidade']==nacionalidade)&(tabela_16['Versão_Temporada']==temporada)]
            tabela_16 = tabela_16.iloc[:, np.r_[1, 31, 36, 3, 4, 7, 9:12, 15]]
            tabela_16 = tabela_16.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Posição_Wyscout':'Posição', 'Versão_Temporada':'Janela de Análise'})
            tabela_16 = tabela_16[(tabela_16['Liga'] == 'ENG1') | (tabela_16['Liga'] == 'ENG2') | (tabela_16['Liga'] == 'FRA1') | (tabela_16['Liga'] == 'FRA2') 
                                | (tabela_16['Liga'] == 'SPA1') | (tabela_16['Liga'] == 'ITA1') | (tabela_16['Liga'] == 'GER1') | (tabela_16['Liga'] == 'POR1') 
                                | (tabela_16['Liga'] == 'SWZ') | (tabela_16['Liga'] == 'RUS') | (tabela_16['Liga'] == 'UKR') | (tabela_16['Liga'] == 'BEL1') 
                                | (tabela_16['Liga'] == 'CHN') | (tabela_16['Liga'] == 'DEN') | (tabela_16['Liga'] == 'GRE') | (tabela_16['Liga'] == 'HOL') 
                                | (tabela_16['Liga'] == 'JAP') | (tabela_16['Liga'] == 'MEX') | (tabela_16['Liga'] == 'SAUD') | (tabela_16['Liga'] == 'TUR') 
                                | (tabela_16['Liga'] == 'UAE') | (tabela_16['Liga'] == 'USA') | (tabela_16['Liga'] == 'ITA2') | (tabela_16['Liga'] == 'GER2') 
                                | (tabela_16['Liga'] == 'POR2') | (tabela_16['Liga'] == 'BUL') | (tabela_16['Liga'] == 'AUT') | (tabela_16['Liga'] == 'QAT')
                                | (tabela_16['Liga'] == 'CRO') | (tabela_16['Liga'] == 'CZH') | (tabela_16['Liga'] == 'NOR') | (tabela_16['Liga'] == 'POL')
                                | (tabela_16['Liga'] == 'SCT') | (tabela_16['Liga'] == 'SER') | (tabela_16['Liga'] == 'SPA2')]
            tabela_16 = tabela_16.sort_values(by='Rating', ascending=False)
            tabela_16 = tabela_16.head(50)
            #st.dataframe(tabela_16, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_16).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()

            st.markdown("<h4 style='text-align: center;'><br>Nacionais Mais Bem Ranqueados<br><br>Extremos Táticos</b></h4>", unsafe_allow_html=True)
            tabela_17 = pd.read_csv("18_Role_Extremo_Tático_Full.csv")
            tabela_17 = tabela_17[(tabela_17['Nacionalidade']==nacionalidade)&(tabela_17['Versão_Temporada']==temporada)]
            tabela_17 = tabela_17.iloc[:, np.r_[1, 25, 30, 3, 4, 7, 9:12, 15]]
            tabela_17 = tabela_17.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Posição_Wyscout':'Posição', 'Versão_Temporada':'Janela de Análise'})
            tabela_17 = tabela_17[(tabela_17['Liga'] == 'ENG1') | (tabela_17['Liga'] == 'ENG2') | (tabela_17['Liga'] == 'FRA1') | (tabela_17['Liga'] == 'FRA2') 
                                | (tabela_17['Liga'] == 'SPA1') | (tabela_17['Liga'] == 'ITA1') | (tabela_17['Liga'] == 'GER1') | (tabela_17['Liga'] == 'POR1') 
                                | (tabela_17['Liga'] == 'SWZ') | (tabela_17['Liga'] == 'RUS') | (tabela_17['Liga'] == 'UKR') | (tabela_17['Liga'] == 'BEL1') 
                                | (tabela_17['Liga'] == 'CHN') | (tabela_17['Liga'] == 'DEN') | (tabela_17['Liga'] == 'GRE') | (tabela_17['Liga'] == 'HOL') 
                                | (tabela_17['Liga'] == 'JAP') | (tabela_17['Liga'] == 'MEX') | (tabela_17['Liga'] == 'SAUD') | (tabela_17['Liga'] == 'TUR') 
                                | (tabela_17['Liga'] == 'UAE') | (tabela_17['Liga'] == 'USA') | (tabela_17['Liga'] == 'ITA2') | (tabela_17['Liga'] == 'GER2') 
                                | (tabela_17['Liga'] == 'POR2') | (tabela_17['Liga'] == 'BUL') | (tabela_17['Liga'] == 'AUT') | (tabela_17['Liga'] == 'QAT')
                                | (tabela_17['Liga'] == 'CRO') | (tabela_17['Liga'] == 'CZH') | (tabela_17['Liga'] == 'NOR') | (tabela_17['Liga'] == 'POL')
                                | (tabela_17['Liga'] == 'SCT') | (tabela_17['Liga'] == 'SER') | (tabela_17['Liga'] == 'SPA2')]
            tabela_17 = tabela_17.sort_values(by='Rating', ascending=False)
            tabela_17 = tabela_17.head(50)
            #st.dataframe(tabela_17, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_17).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()

            st.markdown("<h4 style='text-align: center;'><br>Nacionais Mais Bem Ranqueados<br><br>Extremos Agudos</b></h4>", unsafe_allow_html=True)
            tabela_18 = pd.read_csv("19_Role_Extremo_Agudo_Full.csv")
            tabela_18 = tabela_18[(tabela_18['Nacionalidade']==nacionalidade)&(tabela_18['Versão_Temporada']==temporada)]
            tabela_18 = tabela_18.iloc[:, np.r_[1, 31, 36, 3, 4, 7, 9:12, 15]]
            tabela_18 = tabela_18.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Posição_Wyscout':'Posição', 'Versão_Temporada':'Janela de Análise'})
            tabela_18 = tabela_18[(tabela_18['Liga'] == 'ENG1') | (tabela_18['Liga'] == 'ENG2') | (tabela_18['Liga'] == 'FRA1') | (tabela_18['Liga'] == 'FRA2') 
                                | (tabela_18['Liga'] == 'SPA1') | (tabela_18['Liga'] == 'ITA1') | (tabela_18['Liga'] == 'GER1') | (tabela_18['Liga'] == 'POR1') 
                                | (tabela_18['Liga'] == 'SWZ') | (tabela_18['Liga'] == 'RUS') | (tabela_18['Liga'] == 'UKR') | (tabela_18['Liga'] == 'BEL1') 
                                | (tabela_18['Liga'] == 'CHN') | (tabela_18['Liga'] == 'DEN') | (tabela_18['Liga'] == 'GRE') | (tabela_18['Liga'] == 'HOL') 
                                | (tabela_18['Liga'] == 'JAP') | (tabela_18['Liga'] == 'MEX') | (tabela_18['Liga'] == 'SAUD') | (tabela_18['Liga'] == 'TUR') 
                                | (tabela_18['Liga'] == 'UAE') | (tabela_18['Liga'] == 'USA') | (tabela_18['Liga'] == 'ITA2') | (tabela_18['Liga'] == 'GER2') 
                                | (tabela_18['Liga'] == 'POR2') | (tabela_18['Liga'] == 'BUL') | (tabela_18['Liga'] == 'AUT') | (tabela_18['Liga'] == 'QAT')
                                | (tabela_18['Liga'] == 'CRO') | (tabela_18['Liga'] == 'CZH') | (tabela_18['Liga'] == 'NOR') | (tabela_18['Liga'] == 'POL')
                                | (tabela_18['Liga'] == 'SCT') | (tabela_18['Liga'] == 'SER') | (tabela_18['Liga'] == 'SPA2')]
            tabela_18 = tabela_18.sort_values(by='Rating', ascending=False)
            tabela_18 = tabela_18.head(50)
            #st.dataframe(tabela_18, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_18).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()

        elif posição == "Atacante":
            st.markdown("<h4 style='text-align: center;'><br>Nacionais Mais Bem Ranqueados<br><br>Atacantes Referência</b></h4>", unsafe_allow_html=True)
            tabela_19 = pd.read_csv("20_Role_Atacante_Referência_Full.csv")
            tabela_19 = tabela_19[(tabela_19['Nacionalidade']==nacionalidade)&(tabela_19['Versão_Temporada']==temporada)]
            tabela_19 = tabela_19.iloc[:, np.r_[1, 28, 33, 3, 4, 7, 9:12, 15]]
            tabela_19 = tabela_19.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Posição_Wyscout':'Posição', 'Versão_Temporada':'Janela de Análise'})
            tabela_19 = tabela_19[(tabela_19['Liga'] == 'ENG1') | (tabela_19['Liga'] == 'ENG2') | (tabela_19['Liga'] == 'FRA1') | (tabela_19['Liga'] == 'FRA2') 
                                | (tabela_19['Liga'] == 'SPA1') | (tabela_19['Liga'] == 'ITA1') | (tabela_19['Liga'] == 'GER1') | (tabela_19['Liga'] == 'POR1') 
                                | (tabela_19['Liga'] == 'SWZ') | (tabela_19['Liga'] == 'RUS') | (tabela_19['Liga'] == 'UKR') | (tabela_19['Liga'] == 'BEL1') 
                                | (tabela_19['Liga'] == 'CHN') | (tabela_19['Liga'] == 'DEN') | (tabela_19['Liga'] == 'GRE') | (tabela_19['Liga'] == 'HOL') 
                                | (tabela_19['Liga'] == 'JAP') | (tabela_19['Liga'] == 'MEX') | (tabela_19['Liga'] == 'SAUD') | (tabela_19['Liga'] == 'TUR') 
                                | (tabela_19['Liga'] == 'UAE') | (tabela_19['Liga'] == 'USA') | (tabela_19['Liga'] == 'ITA2') | (tabela_19['Liga'] == 'GER2') 
                                | (tabela_19['Liga'] == 'POR2') | (tabela_19['Liga'] == 'BUL') | (tabela_19['Liga'] == 'AUT') | (tabela_19['Liga'] == 'QAT')
                                | (tabela_19['Liga'] == 'CRO') | (tabela_19['Liga'] == 'CZH') | (tabela_19['Liga'] == 'NOR') | (tabela_19['Liga'] == 'POL')
                                | (tabela_19['Liga'] == 'SCT') | (tabela_19['Liga'] == 'SER') | (tabela_19['Liga'] == 'SPA2')]
            tabela_19 = tabela_19.sort_values(by='Rating', ascending=False)
            tabela_19 = tabela_19.head(50)
            #st.dataframe(tabela_19, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_19).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()


            st.markdown("<h4 style='text-align: center;'><br>Nacionais Mais Bem Ranqueados<br><br>Atacantes Móveis</b></h4>", unsafe_allow_html=True)
            tabela_20 = pd.read_csv("21_Role_Atacante_Móvel_Full.csv")
            tabela_20 = tabela_20[(tabela_20['Nacionalidade']==nacionalidade)&(tabela_20['Versão_Temporada']==temporada)]
            tabela_20 = tabela_20.iloc[:, np.r_[1, 27, 32, 3, 4, 7, 9:12, 15]]
            tabela_20 = tabela_20.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Posição_Wyscout':'Posição', 'Versão_Temporada':'Janela de Análise'})
            tabela_20 = tabela_20[(tabela_20['Liga'] == 'ENG1') | (tabela_20['Liga'] == 'ENG2') | (tabela_20['Liga'] == 'FRA1') | (tabela_20['Liga'] == 'FRA2') 
                                | (tabela_20['Liga'] == 'SPA1') | (tabela_20['Liga'] == 'ITA1') | (tabela_20['Liga'] == 'GER1') | (tabela_20['Liga'] == 'POR1') 
                                | (tabela_20['Liga'] == 'SWZ') | (tabela_20['Liga'] == 'RUS') | (tabela_20['Liga'] == 'UKR') | (tabela_20['Liga'] == 'BEL1') 
                                | (tabela_20['Liga'] == 'CHN') | (tabela_20['Liga'] == 'DEN') | (tabela_20['Liga'] == 'GRE') | (tabela_20['Liga'] == 'HOL') 
                                | (tabela_20['Liga'] == 'JAP') | (tabela_20['Liga'] == 'MEX') | (tabela_20['Liga'] == 'SAUD') | (tabela_20['Liga'] == 'TUR') 
                                | (tabela_20['Liga'] == 'UAE') | (tabela_20['Liga'] == 'USA') | (tabela_20['Liga'] == 'ITA2') | (tabela_20['Liga'] == 'GER2') 
                                | (tabela_20['Liga'] == 'POR2') | (tabela_20['Liga'] == 'BUL') | (tabela_20['Liga'] == 'AUT') | (tabela_20['Liga'] == 'QAT')
                                | (tabela_20['Liga'] == 'CRO') | (tabela_20['Liga'] == 'CZH') | (tabela_20['Liga'] == 'NOR') | (tabela_20['Liga'] == 'POL')
                                | (tabela_20['Liga'] == 'SCT') | (tabela_20['Liga'] == 'SER') | (tabela_20['Liga'] == 'SPA2')]
            tabela_20 = tabela_20.sort_values(by='Rating', ascending=False)
            tabela_20 = tabela_20.head(50)
            #st.dataframe(tabela_20, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_20).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()


            st.markdown("<h4 style='text-align: center;'><br>Nacionais Mais Bem Ranqueados<br><br>Segundos Atacantes</b></h4>", unsafe_allow_html=True)
            tabela_21 = pd.read_csv("22_Role_Segundo_Atacante_Full.csv")
            tabela_21 = tabela_21[(tabela_21['Nacionalidade']==nacionalidade)&(tabela_21['Versão_Temporada']==temporada)]
            tabela_21 = tabela_21.iloc[:, np.r_[1, 31, 36, 3, 4, 7, 9:12, 15]]
            tabela_21 = tabela_21.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Posição_Wyscout':'Posição', 'Versão_Temporada':'Janela de Análise'})
            tabela_21 = tabela_21[(tabela_21['Liga'] == 'ENG1') | (tabela_21['Liga'] == 'ENG2') | (tabela_21['Liga'] == 'FRA1') | (tabela_21['Liga'] == 'FRA2') 
                                | (tabela_21['Liga'] == 'SPA1') | (tabela_21['Liga'] == 'ITA1') | (tabela_21['Liga'] == 'GER1') | (tabela_21['Liga'] == 'POR1') 
                                | (tabela_21['Liga'] == 'SWZ') | (tabela_21['Liga'] == 'RUS') | (tabela_21['Liga'] == 'UKR') | (tabela_21['Liga'] == 'BEL1') 
                                | (tabela_21['Liga'] == 'CHN') | (tabela_21['Liga'] == 'DEN') | (tabela_21['Liga'] == 'GRE') | (tabela_21['Liga'] == 'HOL') 
                                | (tabela_21['Liga'] == 'JAP') | (tabela_21['Liga'] == 'MEX') | (tabela_21['Liga'] == 'SAUD') | (tabela_21['Liga'] == 'TUR') 
                                | (tabela_21['Liga'] == 'UAE') | (tabela_21['Liga'] == 'USA') | (tabela_21['Liga'] == 'ITA2') | (tabela_21['Liga'] == 'GER2') 
                                | (tabela_21['Liga'] == 'POR2') | (tabela_21['Liga'] == 'BUL') | (tabela_21['Liga'] == 'AUT') | (tabela_21['Liga'] == 'QAT')
                                | (tabela_21['Liga'] == 'CRO') | (tabela_21['Liga'] == 'CZH') | (tabela_21['Liga'] == 'NOR') | (tabela_21['Liga'] == 'POL')
                                | (tabela_21['Liga'] == 'SCT') | (tabela_21['Liga'] == 'SER') | (tabela_21['Liga'] == 'SPA2')]
            tabela_21 = tabela_21.sort_values(by='Rating', ascending=False)
            tabela_21 = tabela_21.head(50)
            #st.dataframe(tabela_21, use_container_width=True, hide_index=True)

            # Styling DataFrame using Pandas
            def style_table(df):
                df = df.reset_index(drop=True)
                # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                formatter = {"Rating": "{:.3f}"}  # Format the 'Rating' column to 3 decimal places
                return df.style.format(formatter).set_table_styles(
                    [{
                        'selector': 'thead th',
                        'props': [('font-weight', 'bold'),
                                ('border-style', 'solid'),
                                ('border-width', '0px 0px 2px 0px'),
                                ('border-color', 'black')]
                    }, {
                        'selector': 'thead th:not(:first-child)',
                        'props': [('text-align', 'center')]  # Centering all headers except the first
                    }, {
                        'selector': 'thead th:last-child',
                        'props': [('color', 'black')]  # Make last column header black
                    }, {
                        'selector': 'td',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'center')]
                    }, {
                        'selector': 'th',
                        'props': [('border-style', 'solid'),
                                ('border-width', '0px 0px 1px 0px'),
                                ('border-color', 'black'),
                                ('text-align', 'left')]
                    }]
                ).set_properties(**{'padding': '2px',
                                    'font-size': '15px'})

            # Displaying in Streamlit
            def main():
                #st.title("Your DataFrame")

                # Convert the styled DataFrame to HTML without the index and display it
                styled_html = style_table(tabela_21).to_html(escape=False, index=False, hide_index=True)
                st.markdown(styled_html, unsafe_allow_html=True)

            if __name__ == '__main__':
                main()


###############################################################################################################################
###############################################################################################################################
###############################################################################################################################
###############################################################################################################################

if choose == "Free Agents pelo Mundo":
    st.markdown("<h2 style='text-align: center;'>Free Agents pelo Mundo</h2>", unsafe_allow_html=True)
    nacionalidades = df8["Nacionalidade"]
    posições = df6["Posição"]
    contratos = ["2024-06-30", "2024-07-31", "2024-08-31", "2024-09-30", "2024-10-31", "2024-11-30", "2024-12-31"]
    temporada = 2024
    mundo_options = ['BRA1', 'ARG1', 'ENG1', 'ENG2', 'FRA1', 'FRA2', 'SPA1', 'SPA2', 'ITA1', 'ITA2', 'GER1', 'POR1', 'POR2', 'SWZ', 'CZH', 'CRO', 'SER', 'RUS', 'UKR', 'BEL1', 'BEL2', 'CHN',
             'DEN', 'GRE', 'HOL', 'JAP', 'MEX', 'SAUD', 'SCT', 'TUR', 'UAE', 'USA', 'BUL', 'AUT', 'QAT']
    nacionalidade = st.selectbox("Escolha a Nacionalidade do Atleta", options=nacionalidades)
    posição = st.selectbox("Escolha a Posição do Atleta", options=posições)
    #função = st.selectbox("Escolha a Posição", options=funções)
    contrato = st.selectbox("Escolha a Data de Fim de Contrato", options=contratos)

    if posição == ("Goleiro"):
        st.markdown("<h4 style='text-align: center;'>Free Agents Nacionais Mais Bem Ranqueados<br>Goleiros</b></h4>", unsafe_allow_html=True)
        tabela_7 = pd.read_csv("1_Role_Goleiro_Full.csv")
        tabela_7 = tabela_7.loc[(tabela_7['Nacionalidade']==nacionalidade)&(tabela_7['Fim_Contrato']<=contrato)&(tabela_7['Versão_Temporada']==temporada)]   
        tabela_7 = tabela_7.iloc[:, np.r_[1, 3, 7, 15, 9:12, 25]]
        tabela_7 = tabela_7[(tabela_7['Liga'] == 'ENG1') | (tabela_7['Liga'] == 'ENG2') | (tabela_7['Liga'] == 'FRA1') | (tabela_7['Liga'] == 'FRA2') 
            | (tabela_7['Liga'] == 'SPA1') | (tabela_7['Liga'] == 'ITA1') | (tabela_7['Liga'] == 'GER1') | (tabela_7['Liga'] == 'POR1') 
            | (tabela_7['Liga'] == 'SWZ') | (tabela_7['Liga'] == 'RUS') | (tabela_7['Liga'] == 'UKR') | (tabela_7['Liga'] == 'BEL1') 
            | (tabela_7['Liga'] == 'CHN') | (tabela_7['Liga'] == 'DEN') | (tabela_7['Liga'] == 'GRE') | (tabela_7['Liga'] == 'HOL') 
            | (tabela_7['Liga'] == 'JAP') | (tabela_7['Liga'] == 'MEX') | (tabela_7['Liga'] == 'SAUD') | (tabela_7['Liga'] == 'TUR') 
            | (tabela_7['Liga'] == 'UAE') | (tabela_7['Liga'] == 'USA') | (tabela_7['Liga'] == 'ITA2') | (tabela_7['Liga'] == 'GER2') 
            | (tabela_7['Liga'] == 'POR2') | (tabela_7['Liga'] == 'BUL') | (tabela_7['Liga'] == 'AUT') | (tabela_7['Liga'] == 'QAT')
            | (tabela_7['Liga'] == 'BRA1') | (tabela_7['Liga'] == 'ARG1')]

        tabela_8 = pd.read_csv("PlayerAnalysis_Role_1_Full.csv")
        tabela_8 = tabela_8.loc[(tabela_8['Nacionalidade']==nacionalidade)&(tabela_8['Fim_Contrato']<=contrato)&(tabela_8['Versão_Temporada']==temporada)]
        tabela_8 = tabela_8.iloc[:, np.r_[9, 30:34, 26, 28]]
        tabela_8 = tabela_8[(tabela_8['Liga'] == 'ENG1') | (tabela_8['Liga'] == 'ENG2') | (tabela_8['Liga'] == 'FRA1') | (tabela_8['Liga'] == 'FRA2') 
            | (tabela_8['Liga'] == 'SPA1') | (tabela_8['Liga'] == 'ITA1') | (tabela_8['Liga'] == 'GER1') | (tabela_8['Liga'] == 'POR1') 
            | (tabela_8['Liga'] == 'SWZ') | (tabela_8['Liga'] == 'RUS') | (tabela_8['Liga'] == 'UKR') | (tabela_8['Liga'] == 'BEL1') 
            | (tabela_8['Liga'] == 'CHN') | (tabela_8['Liga'] == 'DEN') | (tabela_8['Liga'] == 'GRE') | (tabela_8['Liga'] == 'HOL') 
            | (tabela_8['Liga'] == 'JAP') | (tabela_8['Liga'] == 'MEX') | (tabela_8['Liga'] == 'SAUD') | (tabela_8['Liga'] == 'TUR') 
            | (tabela_8['Liga'] == 'UAE') | (tabela_8['Liga'] == 'USA') | (tabela_8['Liga'] == 'ITA2') | (tabela_8['Liga'] == 'GER2') 
            | (tabela_8['Liga'] == 'POR2') | (tabela_8['Liga'] == 'BUL') | (tabela_8['Liga'] == 'AUT') | (tabela_8['Liga'] == 'QAT') 
            | (tabela_8['Liga'] == 'BRA1') | (tabela_8['Liga'] == 'ARG1')]

        tabela_7 = pd.merge(tabela_7, tabela_8[['Atleta', 'L_Rating', 'L_Ranking', 'L_Percentil', 'Size']], on="Atleta", how="left")
        tabela_7 = tabela_7.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Versão_Temporada':'Janela de Análise', 
                                            'L_Rating':'Rating', 'L_Ranking':'Ranking', 'L_Percentil':'Percentil', 'Size':'Qtde Atletas',
                                            'Valor_Mercado':'Valor'})
        tabela_7 = tabela_7.sort_values(by='Rating', ascending=False)
        st.markdown("<h4 style='text-align: center;'><b>Goleiros Clássicos </b></h4>", unsafe_allow_html=True)
        #st.dataframe(tabela_7, use_container_width=True, hide_index=True)

        # Styling DataFrame using Pandas
        def style_table(df):
            df = df.reset_index(drop=True)
            # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
            formatter = {"Rating": "{:.3f}"}  # Format the 'Rating' column to 3 decimal places
            return df.style.format(formatter).set_table_styles(
                [{
                    'selector': 'thead th',
                    'props': [('font-weight', 'bold'),
                            ('border-style', 'solid'),
                            ('border-width', '0px 0px 2px 0px'),
                            ('border-color', 'black')]
                }, {
                    'selector': 'thead th:not(:first-child)',
                    'props': [('text-align', 'center')]  # Centering all headers except the first
                }, {
                    'selector': 'thead th:last-child',
                    'props': [('color', 'black')]  # Make last column header black
                }, {
                    'selector': 'td',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'center')]
                }, {
                    'selector': 'th',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'left')]
                }]
            ).set_properties(**{'padding': '2px',
                                'font-size': '15px'})

        # Displaying in Streamlit
        def main():
            #st.title("Your DataFrame")

            # Convert the styled DataFrame to HTML without the index and display it
            styled_html = style_table(tabela_7).to_html(escape=False, index=False, hide_index=True)
            st.markdown(styled_html, unsafe_allow_html=True)

        if __name__ == '__main__':
            main()

        tabela_8 = pd.read_csv("2_Role_Goleiro_Líbero_Full.csv")
        tabela_8 = tabela_8.loc[(tabela_8['Nacionalidade']==nacionalidade)&(tabela_8['Fim_Contrato']<=contrato)&(tabela_8['Versão_Temporada']==temporada)]   
        tabela_8 = tabela_8.iloc[:, np.r_[1, 3, 7, 15, 9:12, 28]]
        tabela_8 = tabela_8[(tabela_8['Liga'] == 'ENG1') | (tabela_8['Liga'] == 'ENG2') | (tabela_8['Liga'] == 'FRA1') | (tabela_8['Liga'] == 'FRA2') 
            | (tabela_8['Liga'] == 'SPA1') | (tabela_8['Liga'] == 'ITA1') | (tabela_8['Liga'] == 'GER1') | (tabela_8['Liga'] == 'POR1') 
            | (tabela_8['Liga'] == 'SWZ') | (tabela_8['Liga'] == 'RUS') | (tabela_8['Liga'] == 'UKR') | (tabela_8['Liga'] == 'BEL1') 
            | (tabela_8['Liga'] == 'CHN') | (tabela_8['Liga'] == 'DEN') | (tabela_8['Liga'] == 'GRE') | (tabela_8['Liga'] == 'HOL') 
            | (tabela_8['Liga'] == 'JAP') | (tabela_8['Liga'] == 'MEX') | (tabela_8['Liga'] == 'SAUD') | (tabela_8['Liga'] == 'TUR') 
            | (tabela_8['Liga'] == 'UAE') | (tabela_8['Liga'] == 'USA') | (tabela_8['Liga'] == 'ITA2') | (tabela_8['Liga'] == 'GER2') 
            | (tabela_8['Liga'] == 'POR2') | (tabela_8['Liga'] == 'BUL') | (tabela_8['Liga'] == 'AUT') | (tabela_8['Liga'] == 'QAT')
            | (tabela_8['Liga'] == 'BRA1') | (tabela_8['Liga'] == 'ARG1')]

        tabela_9 = pd.read_csv("PlayerAnalysis_Role_2_Full.csv")
        tabela_9 = tabela_9.loc[(tabela_9['Nacionalidade']==nacionalidade)&(tabela_9['Fim_Contrato']<=contrato)&(tabela_9['Versão_Temporada']==temporada)]
        tabela_9 = tabela_9.iloc[:, np.r_[12, 33:37, 29, 31]]
        tabela_9 = tabela_9[(tabela_9['Liga'] == 'ENG1') | (tabela_9['Liga'] == 'ENG2') | (tabela_9['Liga'] == 'FRA1') | (tabela_9['Liga'] == 'FRA2') 
            | (tabela_9['Liga'] == 'SPA1') | (tabela_9['Liga'] == 'ITA1') | (tabela_9['Liga'] == 'GER1') | (tabela_9['Liga'] == 'POR1') 
            | (tabela_9['Liga'] == 'SWZ') | (tabela_9['Liga'] == 'RUS') | (tabela_9['Liga'] == 'UKR') | (tabela_9['Liga'] == 'BEL1') 
            | (tabela_9['Liga'] == 'CHN') | (tabela_9['Liga'] == 'DEN') | (tabela_9['Liga'] == 'GRE') | (tabela_9['Liga'] == 'HOL') 
            | (tabela_9['Liga'] == 'JAP') | (tabela_9['Liga'] == 'MEX') | (tabela_9['Liga'] == 'SAUD') | (tabela_9['Liga'] == 'TUR') 
            | (tabela_9['Liga'] == 'UAE') | (tabela_9['Liga'] == 'USA') | (tabela_9['Liga'] == 'ITA2') | (tabela_9['Liga'] == 'GER2') 
            | (tabela_9['Liga'] == 'POR2') | (tabela_9['Liga'] == 'BUL') | (tabela_9['Liga'] == 'AUT') | (tabela_9['Liga'] == 'QAT') 
            | (tabela_9['Liga'] == 'BRA1') | (tabela_9['Liga'] == 'ARG1')]

        tabela_8 = pd.merge(tabela_8, tabela_9[['Atleta', 'L_Rating', 'L_Ranking', 'L_Percentil', 'Size']], on="Atleta", how="left")
        tabela_8 = tabela_8.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Versão_Temporada':'Janela de Análise', 
                                            'L_Rating':'Rating', 'L_Ranking':'Ranking', 'L_Percentil':'Percentil', 'Size':'Qtde Atletas',
                                            'Valor_Mercado':'Valor'})
        tabela_8['Rating'] = tabela_8['Rating'].round(3)
        st.markdown("<h4 style='text-align: center;'><br><b>Goleiros Líberos</b></h4>", unsafe_allow_html=True)
        #st.dataframe(tabela_8, use_container_width=True, hide_index=True)

        # Styling DataFrame using Pandas
        def style_table(df):
            df = df.reset_index(drop=True)
            # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
            formatter = {"Rating": "{:.3f}"}  # Format the 'Rating' column to 3 decimal places
            return df.style.format(formatter).set_table_styles(
                [{
                    'selector': 'thead th',
                    'props': [('font-weight', 'bold'),
                            ('border-style', 'solid'),
                            ('border-width', '0px 0px 2px 0px'),
                            ('border-color', 'black')]
                }, {
                    'selector': 'thead th:not(:first-child)',
                    'props': [('text-align', 'center')]  # Centering all headers except the first
                }, {
                    'selector': 'thead th:last-child',
                    'props': [('color', 'black')]  # Make last column header black
                }, {
                    'selector': 'td',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'center')]
                }, {
                    'selector': 'th',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'left')]
                }]
            ).set_properties(**{'padding': '2px',
                                'font-size': '15px'})

        # Displaying in Streamlit
        def main():
            #st.title("Your DataFrame")

            # Convert the styled DataFrame to HTML without the index and display it
            styled_html = style_table(tabela_8).to_html(escape=False, index=False, hide_index=True)
            st.markdown(styled_html, unsafe_allow_html=True)

        if __name__ == '__main__':
            main()

    elif posição == ("Lateral"):
        st.markdown("<h4 style='text-align: center;'>Free Agents Nacionais Mais Bem Ranqueados<br>Laterais </b></h4>", unsafe_allow_html=True)
        tabela_9 = pd.read_csv("3_Role_Lateral_Defensivo_Full.csv")
        tabela_9 = tabela_9.loc[(tabela_9['Nacionalidade']==nacionalidade)&(tabela_9['Fim_Contrato']<=contrato)&(tabela_9['Versão_Temporada']==temporada)]   
        tabela_9 = tabela_9.iloc[:, np.r_[1, 3, 4, 7, 15, 9:12, 24]]
        tabela_9 = tabela_9[(tabela_9['Liga'] == 'ENG1') | (tabela_9['Liga'] == 'ENG2') | (tabela_9['Liga'] == 'FRA1') | (tabela_9['Liga'] == 'FRA2') 
            | (tabela_9['Liga'] == 'SPA1') | (tabela_9['Liga'] == 'ITA1') | (tabela_9['Liga'] == 'GER1') | (tabela_9['Liga'] == 'POR1') 
            | (tabela_9['Liga'] == 'SWZ') | (tabela_9['Liga'] == 'RUS') | (tabela_9['Liga'] == 'UKR') | (tabela_9['Liga'] == 'BEL1') 
            | (tabela_9['Liga'] == 'CHN') | (tabela_9['Liga'] == 'DEN') | (tabela_9['Liga'] == 'GRE') | (tabela_9['Liga'] == 'HOL') 
            | (tabela_9['Liga'] == 'JAP') | (tabela_9['Liga'] == 'MEX') | (tabela_9['Liga'] == 'SAUD') | (tabela_9['Liga'] == 'TUR') 
            | (tabela_9['Liga'] == 'UAE') | (tabela_9['Liga'] == 'USA') | (tabela_9['Liga'] == 'ITA2') | (tabela_9['Liga'] == 'GER2') 
            | (tabela_9['Liga'] == 'POR2') | (tabela_9['Liga'] == 'BUL') | (tabela_9['Liga'] == 'AUT') | (tabela_9['Liga'] == 'QAT')
            | (tabela_9['Liga'] == 'BRA1') | (tabela_9['Liga'] == 'ARG1')]

        tabela_10 = pd.read_csv("PlayerAnalysis_Role_3_Full.csv")
        tabela_10 = tabela_10.loc[(tabela_10['Nacionalidade']==nacionalidade)&(tabela_10['Fim_Contrato']<=contrato)&(tabela_10['Versão_Temporada']==temporada)]
        tabela_10 = tabela_10.iloc[:, np.r_[8, 25, 29:33]]
        tabela_10 = tabela_10[(tabela_10['Liga'] == 'ENG1') | (tabela_10['Liga'] == 'ENG2') | (tabela_10['Liga'] == 'FRA1') | (tabela_10['Liga'] == 'FRA2') 
            | (tabela_10['Liga'] == 'SPA1') | (tabela_10['Liga'] == 'ITA1') | (tabela_10['Liga'] == 'GER1') | (tabela_10['Liga'] == 'POR1') 
            | (tabela_10['Liga'] == 'SWZ') | (tabela_10['Liga'] == 'RUS') | (tabela_10['Liga'] == 'UKR') | (tabela_10['Liga'] == 'BEL1') 
            | (tabela_10['Liga'] == 'CHN') | (tabela_10['Liga'] == 'DEN') | (tabela_10['Liga'] == 'GRE') | (tabela_10['Liga'] == 'HOL') 
            | (tabela_10['Liga'] == 'JAP') | (tabela_10['Liga'] == 'MEX') | (tabela_10['Liga'] == 'SAUD') | (tabela_10['Liga'] == 'TUR') 
            | (tabela_10['Liga'] == 'UAE') | (tabela_10['Liga'] == 'USA') | (tabela_10['Liga'] == 'ITA2') | (tabela_10['Liga'] == 'GER2') 
            | (tabela_10['Liga'] == 'POR2') | (tabela_10['Liga'] == 'BUL') | (tabela_10['Liga'] == 'AUT') | (tabela_10['Liga'] == 'QAT') 
            | (tabela_10['Liga'] == 'BRA1') | (tabela_10['Liga'] == 'ARG1')]

        tabela_9 = pd.merge(tabela_9, tabela_10[['Atleta', 'L_Rating', 'L_Ranking', 'L_Percentil', 'Size']], on="Atleta", how="left")
        tabela_9 = tabela_9.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Versão_Temporada':'Janela de Análise', 
                                            'L_Rating':'Rating', 'L_Ranking':'Ranking', 'L_Percentil':'Percentil', 'Size':'Qtde Atletas'})
        tabela_9 = tabela_9.sort_values(by='Rating', ascending=False)
        st.markdown("<h4 style='text-align: center;'><b>Laterais Defensivos </b></h4>", unsafe_allow_html=True)
        #st.dataframe(tabela_9, use_container_width=True, hide_index=True)

        # Styling DataFrame using Pandas
        def style_table(df):
            df = df.reset_index(drop=True)
            # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
            formatter = {"Rating": "{:.3f}"}  # Format the 'Rating' column to 3 decimal places
            return df.style.format(formatter).set_table_styles(
                [{
                    'selector': 'thead th',
                    'props': [('font-weight', 'bold'),
                            ('border-style', 'solid'),
                            ('border-width', '0px 0px 2px 0px'),
                            ('border-color', 'black')]
                }, {
                    'selector': 'thead th:not(:first-child)',
                    'props': [('text-align', 'center')]  # Centering all headers except the first
                }, {
                    'selector': 'thead th:last-child',
                    'props': [('color', 'black')]  # Make last column header black
                }, {
                    'selector': 'td',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'center')]
                }, {
                    'selector': 'th',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'left')]
                }]
            ).set_properties(**{'padding': '2px',
                                'font-size': '15px'})

        # Displaying in Streamlit
        def main():
            #st.title("Your DataFrame")

            # Convert the styled DataFrame to HTML without the index and display it
            styled_html = style_table(tabela_9).to_html(escape=False, index=False, hide_index=True)
            st.markdown(styled_html, unsafe_allow_html=True)

        if __name__ == '__main__':
            main()


        tabela_11 = pd.read_csv("4_Role_Lateral_Ofensivo_Full.csv")
        tabela_11 = tabela_11.loc[(tabela_11['Nacionalidade']==nacionalidade)&(tabela_11['Fim_Contrato']<=contrato)&(tabela_11['Versão_Temporada']==temporada)]   
        tabela_11 = tabela_11.iloc[:, np.r_[1, 3, 4, 7, 15, 9:12, 33]]
        tabela_11 = tabela_11[(tabela_11['Liga'] == 'ENG1') | (tabela_11['Liga'] == 'ENG2') | (tabela_11['Liga'] == 'FRA1') | (tabela_11['Liga'] == 'FRA2') 
            | (tabela_11['Liga'] == 'SPA1') | (tabela_11['Liga'] == 'ITA1') | (tabela_11['Liga'] == 'GER1') | (tabela_11['Liga'] == 'POR1') 
            | (tabela_11['Liga'] == 'SWZ') | (tabela_11['Liga'] == 'RUS') | (tabela_11['Liga'] == 'UKR') | (tabela_11['Liga'] == 'BEL1') 
            | (tabela_11['Liga'] == 'CHN') | (tabela_11['Liga'] == 'DEN') | (tabela_11['Liga'] == 'GRE') | (tabela_11['Liga'] == 'HOL') 
            | (tabela_11['Liga'] == 'JAP') | (tabela_11['Liga'] == 'MEX') | (tabela_11['Liga'] == 'SAUD') | (tabela_11['Liga'] == 'TUR') 
            | (tabela_11['Liga'] == 'UAE') | (tabela_11['Liga'] == 'USA') | (tabela_11['Liga'] == 'ITA2') | (tabela_11['Liga'] == 'GER2') 
            | (tabela_11['Liga'] == 'POR2') | (tabela_11['Liga'] == 'BUL') | (tabela_11['Liga'] == 'AUT') | (tabela_11['Liga'] == 'QAT') 
            | (tabela_11['Liga'] == 'BRA1') | (tabela_11['Liga'] == 'ARG1')]

        tabela_12 = pd.read_csv("PlayerAnalysis_Role_4_Full.csv")
        tabela_12 = tabela_12.loc[(tabela_12['Nacionalidade']==nacionalidade)&(tabela_12['Fim_Contrato']<=contrato)&(tabela_12['Versão_Temporada']==temporada)]
        tabela_12 = tabela_12.iloc[:, np.r_[17, 34, 38:42]]
        tabela_12 = tabela_12[(tabela_12['Liga'] == 'ENG1') | (tabela_12['Liga'] == 'ENG2') | (tabela_12['Liga'] == 'FRA1') | (tabela_12['Liga'] == 'FRA2') 
            | (tabela_12['Liga'] == 'SPA1') | (tabela_12['Liga'] == 'ITA1') | (tabela_12['Liga'] == 'GER1') | (tabela_12['Liga'] == 'POR1') 
            | (tabela_12['Liga'] == 'SWZ') | (tabela_12['Liga'] == 'RUS') | (tabela_12['Liga'] == 'UKR') | (tabela_12['Liga'] == 'BEL1') 
            | (tabela_12['Liga'] == 'CHN') | (tabela_12['Liga'] == 'DEN') | (tabela_12['Liga'] == 'GRE') | (tabela_12['Liga'] == 'HOL') 
            | (tabela_12['Liga'] == 'JAP') | (tabela_12['Liga'] == 'MEX') | (tabela_12['Liga'] == 'SAUD') | (tabela_12['Liga'] == 'TUR') 
            | (tabela_12['Liga'] == 'UAE') | (tabela_12['Liga'] == 'USA') | (tabela_12['Liga'] == 'ITA2') | (tabela_12['Liga'] == 'GER2') 
            | (tabela_12['Liga'] == 'POR2') | (tabela_12['Liga'] == 'BUL') | (tabela_12['Liga'] == 'AUT') | (tabela_12['Liga'] == 'QAT') 
            | (tabela_12['Liga'] == 'BRA1') | (tabela_12['Liga'] == 'ARG1')]

        tabela_11 = pd.merge(tabela_11, tabela_12[['Atleta', 'L_Rating', 'L_Ranking', 'L_Percentil', 'Size']], on="Atleta", how="left")
        tabela_11 = tabela_11.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Versão_Temporada':'Janela de Análise', 
                                            'L_Rating':'Rating', 'L_Ranking':'Ranking', 'L_Percentil':'Percentil', 'Size':'Qtde Atletas'})
        tabela_11 = tabela_11.sort_values(by='Rating', ascending=False)
        st.markdown("<h4 style='text-align: center;'><br><b>Laterais Ofensivos </b></h4>", unsafe_allow_html=True)
        #st.dataframe(tabela_11, use_container_width=True, hide_index=True)
        # Styling DataFrame using Pandas
        def style_table(df):
            df = df.reset_index(drop=True)
            # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
            formatter = {"Rating": "{:.3f}"}  # Format the 'Rating' column to 3 decimal places
            return df.style.format(formatter).set_table_styles(
                [{
                    'selector': 'thead th',
                    'props': [('font-weight', 'bold'),
                            ('border-style', 'solid'),
                            ('border-width', '0px 0px 2px 0px'),
                            ('border-color', 'black')]
                }, {
                    'selector': 'thead th:not(:first-child)',
                    'props': [('text-align', 'center')]  # Centering all headers except the first
                }, {
                    'selector': 'thead th:last-child',
                    'props': [('color', 'black')]  # Make last column header black
                }, {
                    'selector': 'td',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'center')]
                }, {
                    'selector': 'th',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'left')]
                }]
            ).set_properties(**{'padding': '0px',
                                'font-size': '15px'})

        # Displaying in Streamlit
        def main():
            #st.title("Your DataFrame")

            # Convert the styled DataFrame to HTML without the index and display it
            styled_html = style_table(tabela_11).to_html(escape=False, index=False, hide_index=True)
            st.markdown(styled_html, unsafe_allow_html=True)

        if __name__ == '__main__':
            main()


        tabela_13 = pd.read_csv("5_Role_Lateral_Equilibrado_Full.csv")
        tabela_13 = tabela_13.loc[(tabela_13['Nacionalidade']==nacionalidade)&(tabela_13['Fim_Contrato']<=contrato)&(tabela_13['Versão_Temporada']==temporada)]   
        tabela_13 = tabela_13.iloc[:, np.r_[1, 3, 4, 7, 15, 9:12, 36]]
        tabela_13 = tabela_13[(tabela_13['Liga'] == 'ENG1') | (tabela_13['Liga'] == 'ENG2') | (tabela_13['Liga'] == 'FRA1') | (tabela_13['Liga'] == 'FRA2') 
            | (tabela_13['Liga'] == 'SPA1') | (tabela_13['Liga'] == 'ITA1') | (tabela_13['Liga'] == 'GER1') | (tabela_13['Liga'] == 'POR1') 
            | (tabela_13['Liga'] == 'SWZ') | (tabela_13['Liga'] == 'RUS') | (tabela_13['Liga'] == 'UKR') | (tabela_13['Liga'] == 'BEL1') 
            | (tabela_13['Liga'] == 'CHN') | (tabela_13['Liga'] == 'DEN') | (tabela_13['Liga'] == 'GRE') | (tabela_13['Liga'] == 'HOL') 
            | (tabela_13['Liga'] == 'JAP') | (tabela_13['Liga'] == 'MEX') | (tabela_13['Liga'] == 'SAUD') | (tabela_13['Liga'] == 'TUR') 
            | (tabela_13['Liga'] == 'UAE') | (tabela_13['Liga'] == 'USA') | (tabela_13['Liga'] == 'ITA2') | (tabela_13['Liga'] == 'GER2') 
            | (tabela_13['Liga'] == 'POR2') | (tabela_13['Liga'] == 'BUL') | (tabela_13['Liga'] == 'AUT') | (tabela_13['Liga'] == 'QAT') 
            | (tabela_13['Liga'] == 'BRA1') | (tabela_13['Liga'] == 'ARG1')]

        tabela_14 = pd.read_csv("PlayerAnalysis_Role_5_Full.csv")
        tabela_14 = tabela_14.loc[(tabela_14['Nacionalidade']==nacionalidade)&(tabela_14['Fim_Contrato']<=contrato)&(tabela_14['Versão_Temporada']==temporada)]
        tabela_14 = tabela_14.iloc[:, np.r_[20, 37, 41:45]]
        tabela_14 = tabela_14[(tabela_14['Liga'] == 'ENG1') | (tabela_14['Liga'] == 'ENG2') | (tabela_14['Liga'] == 'FRA1') | (tabela_14['Liga'] == 'FRA2') 
            | (tabela_14['Liga'] == 'SPA1') | (tabela_14['Liga'] == 'ITA1') | (tabela_14['Liga'] == 'GER1') | (tabela_14['Liga'] == 'POR1') 
            | (tabela_14['Liga'] == 'SWZ') | (tabela_14['Liga'] == 'RUS') | (tabela_14['Liga'] == 'UKR') | (tabela_14['Liga'] == 'BEL1') 
            | (tabela_14['Liga'] == 'CHN') | (tabela_14['Liga'] == 'DEN') | (tabela_14['Liga'] == 'GRE') | (tabela_14['Liga'] == 'HOL') 
            | (tabela_14['Liga'] == 'JAP') | (tabela_14['Liga'] == 'MEX') | (tabela_14['Liga'] == 'SAUD') | (tabela_14['Liga'] == 'TUR') 
            | (tabela_14['Liga'] == 'UAE') | (tabela_14['Liga'] == 'USA') | (tabela_14['Liga'] == 'ITA2') | (tabela_14['Liga'] == 'GER2') 
            | (tabela_14['Liga'] == 'POR2') | (tabela_14['Liga'] == 'BUL') | (tabela_14['Liga'] == 'AUT') | (tabela_14['Liga'] == 'QAT') 
            | (tabela_14['Liga'] == 'BRA1') | (tabela_14['Liga'] == 'ARG1')]

        tabela_13 = pd.merge(tabela_13, tabela_14[['Atleta', 'L_Rating', 'L_Ranking', 'L_Percentil', 'Size']], on="Atleta", how="left")
        tabela_13 = tabela_13.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Versão_Temporada':'Janela de Análise', 
                                            'L_Rating':'Rating', 'L_Ranking':'Ranking', 'L_Percentil':'Percentil', 'Size':'Qtde Atletas'})
        tabela_13 = tabela_13.sort_values(by='Rating', ascending=False)
        st.markdown("<h4 style='text-align: center;'><br><b>Laterais Equilibrados </b></h4>", unsafe_allow_html=True)
        #st.dataframe(tabela_13, use_container_width=True, hide_index=True)

        # Styling DataFrame using Pandas
        def style_table(df):
            df = df.reset_index(drop=True)
            # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
            formatter = {"Rating": "{:.3f}"}  # Format the 'Rating' column to 3 decimal places
            return df.style.format(formatter).set_table_styles(
                [{
                    'selector': 'thead th',
                    'props': [('font-weight', 'bold'),
                            ('border-style', 'solid'),
                            ('border-width', '0px 0px 2px 0px'),
                            ('border-color', 'black')]
                }, {
                    'selector': 'thead th:not(:first-child)',
                    'props': [('text-align', 'center')]  # Centering all headers except the first
                }, {
                    'selector': 'thead th:last-child',
                    'props': [('color', 'black')]  # Make last column header black
                }, {
                    'selector': 'td',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'center')]
                }, {
                    'selector': 'th',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'left')]
                }]
            ).set_properties(**{'padding': '2px',
                                'font-size': '15px'})

        # Displaying in Streamlit
        def main():
            #st.title("Your DataFrame")

            # Convert the styled DataFrame to HTML without the index and display it
            styled_html = style_table(tabela_13).to_html(escape=False, index=False, hide_index=True)
            st.markdown(styled_html, unsafe_allow_html=True)

        if __name__ == '__main__':
            main()


    elif posição == ("Zagueiro"):
        st.markdown("<h4 style='text-align: center;'>Free Agents Nacionais Mais Bem Ranqueados<br>Zagueiros </b></h4>", unsafe_allow_html=True)
        tabela_9 = pd.read_csv("6_Role_Zagueiro_Defensivo_Full.csv")
        tabela_9 = tabela_9.loc[(tabela_9['Nacionalidade']==nacionalidade)&(tabela_9['Fim_Contrato']<=contrato)&(tabela_9['Versão_Temporada']==temporada)]   
        tabela_9 = tabela_9.iloc[:, np.r_[1, 3, 4, 7, 15, 9:12, 24]]
        tabela_9 = tabela_9[(tabela_9['Liga'] == 'ENG1') | (tabela_9['Liga'] == 'ENG2') | (tabela_9['Liga'] == 'FRA1') | (tabela_9['Liga'] == 'FRA2') 
            | (tabela_9['Liga'] == 'SPA1') | (tabela_9['Liga'] == 'ITA1') | (tabela_9['Liga'] == 'GER1') | (tabela_9['Liga'] == 'POR1') 
            | (tabela_9['Liga'] == 'SWZ') | (tabela_9['Liga'] == 'RUS') | (tabela_9['Liga'] == 'UKR') | (tabela_9['Liga'] == 'BEL1') 
            | (tabela_9['Liga'] == 'CHN') | (tabela_9['Liga'] == 'DEN') | (tabela_9['Liga'] == 'GRE') | (tabela_9['Liga'] == 'HOL') 
            | (tabela_9['Liga'] == 'JAP') | (tabela_9['Liga'] == 'MEX') | (tabela_9['Liga'] == 'SAUD') | (tabela_9['Liga'] == 'TUR') 
            | (tabela_9['Liga'] == 'UAE') | (tabela_9['Liga'] == 'USA') | (tabela_9['Liga'] == 'ITA2') | (tabela_9['Liga'] == 'GER2') 
            | (tabela_9['Liga'] == 'POR2') | (tabela_9['Liga'] == 'BUL') | (tabela_9['Liga'] == 'AUT') | (tabela_9['Liga'] == 'QAT') 
            | (tabela_9['Liga'] == 'BRA1') | (tabela_9['Liga'] == 'ARG1')]

        tabela_10 = pd.read_csv("PlayerAnalysis_Role_6_Full.csv")
        tabela_10 = tabela_10.loc[(tabela_10['Nacionalidade']==nacionalidade)&(tabela_10['Fim_Contrato']<=contrato)&(tabela_10['Versão_Temporada']==temporada)]
        tabela_10 = tabela_10.iloc[:, np.r_[8, 25, 29:33]]
        tabela_10 = tabela_10[(tabela_10['Liga'] == 'ENG1') | (tabela_10['Liga'] == 'ENG2') | (tabela_10['Liga'] == 'FRA1') | (tabela_10['Liga'] == 'FRA2') 
            | (tabela_10['Liga'] == 'SPA1') | (tabela_10['Liga'] == 'ITA1') | (tabela_10['Liga'] == 'GER1') | (tabela_10['Liga'] == 'POR1') 
            | (tabela_10['Liga'] == 'SWZ') | (tabela_10['Liga'] == 'RUS') | (tabela_10['Liga'] == 'UKR') | (tabela_10['Liga'] == 'BEL1') 
            | (tabela_10['Liga'] == 'CHN') | (tabela_10['Liga'] == 'DEN') | (tabela_10['Liga'] == 'GRE') | (tabela_10['Liga'] == 'HOL') 
            | (tabela_10['Liga'] == 'JAP') | (tabela_10['Liga'] == 'MEX') | (tabela_10['Liga'] == 'SAUD') | (tabela_10['Liga'] == 'TUR') 
            | (tabela_10['Liga'] == 'UAE') | (tabela_10['Liga'] == 'USA') | (tabela_10['Liga'] == 'ITA2') | (tabela_10['Liga'] == 'GER2') 
            | (tabela_10['Liga'] == 'POR2') | (tabela_10['Liga'] == 'BUL') | (tabela_10['Liga'] == 'AUT') | (tabela_10['Liga'] == 'QAT') 
            | (tabela_10['Liga'] == 'BRA1') | (tabela_10['Liga'] == 'ARG1')]

        tabela_9 = pd.merge(tabela_9, tabela_10[['Atleta', 'L_Rating', 'L_Ranking', 'L_Percentil', 'Size']], on="Atleta", how="left")
        tabela_9 = tabela_9.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Versão_Temporada':'Janela de Análise', 
                                            'L_Rating':'Rating', 'L_Ranking':'Ranking', 'L_Percentil':'Percentil', 'Size':'Qtde Atletas',
                                            'Valor_Mercado': 'Valor'})
        tabela_9 = tabela_9.sort_values(by='Rating', ascending=False)
        st.markdown("<h4 style='text-align: center;'><br><b>Zagueiros Clássicos </b></h4>", unsafe_allow_html=True)
        #st.dataframe(tabela_9, use_container_width=True, hide_index=True)

        # Styling DataFrame using Pandas
        def style_table(df):
            df = df.reset_index(drop=True)
            # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
            formatter = {"Rating": "{:.3f}", "Idade": "{:.0f}"}  # Format the 'Rating' column to 3 decimal places
            #formatter = {"Idade": "{:.0f}"}
            return df.style.format(formatter).set_table_styles(
                [{
                    'selector': 'thead th',
                    'props': [('font-weight', 'bold'),
                            ('border-style', 'solid'),
                            ('border-width', '0px 0px 2px 0px'),
                            ('border-color', 'black')]
                }, {
                    'selector': 'thead th:not(:first-child)',
                    'props': [('text-align', 'center')]  # Centering all headers except the first
                }, {
                    'selector': 'thead th:last-child',
                    'props': [('color', 'black')]  # Make last column header black
                }, {
                    'selector': 'td',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'center')]
                }, {
                    'selector': 'th',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'left')]
                }]
            ).set_properties(**{'padding': '2px',
                                'font-size': '15px'})

        # Displaying in Streamlit
        def main():
            #st.title("Your DataFrame")

            # Convert the styled DataFrame to HTML without the index and display it
            styled_html = style_table(tabela_9).to_html(escape=False, index=False, hide_index=True)
            st.markdown(styled_html, unsafe_allow_html=True)

        if __name__ == '__main__':
            main()


        tabela_11 = pd.read_csv("7_Role_Zagueiro_Construtor_Full.csv")
        tabela_11 = tabela_11.loc[(tabela_11['Nacionalidade']==nacionalidade)&(tabela_11['Fim_Contrato']<=contrato)&(tabela_11['Versão_Temporada']==temporada)]   
        tabela_11 = tabela_11.iloc[:, np.r_[1, 3, 4, 7, 15, 9:12, 28]]
        tabela_11 = tabela_11[(tabela_11['Liga'] == 'ENG1') | (tabela_11['Liga'] == 'ENG2') | (tabela_11['Liga'] == 'FRA1') | (tabela_11['Liga'] == 'FRA2') 
            | (tabela_11['Liga'] == 'SPA1') | (tabela_11['Liga'] == 'ITA1') | (tabela_11['Liga'] == 'GER1') | (tabela_11['Liga'] == 'POR1') 
            | (tabela_11['Liga'] == 'SWZ') | (tabela_11['Liga'] == 'RUS') | (tabela_11['Liga'] == 'UKR') | (tabela_11['Liga'] == 'BEL1') 
            | (tabela_11['Liga'] == 'CHN') | (tabela_11['Liga'] == 'DEN') | (tabela_11['Liga'] == 'GRE') | (tabela_11['Liga'] == 'HOL') 
            | (tabela_11['Liga'] == 'JAP') | (tabela_11['Liga'] == 'MEX') | (tabela_11['Liga'] == 'SAUD') | (tabela_11['Liga'] == 'TUR') 
            | (tabela_11['Liga'] == 'UAE') | (tabela_11['Liga'] == 'USA') | (tabela_11['Liga'] == 'ITA2') | (tabela_11['Liga'] == 'GER2') 
            | (tabela_11['Liga'] == 'POR2') | (tabela_11['Liga'] == 'BUL') | (tabela_11['Liga'] == 'AUT') | (tabela_11['Liga'] == 'QAT') 
            | (tabela_11['Liga'] == 'BRA1') | (tabela_11['Liga'] == 'ARG1')]

        tabela_12 = pd.read_csv("PlayerAnalysis_Role_7_Full.csv")
        tabela_12 = tabela_12.loc[(tabela_12['Nacionalidade']==nacionalidade)&(tabela_12['Fim_Contrato']<=contrato)&(tabela_12['Versão_Temporada']==temporada)]
        tabela_12 = tabela_12.iloc[:, np.r_[12, 29, 33:37]]
        tabela_12 = tabela_12[(tabela_12['Liga'] == 'ENG1') | (tabela_12['Liga'] == 'ENG2') | (tabela_12['Liga'] == 'FRA1') | (tabela_12['Liga'] == 'FRA2') 
            | (tabela_12['Liga'] == 'SPA1') | (tabela_12['Liga'] == 'ITA1') | (tabela_12['Liga'] == 'GER1') | (tabela_12['Liga'] == 'POR1') 
            | (tabela_12['Liga'] == 'SWZ') | (tabela_12['Liga'] == 'RUS') | (tabela_12['Liga'] == 'UKR') | (tabela_12['Liga'] == 'BEL1') 
            | (tabela_12['Liga'] == 'CHN') | (tabela_12['Liga'] == 'DEN') | (tabela_12['Liga'] == 'GRE') | (tabela_12['Liga'] == 'HOL') 
            | (tabela_12['Liga'] == 'JAP') | (tabela_12['Liga'] == 'MEX') | (tabela_12['Liga'] == 'SAUD') | (tabela_12['Liga'] == 'TUR') 
            | (tabela_12['Liga'] == 'UAE') | (tabela_12['Liga'] == 'USA') | (tabela_12['Liga'] == 'ITA2') | (tabela_12['Liga'] == 'GER2') 
            | (tabela_12['Liga'] == 'POR2') | (tabela_12['Liga'] == 'BUL') | (tabela_12['Liga'] == 'AUT') | (tabela_12['Liga'] == 'QAT') 
            | (tabela_12['Liga'] == 'BRA1') | (tabela_12['Liga'] == 'ARG1')]

        tabela_11 = pd.merge(tabela_11, tabela_12[['Atleta', 'L_Rating', 'L_Ranking', 'L_Percentil', 'Size']], on="Atleta", how="left")
        tabela_11 = tabela_11.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Versão_Temporada':'Janela de Análise', 
                                            'L_Rating':'Rating', 'L_Ranking':'Ranking', 'L_Percentil':'Percentil', 'Size':'Qtde Atletas',
                                            'Valor_Mercado': 'Valor'})

        tabela_11 = tabela_11.sort_values(by='Rating', ascending=False)
        st.markdown("<h4 style='text-align: center;'><br><b>Zagueiros Construtores </b></h4>", unsafe_allow_html=True)
        #st.dataframe(tabela_11, use_container_width=True, hide_index=True)

        # Styling DataFrame using Pandas
        def style_table(df):
            df = df.reset_index(drop=True)
            # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
            formatter = {"Rating": "{:.3f}", "Idade": "{:.0f}"}  # Format the 'Rating' column to 3 decimal places
            #formatter = {"Idade": "{:.0f}"}
            return df.style.format(formatter).set_table_styles(
                [{
                    'selector': 'thead th',
                    'props': [('font-weight', 'bold'),
                            ('border-style', 'solid'),
                            ('border-width', '0px 0px 2px 0px'),
                            ('border-color', 'black')]
                }, {
                    'selector': 'thead th:not(:first-child)',
                    'props': [('text-align', 'center')]  # Centering all headers except the first
                }, {
                    'selector': 'thead th:last-child',
                    'props': [('color', 'black')]  # Make last column header black
                }, {
                    'selector': 'td',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'center')]
                }, {
                    'selector': 'th',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'left')]
                }]
            ).set_properties(**{'padding': '2px',
                                'font-size': '15px'})

        # Displaying in Streamlit
        def main():
            #st.title("Your DataFrame")

            # Convert the styled DataFrame to HTML without the index and display it
            styled_html = style_table(tabela_11).to_html(escape=False, index=False, hide_index=True)
            st.markdown(styled_html, unsafe_allow_html=True)

        if __name__ == '__main__':
            main()


        tabela_13 = pd.read_csv("8_Role_Zagueiro_Equilibrado_Full.csv")
        tabela_13 = tabela_13.loc[(tabela_13['Nacionalidade']==nacionalidade)&(tabela_13['Fim_Contrato']<=contrato)&(tabela_13['Versão_Temporada']==temporada)]   
        tabela_13 = tabela_13.iloc[:, np.r_[1, 3, 4, 7, 15, 9:12, 31]]
        tabela_13 = tabela_13[(tabela_13['Liga'] == 'ENG1') | (tabela_13['Liga'] == 'ENG2') | (tabela_13['Liga'] == 'FRA1') | (tabela_13['Liga'] == 'FRA2') 
            | (tabela_13['Liga'] == 'SPA1') | (tabela_13['Liga'] == 'ITA1') | (tabela_13['Liga'] == 'GER1') | (tabela_13['Liga'] == 'POR1') 
            | (tabela_13['Liga'] == 'SWZ') | (tabela_13['Liga'] == 'RUS') | (tabela_13['Liga'] == 'UKR') | (tabela_13['Liga'] == 'BEL1') 
            | (tabela_13['Liga'] == 'CHN') | (tabela_13['Liga'] == 'DEN') | (tabela_13['Liga'] == 'GRE') | (tabela_13['Liga'] == 'HOL') 
            | (tabela_13['Liga'] == 'JAP') | (tabela_13['Liga'] == 'MEX') | (tabela_13['Liga'] == 'SAUD') | (tabela_13['Liga'] == 'TUR') 
            | (tabela_13['Liga'] == 'UAE') | (tabela_13['Liga'] == 'USA') | (tabela_13['Liga'] == 'ITA2') | (tabela_13['Liga'] == 'GER2') 
            | (tabela_13['Liga'] == 'POR2') | (tabela_13['Liga'] == 'BUL') | (tabela_13['Liga'] == 'AUT') | (tabela_13['Liga'] == 'QAT') 
            | (tabela_13['Liga'] == 'BRA1') | (tabela_13['Liga'] == 'ARG1')]

        tabela_14 = pd.read_csv("PlayerAnalysis_Role_8_Full.csv")
        tabela_14 = tabela_14.loc[(tabela_14['Nacionalidade']==nacionalidade)&(tabela_14['Fim_Contrato']<=contrato)&(tabela_14['Versão_Temporada']==temporada)]
        tabela_14 = tabela_14.iloc[:, np.r_[15, 32, 36:40]]
        tabela_14 = tabela_14[(tabela_14['Liga'] == 'ENG1') | (tabela_14['Liga'] == 'ENG2') | (tabela_14['Liga'] == 'FRA1') | (tabela_14['Liga'] == 'FRA2') 
            | (tabela_14['Liga'] == 'SPA1') | (tabela_14['Liga'] == 'ITA1') | (tabela_14['Liga'] == 'GER1') | (tabela_14['Liga'] == 'POR1') 
            | (tabela_14['Liga'] == 'SWZ') | (tabela_14['Liga'] == 'RUS') | (tabela_14['Liga'] == 'UKR') | (tabela_14['Liga'] == 'BEL1') 
            | (tabela_14['Liga'] == 'CHN') | (tabela_14['Liga'] == 'DEN') | (tabela_14['Liga'] == 'GRE') | (tabela_14['Liga'] == 'HOL') 
            | (tabela_14['Liga'] == 'JAP') | (tabela_14['Liga'] == 'MEX') | (tabela_14['Liga'] == 'SAUD') | (tabela_14['Liga'] == 'TUR') 
            | (tabela_14['Liga'] == 'UAE') | (tabela_14['Liga'] == 'USA') | (tabela_14['Liga'] == 'ITA2') | (tabela_14['Liga'] == 'GER2') 
            | (tabela_14['Liga'] == 'POR2') | (tabela_14['Liga'] == 'BUL') | (tabela_14['Liga'] == 'AUT') | (tabela_14['Liga'] == 'QAT') 
            | (tabela_14['Liga'] == 'BRA1') | (tabela_14['Liga'] == 'ARG1')]

        tabela_13 = pd.merge(tabela_13, tabela_14[['Atleta', 'L_Rating', 'L_Ranking', 'L_Percentil', 'Size']], on="Atleta", how="left")
        tabela_13 = tabela_13.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Versão_Temporada':'Janela de Análise', 
                                            'L_Rating':'Rating', 'L_Ranking':'Ranking', 'L_Percentil':'Percentil', 'Size':'Qtde Atletas',
                                            'Valor_Mercado': 'Valor'})
        tabela_13 = tabela_13.sort_values(by='Rating', ascending=False)
        st.markdown("<h4 style='text-align: center;'><br><b>Zagueiros Equilibrados </b></h4>", unsafe_allow_html=True)
        #st.dataframe(tabela_13, use_container_width=True, hide_index=True)

        # Styling DataFrame using Pandas
        def style_table(df):
            df = df.reset_index(drop=True)
            # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
            formatter = {"Rating": "{:.3f}", "Idade": "{:.0f}"}  # Format the 'Rating' column to 3 decimal places
            #formatter = {"Idade": "{:.0f}"}
            return df.style.format(formatter).set_table_styles(
                [{
                    'selector': 'thead th',
                    'props': [('font-weight', 'bold'),
                            ('border-style', 'solid'),
                            ('border-width', '0px 0px 2px 0px'),
                            ('border-color', 'black')]
                }, {
                    'selector': 'thead th:not(:first-child)',
                    'props': [('text-align', 'center')]  # Centering all headers except the first
                }, {
                    'selector': 'thead th:last-child',
                    'props': [('color', 'black')]  # Make last column header black
                }, {
                    'selector': 'td',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'center')]
                }, {
                    'selector': 'th',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'left')]
                }]
            ).set_properties(**{'padding': '2px',
                                'font-size': '15px'})

        # Displaying in Streamlit
        def main():
            #st.title("Your DataFrame")

            # Convert the styled DataFrame to HTML without the index and display it
            styled_html = style_table(tabela_13).to_html(escape=False, index=False, hide_index=True)
            st.markdown(styled_html, unsafe_allow_html=True)

        if __name__ == '__main__':
            main()

###############################################################################################################################
###############################################################################################################################

    elif posição == ("Primeiro Volante"):
        st.markdown("<h4 style='text-align: center;'>Free Agents Nacionais Mais Bem Ranqueados<br>Primeiros Volantes </b></h4>", unsafe_allow_html=True)
        tabela_9 = pd.read_csv("9_Role_Volante_Defensivo_Full.csv")
        tabela_9 = tabela_9.loc[(tabela_9['Nacionalidade']==nacionalidade)&(tabela_9['Fim_Contrato']<=contrato)&(tabela_9['Versão_Temporada']==temporada)]   
        tabela_9 = tabela_9.iloc[:, np.r_[1, 3, 4, 7, 15, 9:12, 22]]
        tabela_9 = tabela_9[(tabela_9['Liga'] == 'ENG1') | (tabela_9['Liga'] == 'ENG2') | (tabela_9['Liga'] == 'FRA1') | (tabela_9['Liga'] == 'FRA2') 
            | (tabela_9['Liga'] == 'SPA1') | (tabela_9['Liga'] == 'ITA1') | (tabela_9['Liga'] == 'GER1') | (tabela_9['Liga'] == 'POR1') 
            | (tabela_9['Liga'] == 'SWZ') | (tabela_9['Liga'] == 'RUS') | (tabela_9['Liga'] == 'UKR') | (tabela_9['Liga'] == 'BEL1') 
            | (tabela_9['Liga'] == 'CHN') | (tabela_9['Liga'] == 'DEN') | (tabela_9['Liga'] == 'GRE') | (tabela_9['Liga'] == 'HOL') 
            | (tabela_9['Liga'] == 'JAP') | (tabela_9['Liga'] == 'MEX') | (tabela_9['Liga'] == 'SAUD') | (tabela_9['Liga'] == 'TUR') 
            | (tabela_9['Liga'] == 'UAE') | (tabela_9['Liga'] == 'USA') | (tabela_9['Liga'] == 'ITA2') | (tabela_9['Liga'] == 'GER2') 
            | (tabela_9['Liga'] == 'POR2') | (tabela_9['Liga'] == 'BUL') | (tabela_9['Liga'] == 'AUT') | (tabela_9['Liga'] == 'QAT')
            | (tabela_9['Liga'] == 'BRA1') | (tabela_9['Liga'] == 'ARG1')]

        tabela_10 = pd.read_csv("PlayerAnalysis_Role_9_Full.csv")
        tabela_10 = tabela_10.loc[(tabela_10['Nacionalidade']==nacionalidade)&(tabela_10['Fim_Contrato']<=contrato)&(tabela_10['Versão_Temporada']==temporada)]
        tabela_10 = tabela_10.iloc[:, np.r_[6, 23, 27:31]]
        tabela_10 = tabela_10[(tabela_10['Liga'] == 'ENG1') | (tabela_10['Liga'] == 'ENG2') | (tabela_10['Liga'] == 'FRA1') | (tabela_10['Liga'] == 'FRA2') 
            | (tabela_10['Liga'] == 'SPA1') | (tabela_10['Liga'] == 'ITA1') | (tabela_10['Liga'] == 'GER1') | (tabela_10['Liga'] == 'POR1') 
            | (tabela_10['Liga'] == 'SWZ') | (tabela_10['Liga'] == 'RUS') | (tabela_10['Liga'] == 'UKR') | (tabela_10['Liga'] == 'BEL1') 
            | (tabela_10['Liga'] == 'CHN') | (tabela_10['Liga'] == 'DEN') | (tabela_10['Liga'] == 'GRE') | (tabela_10['Liga'] == 'HOL') 
            | (tabela_10['Liga'] == 'JAP') | (tabela_10['Liga'] == 'MEX') | (tabela_10['Liga'] == 'SAUD') | (tabela_10['Liga'] == 'TUR') 
            | (tabela_10['Liga'] == 'UAE') | (tabela_10['Liga'] == 'USA') | (tabela_10['Liga'] == 'ITA2') | (tabela_10['Liga'] == 'GER2') 
            | (tabela_10['Liga'] == 'POR2') | (tabela_10['Liga'] == 'BUL') | (tabela_10['Liga'] == 'AUT') | (tabela_10['Liga'] == 'QAT')
            | (tabela_10['Liga'] == 'BRA1') | (tabela_10['Liga'] == 'ARG1')]

        tabela_9 = pd.merge(tabela_9, tabela_10[['Atleta', 'L_Rating', 'L_Ranking', 'L_Percentil', 'Size']], on="Atleta", how="left")
        tabela_9 = tabela_9.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Versão_Temporada':'Janela de Análise', 
                                            'L_Rating':'Rating', 'L_Ranking':'Ranking', 'L_Percentil':'Percentil', 'Size':'Qtde Atletas',
                                            'Valor_Mercado': 'Valor'})
        tabela_9 = tabela_9.sort_values(by='Rating', ascending=False)
        st.markdown("<h4 style='text-align: center;'><br><b>Primeiros Volantes Defensivos </b></h4>", unsafe_allow_html=True)
        #st.dataframe(tabela_9, use_container_width=True, hide_index=True)

        # Styling DataFrame using Pandas
        def style_table(df):
            df = df.reset_index(drop=True)
            # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
            formatter = {"Rating": "{:.3f}", "Idade": "{:.0f}"}  # Format the 'Rating' column to 3 decimal places
            #formatter = {"Idade": "{:.0f}"}
            return df.style.format(formatter).set_table_styles(
                [{
                    'selector': 'thead th',
                    'props': [('font-weight', 'bold'),
                            ('border-style', 'solid'),
                            ('border-width', '0px 0px 2px 0px'),
                            ('border-color', 'black')]
                }, {
                    'selector': 'thead th:not(:first-child)',
                    'props': [('text-align', 'center')]  # Centering all headers except the first
                }, {
                    'selector': 'thead th:last-child',
                    'props': [('color', 'black')]  # Make last column header black
                }, {
                    'selector': 'td',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'center')]
                }, {
                    'selector': 'th',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'left')]
                }]
            ).set_properties(**{'padding': '2px',
                                'font-size': '15px'})

        # Displaying in Streamlit
        def main():
            #st.title("Your DataFrame")

            # Convert the styled DataFrame to HTML without the index and display it
            styled_html = style_table(tabela_9).to_html(escape=False, index=False, hide_index=True)
            st.markdown(styled_html, unsafe_allow_html=True)

        if __name__ == '__main__':
            main()


        tabela_11 = pd.read_csv("10_Role_Volante_Construtor_Full.csv")
        tabela_11 = tabela_11.loc[(tabela_11['Nacionalidade']==nacionalidade)&(tabela_11['Fim_Contrato']<=contrato)&(tabela_11['Versão_Temporada']==temporada)]   
        tabela_11 = tabela_11.iloc[:, np.r_[1, 3, 4, 7, 15, 9:12, 27]]
        tabela_11 = tabela_11[(tabela_11['Liga'] == 'ENG1') | (tabela_11['Liga'] == 'ENG2') | (tabela_11['Liga'] == 'FRA1') | (tabela_11['Liga'] == 'FRA2') 
            | (tabela_11['Liga'] == 'SPA1') | (tabela_11['Liga'] == 'ITA1') | (tabela_11['Liga'] == 'GER1') | (tabela_11['Liga'] == 'POR1') 
            | (tabela_11['Liga'] == 'SWZ') | (tabela_11['Liga'] == 'RUS') | (tabela_11['Liga'] == 'UKR') | (tabela_11['Liga'] == 'BEL1') 
            | (tabela_11['Liga'] == 'CHN') | (tabela_11['Liga'] == 'DEN') | (tabela_11['Liga'] == 'GRE') | (tabela_11['Liga'] == 'HOL') 
            | (tabela_11['Liga'] == 'JAP') | (tabela_11['Liga'] == 'MEX') | (tabela_11['Liga'] == 'SAUD') | (tabela_11['Liga'] == 'TUR') 
            | (tabela_11['Liga'] == 'UAE') | (tabela_11['Liga'] == 'USA') | (tabela_11['Liga'] == 'ITA2') | (tabela_11['Liga'] == 'GER2') 
            | (tabela_11['Liga'] == 'POR2') | (tabela_11['Liga'] == 'BUL') | (tabela_11['Liga'] == 'AUT') | (tabela_11['Liga'] == 'QAT')
            | (tabela_11['Liga'] == 'BRA1') | (tabela_11['Liga'] == 'ARG1')]

        tabela_12 = pd.read_csv("PlayerAnalysis_Role_10_Full.csv")
        tabela_12 = tabela_12.loc[(tabela_12['Nacionalidade']==nacionalidade)&(tabela_12['Fim_Contrato']<=contrato)&(tabela_12['Versão_Temporada']==temporada)]
        tabela_12 = tabela_12.iloc[:, np.r_[11, 28, 32:36]]
        tabela_12 = tabela_12[(tabela_12['Liga'] == 'ENG1') | (tabela_12['Liga'] == 'ENG2') | (tabela_12['Liga'] == 'FRA1') | (tabela_12['Liga'] == 'FRA2') 
            | (tabela_12['Liga'] == 'SPA1') | (tabela_12['Liga'] == 'ITA1') | (tabela_12['Liga'] == 'GER1') | (tabela_12['Liga'] == 'POR1') 
            | (tabela_12['Liga'] == 'SWZ') | (tabela_12['Liga'] == 'RUS') | (tabela_12['Liga'] == 'UKR') | (tabela_12['Liga'] == 'BEL1') 
            | (tabela_12['Liga'] == 'CHN') | (tabela_12['Liga'] == 'DEN') | (tabela_12['Liga'] == 'GRE') | (tabela_12['Liga'] == 'HOL') 
            | (tabela_12['Liga'] == 'JAP') | (tabela_12['Liga'] == 'MEX') | (tabela_12['Liga'] == 'SAUD') | (tabela_12['Liga'] == 'TUR') 
            | (tabela_12['Liga'] == 'UAE') | (tabela_12['Liga'] == 'USA') | (tabela_12['Liga'] == 'ITA2') | (tabela_12['Liga'] == 'GER2') 
            | (tabela_12['Liga'] == 'POR2') | (tabela_12['Liga'] == 'BUL') | (tabela_12['Liga'] == 'AUT') | (tabela_12['Liga'] == 'QAT')
            | (tabela_12['Liga'] == 'BRA1') | (tabela_12['Liga'] == 'ARG1')]

        tabela_11 = pd.merge(tabela_11, tabela_12[['Atleta', 'L_Rating', 'L_Ranking', 'L_Percentil', 'Size']], on="Atleta", how="left")
        tabela_11 = tabela_11.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Versão_Temporada':'Janela de Análise', 
                                            'L_Rating':'Rating', 'L_Ranking':'Ranking', 'L_Percentil':'Percentil', 'Size':'Qtde Atletas',
                                            'Valor_Mercado': 'Valor'})

        tabela_11 = tabela_11.sort_values(by='Rating', ascending=False)
        st.markdown("<h4 style='text-align: center;'><br><b>Primeiros Volantes Construtores </b></h4>", unsafe_allow_html=True)
        #st.dataframe(tabela_11, use_container_width=True, hide_index=True)

        # Styling DataFrame using Pandas
        def style_table(df):
            df = df.reset_index(drop=True)
            # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
            formatter = {"Rating": "{:.3f}", "Idade": "{:.0f}"}  # Format the 'Rating' column to 3 decimal places
            #formatter = {"Idade": "{:.0f}"}
            return df.style.format(formatter).set_table_styles(
                [{
                    'selector': 'thead th',
                    'props': [('font-weight', 'bold'),
                            ('border-style', 'solid'),
                            ('border-width', '0px 0px 2px 0px'),
                            ('border-color', 'black')]
                }, {
                    'selector': 'thead th:not(:first-child)',
                    'props': [('text-align', 'center')]  # Centering all headers except the first
                }, {
                    'selector': 'thead th:last-child',
                    'props': [('color', 'black')]  # Make last column header black
                }, {
                    'selector': 'td',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'center')]
                }, {
                    'selector': 'th',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'left')]
                }]
            ).set_properties(**{'padding': '2px',
                                'font-size': '15px'})

        # Displaying in Streamlit
        def main():
            #st.title("Your DataFrame")

            # Convert the styled DataFrame to HTML without the index and display it
            styled_html = style_table(tabela_11).to_html(escape=False, index=False, hide_index=True)
            st.markdown(styled_html, unsafe_allow_html=True)

        if __name__ == '__main__':
            main()


        tabela_13 = pd.read_csv("11_Role_Volante_Equilibrado_Full.csv")
        tabela_13 = tabela_13.loc[(tabela_13['Nacionalidade']==nacionalidade)&(tabela_13['Fim_Contrato']<=contrato)&(tabela_13['Versão_Temporada']==temporada)]   
        tabela_13 = tabela_13.iloc[:, np.r_[1, 3, 4, 7, 15, 9:12, 29]]
        tabela_13 = tabela_13[(tabela_13['Liga'] == 'ENG1') | (tabela_13['Liga'] == 'ENG2') | (tabela_13['Liga'] == 'FRA1') | (tabela_13['Liga'] == 'FRA2') 
            | (tabela_13['Liga'] == 'SPA1') | (tabela_13['Liga'] == 'ITA1') | (tabela_13['Liga'] == 'GER1') | (tabela_13['Liga'] == 'POR1') 
            | (tabela_13['Liga'] == 'SWZ') | (tabela_13['Liga'] == 'RUS') | (tabela_13['Liga'] == 'UKR') | (tabela_13['Liga'] == 'BEL1') 
            | (tabela_13['Liga'] == 'CHN') | (tabela_13['Liga'] == 'DEN') | (tabela_13['Liga'] == 'GRE') | (tabela_13['Liga'] == 'HOL') 
            | (tabela_13['Liga'] == 'JAP') | (tabela_13['Liga'] == 'MEX') | (tabela_13['Liga'] == 'SAUD') | (tabela_13['Liga'] == 'TUR') 
            | (tabela_13['Liga'] == 'UAE') | (tabela_13['Liga'] == 'USA') | (tabela_13['Liga'] == 'ITA2') | (tabela_13['Liga'] == 'GER2') 
            | (tabela_13['Liga'] == 'POR2') | (tabela_13['Liga'] == 'BUL') | (tabela_13['Liga'] == 'AUT') | (tabela_13['Liga'] == 'QAT')
            | (tabela_13['Liga'] == 'BRA1') | (tabela_13['Liga'] == 'ARG1')]

        tabela_14 = pd.read_csv("PlayerAnalysis_Role_11_Full.csv")
        tabela_14 = tabela_14.loc[(tabela_14['Nacionalidade']==nacionalidade)&(tabela_14['Fim_Contrato']<=contrato)&(tabela_14['Versão_Temporada']==temporada)]
        tabela_14 = tabela_14.iloc[:, np.r_[13, 30, 34:38]]
        tabela_14 = tabela_14[(tabela_14['Liga'] == 'ENG1') | (tabela_14['Liga'] == 'ENG2') | (tabela_14['Liga'] == 'FRA1') | (tabela_14['Liga'] == 'FRA2') 
            | (tabela_14['Liga'] == 'SPA1') | (tabela_14['Liga'] == 'ITA1') | (tabela_14['Liga'] == 'GER1') | (tabela_14['Liga'] == 'POR1') 
            | (tabela_14['Liga'] == 'SWZ') | (tabela_14['Liga'] == 'RUS') | (tabela_14['Liga'] == 'UKR') | (tabela_14['Liga'] == 'BEL1') 
            | (tabela_14['Liga'] == 'CHN') | (tabela_14['Liga'] == 'DEN') | (tabela_14['Liga'] == 'GRE') | (tabela_14['Liga'] == 'HOL') 
            | (tabela_14['Liga'] == 'JAP') | (tabela_14['Liga'] == 'MEX') | (tabela_14['Liga'] == 'SAUD') | (tabela_14['Liga'] == 'TUR') 
            | (tabela_14['Liga'] == 'UAE') | (tabela_14['Liga'] == 'USA') | (tabela_14['Liga'] == 'ITA2') | (tabela_14['Liga'] == 'GER2') 
            | (tabela_14['Liga'] == 'POR2') | (tabela_14['Liga'] == 'BUL') | (tabela_14['Liga'] == 'AUT') | (tabela_14['Liga'] == 'QAT')
            | (tabela_14['Liga'] == 'BRA1') | (tabela_14['Liga'] == 'ARG1')]

        tabela_13 = pd.merge(tabela_13, tabela_14[['Atleta', 'L_Rating', 'L_Ranking', 'L_Percentil', 'Size']], on="Atleta", how="left")
        tabela_13 = tabela_13.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Versão_Temporada':'Janela de Análise', 
                                            'L_Rating':'Rating', 'L_Ranking':'Ranking', 'L_Percentil':'Percentil', 'Size':'Qtde Atletas',
                                            'Valor_Mercado': 'Valor'})
        tabela_13 = tabela_13.sort_values(by='Rating', ascending=False)
        st.markdown("<h4 style='text-align: center;'><br><b>Primeiros Volantes Equilibrados </b></h4>", unsafe_allow_html=True)
        #st.dataframe(tabela_13, use_container_width=True, hide_index=True)

        # Styling DataFrame using Pandas
        def style_table(df):
            df = df.reset_index(drop=True)
            # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
            formatter = {"Rating": "{:.3f}", "Idade": "{:.0f}"}  # Format the 'Rating' column to 3 decimal places
            #formatter = {"Idade": "{:.0f}"}
            return df.style.format(formatter).set_table_styles(
                [{
                    'selector': 'thead th',
                    'props': [('font-weight', 'bold'),
                            ('border-style', 'solid'),
                            ('border-width', '0px 0px 2px 0px'),
                            ('border-color', 'black')]
                }, {
                    'selector': 'thead th:not(:first-child)',
                    'props': [('text-align', 'center')]  # Centering all headers except the first
                }, {
                    'selector': 'thead th:last-child',
                    'props': [('color', 'black')]  # Make last column header black
                }, {
                    'selector': 'td',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'center')]
                }, {
                    'selector': 'th',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'left')]
                }]
            ).set_properties(**{'padding': '2px',
                                'font-size': '15px'})

        # Displaying in Streamlit
        def main():
            #st.title("Your DataFrame")

            # Convert the styled DataFrame to HTML without the index and display it
            styled_html = style_table(tabela_13).to_html(escape=False, index=False, hide_index=True)
            st.markdown(styled_html, unsafe_allow_html=True)

        if __name__ == '__main__':
            main()

###############################################################################################################################
###############################################################################################################################

    elif posição == ("Segundo Volante"):
        st.markdown("<h4 style='text-align: center;'>Free Agents Nacionais Mais Bem Ranqueados<br><br>Segundos Volantes </b></h4>", unsafe_allow_html=True)
        tabela_9 = pd.read_csv("12_Role_Segundo_Volante_Box_to_Box_Full.csv")
        tabela_9 = tabela_9.loc[(tabela_9['Nacionalidade']==nacionalidade)&(tabela_9['Fim_Contrato']<=contrato)&(tabela_9['Versão_Temporada']==temporada)]   
        tabela_9 = tabela_9.iloc[:, np.r_[1, 3, 4, 7, 15, 9:12, 31]]
        tabela_9 = tabela_9[(tabela_9['Liga'] == 'ENG1') | (tabela_9['Liga'] == 'ENG2') | (tabela_9['Liga'] == 'FRA1') | (tabela_9['Liga'] == 'FRA2') 
            | (tabela_9['Liga'] == 'SPA1') | (tabela_9['Liga'] == 'ITA1') | (tabela_9['Liga'] == 'GER1') | (tabela_9['Liga'] == 'POR1') 
            | (tabela_9['Liga'] == 'SWZ') | (tabela_9['Liga'] == 'RUS') | (tabela_9['Liga'] == 'UKR') | (tabela_9['Liga'] == 'BEL1') 
            | (tabela_9['Liga'] == 'CHN') | (tabela_9['Liga'] == 'DEN') | (tabela_9['Liga'] == 'GRE') | (tabela_9['Liga'] == 'HOL') 
            | (tabela_9['Liga'] == 'JAP') | (tabela_9['Liga'] == 'MEX') | (tabela_9['Liga'] == 'SAUD') | (tabela_9['Liga'] == 'TUR') 
            | (tabela_9['Liga'] == 'UAE') | (tabela_9['Liga'] == 'USA') | (tabela_9['Liga'] == 'ITA2') | (tabela_9['Liga'] == 'GER2') 
            | (tabela_9['Liga'] == 'POR2') | (tabela_9['Liga'] == 'BUL') | (tabela_9['Liga'] == 'AUT') | (tabela_9['Liga'] == 'QAT')
            | (tabela_9['Liga'] == 'BRA1') | (tabela_9['Liga'] == 'ARG1')]

        tabela_10 = pd.read_csv("PlayerAnalysis_Role_12_Full.csv")
        tabela_10 = tabela_10.loc[(tabela_10['Nacionalidade']==nacionalidade)&(tabela_10['Fim_Contrato']<=contrato)&(tabela_10['Versão_Temporada']==temporada)]
        tabela_10 = tabela_10.iloc[:, np.r_[15, 32, 36:40]]
        tabela_10 = tabela_10[(tabela_10['Liga'] == 'ENG1') | (tabela_10['Liga'] == 'ENG2') | (tabela_10['Liga'] == 'FRA1') | (tabela_10['Liga'] == 'FRA2') 
            | (tabela_10['Liga'] == 'SPA1') | (tabela_10['Liga'] == 'ITA1') | (tabela_10['Liga'] == 'GER1') | (tabela_10['Liga'] == 'POR1') 
            | (tabela_10['Liga'] == 'SWZ') | (tabela_10['Liga'] == 'RUS') | (tabela_10['Liga'] == 'UKR') | (tabela_10['Liga'] == 'BEL1') 
            | (tabela_10['Liga'] == 'CHN') | (tabela_10['Liga'] == 'DEN') | (tabela_10['Liga'] == 'GRE') | (tabela_10['Liga'] == 'HOL') 
            | (tabela_10['Liga'] == 'JAP') | (tabela_10['Liga'] == 'MEX') | (tabela_10['Liga'] == 'SAUD') | (tabela_10['Liga'] == 'TUR') 
            | (tabela_10['Liga'] == 'UAE') | (tabela_10['Liga'] == 'USA') | (tabela_10['Liga'] == 'ITA2') | (tabela_10['Liga'] == 'GER2') 
            | (tabela_10['Liga'] == 'POR2') | (tabela_10['Liga'] == 'BUL') | (tabela_10['Liga'] == 'AUT') | (tabela_10['Liga'] == 'QAT')
            | (tabela_10['Liga'] == 'BRA1') | (tabela_10['Liga'] == 'ARG1')]

        tabela_9 = pd.merge(tabela_9, tabela_10[['Atleta', 'L_Rating', 'L_Ranking', 'L_Percentil', 'Size']], on="Atleta", how="left")
        tabela_9 = tabela_9.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Versão_Temporada':'Janela de Análise', 
                                            'L_Rating':'Rating', 'L_Ranking':'Ranking', 'L_Percentil':'Percentil', 'Size':'Qtde Atletas',
                                            'Valor_Mercado': 'Valor'})
        tabela_9 = tabela_9.sort_values(by='Rating', ascending=False)
        st.markdown("<h4 style='text-align: center;'><br><b>Segundos Volantes Box-to-Box </b></h4>", unsafe_allow_html=True)

        # Styling DataFrame using Pandas
        def style_table(df):
            df = df.reset_index(drop=True)
            # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
            formatter = {"Rating": "{:.3f}", "Idade": "{:.0f}"}  # Format the 'Rating' column to 3 decimal places
            return df.style.format(formatter).set_table_styles(
                [{
                    'selector': 'thead th',
                    'props': [('font-weight', 'bold'),
                            ('border-style', 'solid'),
                            ('border-width', '0px 0px 2px 0px'),
                            ('border-color', 'black')]
                }, {
                    'selector': 'thead th:not(:first-child)',
                    'props': [('text-align', 'center')]  # Centering all headers except the first
                }, {
                    'selector': 'thead th:last-child',
                    'props': [('color', 'black')]  # Make last column header black
                }, {
                    'selector': 'td',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'center')]
                }, {
                    'selector': 'th',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'left')]
                }]
            ).set_properties(**{'padding': '2px',
                                'font-size': '15px'})

        # Displaying in Streamlit
        def main():
            #st.title("Your DataFrame")

            # Convert the styled DataFrame to HTML without the index and display it
            styled_html = style_table(tabela_9).to_html(escape=False, index=False, hide_index=True)
            st.markdown(styled_html, unsafe_allow_html=True)

        if __name__ == '__main__':
            main()


        tabela_11 = pd.read_csv("13_Role_Segundo_Volante_Organizador_Full.csv")
        tabela_11 = tabela_11.loc[(tabela_11['Nacionalidade']==nacionalidade)&(tabela_11['Fim_Contrato']<=contrato)&(tabela_11['Versão_Temporada']==temporada)]   
        tabela_11 = tabela_11.iloc[:, np.r_[1, 3, 4, 7, 15, 9:12, 28]]
        tabela_11 = tabela_11[(tabela_11['Liga'] == 'ENG1') | (tabela_11['Liga'] == 'ENG2') | (tabela_11['Liga'] == 'FRA1') | (tabela_11['Liga'] == 'FRA2') 
            | (tabela_11['Liga'] == 'SPA1') | (tabela_11['Liga'] == 'ITA1') | (tabela_11['Liga'] == 'GER1') | (tabela_11['Liga'] == 'POR1') 
            | (tabela_11['Liga'] == 'SWZ') | (tabela_11['Liga'] == 'RUS') | (tabela_11['Liga'] == 'UKR') | (tabela_11['Liga'] == 'BEL1') 
            | (tabela_11['Liga'] == 'CHN') | (tabela_11['Liga'] == 'DEN') | (tabela_11['Liga'] == 'GRE') | (tabela_11['Liga'] == 'HOL') 
            | (tabela_11['Liga'] == 'JAP') | (tabela_11['Liga'] == 'MEX') | (tabela_11['Liga'] == 'SAUD') | (tabela_11['Liga'] == 'TUR') 
            | (tabela_11['Liga'] == 'UAE') | (tabela_11['Liga'] == 'USA') | (tabela_11['Liga'] == 'ITA2') | (tabela_11['Liga'] == 'GER2') 
            | (tabela_11['Liga'] == 'POR2') | (tabela_11['Liga'] == 'BUL') | (tabela_11['Liga'] == 'AUT') | (tabela_11['Liga'] == 'QAT') 
            | (tabela_11['Liga'] == 'BRA1') | (tabela_11['Liga'] == 'ARG1')]

        tabela_12 = pd.read_csv("PlayerAnalysis_Role_13_Full.csv")
        tabela_12 = tabela_12.loc[(tabela_12['Nacionalidade']==nacionalidade)&(tabela_12['Fim_Contrato']<=contrato)&(tabela_12['Versão_Temporada']==temporada)]
        tabela_12 = tabela_12.iloc[:, np.r_[12, 29, 33:37]]
        tabela_12 = tabela_12[(tabela_12['Liga'] == 'ENG1') | (tabela_12['Liga'] == 'ENG2') | (tabela_12['Liga'] == 'FRA1') | (tabela_12['Liga'] == 'FRA2') 
            | (tabela_12['Liga'] == 'SPA1') | (tabela_12['Liga'] == 'ITA1') | (tabela_12['Liga'] == 'GER1') | (tabela_12['Liga'] == 'POR1') 
            | (tabela_12['Liga'] == 'SWZ') | (tabela_12['Liga'] == 'RUS') | (tabela_12['Liga'] == 'UKR') | (tabela_12['Liga'] == 'BEL1') 
            | (tabela_12['Liga'] == 'CHN') | (tabela_12['Liga'] == 'DEN') | (tabela_12['Liga'] == 'GRE') | (tabela_12['Liga'] == 'HOL') 
            | (tabela_12['Liga'] == 'JAP') | (tabela_12['Liga'] == 'MEX') | (tabela_12['Liga'] == 'SAUD') | (tabela_12['Liga'] == 'TUR') 
            | (tabela_12['Liga'] == 'UAE') | (tabela_12['Liga'] == 'USA') | (tabela_12['Liga'] == 'ITA2') | (tabela_12['Liga'] == 'GER2') 
            | (tabela_12['Liga'] == 'POR2') | (tabela_12['Liga'] == 'BUL') | (tabela_12['Liga'] == 'AUT') | (tabela_12['Liga'] == 'QAT') 
            | (tabela_12['Liga'] == 'BRA1') | (tabela_12['Liga'] == 'ARG1')]

        tabela_11 = pd.merge(tabela_11, tabela_12[['Atleta', 'L_Rating', 'L_Ranking', 'L_Percentil', 'Size']], on="Atleta", how="left")
        tabela_11 = tabela_11.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Versão_Temporada':'Janela de Análise', 
                                            'L_Rating':'Rating', 'L_Ranking':'Ranking', 'L_Percentil':'Percentil', 'Size':'Qtde Atletas',
                                            'Valor_Mercado': 'Valor'})

        tabela_11 = tabela_11.sort_values(by='Rating', ascending=False)
        st.markdown("<h4 style='text-align: center;'><br><b>Segundos Volantes Organizadores </b></h4>", unsafe_allow_html=True)
        #st.dataframe(tabela_11, use_container_width=True, hide_index=True)

        # Styling DataFrame using Pandas
        def style_table(df):
            df = df.reset_index(drop=True)
            # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
            formatter = {"Rating": "{:.3f}", "Idade": "{:.0f}"}  # Format the 'Rating' column to 3 decimal places
            #formatter = {"Idade": "{:.0f}"}
            return df.style.format(formatter).set_table_styles(
                [{
                    'selector': 'thead th',
                    'props': [('font-weight', 'bold'),
                            ('border-style', 'solid'),
                            ('border-width', '0px 0px 2px 0px'),
                            ('border-color', 'black')]
                }, {
                    'selector': 'thead th:not(:first-child)',
                    'props': [('text-align', 'center')]  # Centering all headers except the first
                }, {
                    'selector': 'thead th:last-child',
                    'props': [('color', 'black')]  # Make last column header black
                }, {
                    'selector': 'td',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'center')]
                }, {
                    'selector': 'th',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'left')]
                }]
            ).set_properties(**{'padding': '2px',
                                'font-size': '15px'})

        # Displaying in Streamlit
        def main():
            #st.title("Your DataFrame")

            # Convert the styled DataFrame to HTML without the index and display it
            styled_html = style_table(tabela_11).to_html(escape=False, index=False, hide_index=True)
            st.markdown(styled_html, unsafe_allow_html=True)

        if __name__ == '__main__':
            main()


        tabela_13 = pd.read_csv("14_Role_Segundo_Volante_Equilibrado_Full.csv")
        tabela_13 = tabela_13.loc[(tabela_13['Nacionalidade']==nacionalidade)&(tabela_13['Fim_Contrato']<=contrato)&(tabela_13['Versão_Temporada']==temporada)]   
        tabela_13 = tabela_13.iloc[:, np.r_[1, 3, 4, 7, 15, 9:12, 31]]
        tabela_13 = tabela_13[(tabela_13['Liga'] == 'ENG1') | (tabela_13['Liga'] == 'ENG2') | (tabela_13['Liga'] == 'FRA1') | (tabela_13['Liga'] == 'FRA2') 
            | (tabela_13['Liga'] == 'SPA1') | (tabela_13['Liga'] == 'ITA1') | (tabela_13['Liga'] == 'GER1') | (tabela_13['Liga'] == 'POR1') 
            | (tabela_13['Liga'] == 'SWZ') | (tabela_13['Liga'] == 'RUS') | (tabela_13['Liga'] == 'UKR') | (tabela_13['Liga'] == 'BEL1') 
            | (tabela_13['Liga'] == 'CHN') | (tabela_13['Liga'] == 'DEN') | (tabela_13['Liga'] == 'GRE') | (tabela_13['Liga'] == 'HOL') 
            | (tabela_13['Liga'] == 'JAP') | (tabela_13['Liga'] == 'MEX') | (tabela_13['Liga'] == 'SAUD') | (tabela_13['Liga'] == 'TUR') 
            | (tabela_13['Liga'] == 'UAE') | (tabela_13['Liga'] == 'USA') | (tabela_13['Liga'] == 'ITA2') | (tabela_13['Liga'] == 'GER2') 
            | (tabela_13['Liga'] == 'POR2') | (tabela_13['Liga'] == 'BUL') | (tabela_13['Liga'] == 'AUT') | (tabela_13['Liga'] == 'QAT') 
            | (tabela_13['Liga'] == 'BRA1') | (tabela_13['Liga'] == 'ARG1')]

        tabela_14 = pd.read_csv("PlayerAnalysis_Role_14_Full.csv")
        tabela_14 = tabela_14.loc[(tabela_14['Nacionalidade']==nacionalidade)&(tabela_14['Fim_Contrato']<=contrato)&(tabela_14['Versão_Temporada']==temporada)]
        tabela_14 = tabela_14.iloc[:, np.r_[15, 32, 36:40]]
        tabela_14 = tabela_14[(tabela_14['Liga'] == 'ENG1') | (tabela_14['Liga'] == 'ENG2') | (tabela_14['Liga'] == 'FRA1') | (tabela_14['Liga'] == 'FRA2') 
            | (tabela_14['Liga'] == 'SPA1') | (tabela_14['Liga'] == 'ITA1') | (tabela_14['Liga'] == 'GER1') | (tabela_14['Liga'] == 'POR1') 
            | (tabela_14['Liga'] == 'SWZ') | (tabela_14['Liga'] == 'RUS') | (tabela_14['Liga'] == 'UKR') | (tabela_14['Liga'] == 'BEL1') 
            | (tabela_14['Liga'] == 'CHN') | (tabela_14['Liga'] == 'DEN') | (tabela_14['Liga'] == 'GRE') | (tabela_14['Liga'] == 'HOL') 
            | (tabela_14['Liga'] == 'JAP') | (tabela_14['Liga'] == 'MEX') | (tabela_14['Liga'] == 'SAUD') | (tabela_14['Liga'] == 'TUR') 
            | (tabela_14['Liga'] == 'UAE') | (tabela_14['Liga'] == 'USA') | (tabela_14['Liga'] == 'ITA2') | (tabela_14['Liga'] == 'GER2') 
            | (tabela_14['Liga'] == 'POR2') | (tabela_14['Liga'] == 'BUL') | (tabela_14['Liga'] == 'AUT') | (tabela_14['Liga'] == 'QAT') 
            | (tabela_14['Liga'] == 'BRA1') | (tabela_14['Liga'] == 'ARG1')]

        tabela_13 = pd.merge(tabela_13, tabela_14[['Atleta', 'L_Rating', 'L_Ranking', 'L_Percentil', 'Size']], on="Atleta", how="left")
        tabela_13 = tabela_13.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Versão_Temporada':'Janela de Análise', 
                                            'L_Rating':'Rating', 'L_Ranking':'Ranking', 'L_Percentil':'Percentil', 'Size':'Qtde Atletas',
                                            'Valor_Mercado': 'Valor'})
        tabela_13 = tabela_13.sort_values(by='Rating', ascending=False)
        st.markdown("<h4 style='text-align: center;'><br><b>Segundos Volantes Equilibrados </b></h4>", unsafe_allow_html=True)
        #st.dataframe(tabela_13, use_container_width=True, hide_index=True)

        # Styling DataFrame using Pandas
        def style_table(df):
            df = df.reset_index(drop=True)
            # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
            formatter = {"Rating": "{:.3f}", "Idade": "{:.0f}"}  # Format the 'Rating' column to 3 decimal places
            #formatter = {"Idade": "{:.0f}"}
            return df.style.format(formatter).set_table_styles(
                [{
                    'selector': 'thead th',
                    'props': [('font-weight', 'bold'),
                            ('border-style', 'solid'),
                            ('border-width', '0px 0px 2px 0px'),
                            ('border-color', 'black')]
                }, {
                    'selector': 'thead th:not(:first-child)',
                    'props': [('text-align', 'center')]  # Centering all headers except the first
                }, {
                    'selector': 'thead th:last-child',
                    'props': [('color', 'black')]  # Make last column header black
                }, {
                    'selector': 'td',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'center')]
                }, {
                    'selector': 'th',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'left')]
                }]
            ).set_properties(**{'padding': '2px',
                                'font-size': '15px'})

        # Displaying in Streamlit
        def main():
            #st.title("Your DataFrame")

            # Convert the styled DataFrame to HTML without the index and display it
            styled_html = style_table(tabela_13).to_html(escape=False, index=False, hide_index=True)
            st.markdown(styled_html, unsafe_allow_html=True)

        if __name__ == '__main__':
            main()

###############################################################################################################################
###############################################################################################################################

    elif posição == ("Meia"):
        st.markdown("<h4 style='text-align: center;'>Free Agents Nacionais Mais Bem Ranqueados<br>Meias </b></h4>", unsafe_allow_html=True)
        tabela_9 = pd.read_csv("15_Role_Meia_Organizador_Full.csv")
        tabela_9 = tabela_9.loc[(tabela_9['Nacionalidade']==nacionalidade)&(tabela_9['Fim_Contrato']<=contrato)&(tabela_9['Versão_Temporada']==temporada)]   
        tabela_9 = tabela_9.iloc[:, np.r_[1, 3, 4, 7, 15, 9:12, 28]]
        tabela_9 = tabela_9[(tabela_9['Liga'] == 'ENG1') | (tabela_9['Liga'] == 'ENG2') | (tabela_9['Liga'] == 'FRA1') | (tabela_9['Liga'] == 'FRA2') 
            | (tabela_9['Liga'] == 'SPA1') | (tabela_9['Liga'] == 'ITA1') | (tabela_9['Liga'] == 'GER1') | (tabela_9['Liga'] == 'POR1') 
            | (tabela_9['Liga'] == 'SWZ') | (tabela_9['Liga'] == 'RUS') | (tabela_9['Liga'] == 'UKR') | (tabela_9['Liga'] == 'BEL1') 
            | (tabela_9['Liga'] == 'CHN') | (tabela_9['Liga'] == 'DEN') | (tabela_9['Liga'] == 'GRE') | (tabela_9['Liga'] == 'HOL') 
            | (tabela_9['Liga'] == 'JAP') | (tabela_9['Liga'] == 'MEX') | (tabela_9['Liga'] == 'SAUD') | (tabela_9['Liga'] == 'TUR') 
            | (tabela_9['Liga'] == 'UAE') | (tabela_9['Liga'] == 'USA') | (tabela_9['Liga'] == 'ITA2') | (tabela_9['Liga'] == 'GER2') 
            | (tabela_9['Liga'] == 'POR2') | (tabela_9['Liga'] == 'BUL') | (tabela_9['Liga'] == 'AUT') | (tabela_9['Liga'] == 'QAT') 
            | (tabela_9['Liga'] == 'BRA1') | (tabela_9['Liga'] == 'ARG1')]

        tabela_10 = pd.read_csv("PlayerAnalysis_Role_15_Full.csv")
        tabela_10 = tabela_10.loc[(tabela_10['Nacionalidade']==nacionalidade)&(tabela_10['Fim_Contrato']<=contrato)&(tabela_10['Versão_Temporada']==temporada)]
        tabela_10 = tabela_10.iloc[:, np.r_[12, 29, 33:37]]
        tabela_10 = tabela_10[(tabela_10['Liga'] == 'ENG1') | (tabela_10['Liga'] == 'ENG2') | (tabela_10['Liga'] == 'FRA1') | (tabela_10['Liga'] == 'FRA2') 
            | (tabela_10['Liga'] == 'SPA1') | (tabela_10['Liga'] == 'ITA1') | (tabela_10['Liga'] == 'GER1') | (tabela_10['Liga'] == 'POR1') 
            | (tabela_10['Liga'] == 'SWZ') | (tabela_10['Liga'] == 'RUS') | (tabela_10['Liga'] == 'UKR') | (tabela_10['Liga'] == 'BEL1') 
            | (tabela_10['Liga'] == 'CHN') | (tabela_10['Liga'] == 'DEN') | (tabela_10['Liga'] == 'GRE') | (tabela_10['Liga'] == 'HOL') 
            | (tabela_10['Liga'] == 'JAP') | (tabela_10['Liga'] == 'MEX') | (tabela_10['Liga'] == 'SAUD') | (tabela_10['Liga'] == 'TUR') 
            | (tabela_10['Liga'] == 'UAE') | (tabela_10['Liga'] == 'USA') | (tabela_10['Liga'] == 'ITA2') | (tabela_10['Liga'] == 'GER2') 
            | (tabela_10['Liga'] == 'POR2') | (tabela_10['Liga'] == 'BUL') | (tabela_10['Liga'] == 'AUT') | (tabela_10['Liga'] == 'QAT') 
            | (tabela_10['Liga'] == 'BRA1') | (tabela_10['Liga'] == 'ARG1')]

        tabela_9 = pd.merge(tabela_9, tabela_10[['Atleta', 'L_Rating', 'L_Ranking', 'L_Percentil', 'Size']], on="Atleta", how="left")
        tabela_9 = tabela_9.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Versão_Temporada':'Janela de Análise', 
                                            'L_Rating':'Rating', 'L_Ranking':'Ranking', 'L_Percentil':'Percentil', 'Size':'Qtde Atletas',
                                            'Valor_Mercado': 'Valor'})
        tabela_9 = tabela_9.sort_values(by='Rating', ascending=False)
        st.markdown("<h4 style='text-align: center;'><br><b>Meias Organizadores </b></h4>", unsafe_allow_html=True)
        #st.dataframe(tabela_9, use_container_width=True, hide_index=True)

        # Styling DataFrame using Pandas
        def style_table(df):
            df = df.reset_index(drop=True)
            # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
            formatter = {"Rating": "{:.3f}", "Idade": "{:.0f}"}  # Format the 'Rating' column to 3 decimal places
            #formatter = {"Idade": "{:.0f}"}
            return df.style.format(formatter).set_table_styles(
                [{
                    'selector': 'thead th',
                    'props': [('font-weight', 'bold'),
                            ('border-style', 'solid'),
                            ('border-width', '0px 0px 2px 0px'),
                            ('border-color', 'black')]
                }, {
                    'selector': 'thead th:not(:first-child)',
                    'props': [('text-align', 'center')]  # Centering all headers except the first
                }, {
                    'selector': 'thead th:last-child',
                    'props': [('color', 'black')]  # Make last column header black
                }, {
                    'selector': 'td',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'center')]
                }, {
                    'selector': 'th',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'left')]
                }]
            ).set_properties(**{'padding': '2px',
                                'font-size': '15px'})

        # Displaying in Streamlit
        def main():
            #st.title("Your DataFrame")

            # Convert the styled DataFrame to HTML without the index and display it
            styled_html = style_table(tabela_9).to_html(escape=False, index=False, hide_index=True)
            st.markdown(styled_html, unsafe_allow_html=True)

        if __name__ == '__main__':
            main()


        tabela_11 = pd.read_csv("16_Role_Meia_Atacante_Full.csv")
        tabela_11 = tabela_11.loc[(tabela_11['Nacionalidade']==nacionalidade)&(tabela_11['Fim_Contrato']<=contrato)&(tabela_11['Versão_Temporada']==temporada)]   
        tabela_11 = tabela_11.iloc[:, np.r_[1, 3, 4, 7, 15, 9:12, 35]]
        tabela_11 = tabela_11[(tabela_11['Liga'] == 'ENG1') | (tabela_11['Liga'] == 'ENG2') | (tabela_11['Liga'] == 'FRA1') | (tabela_11['Liga'] == 'FRA2') 
            | (tabela_11['Liga'] == 'SPA1') | (tabela_11['Liga'] == 'ITA1') | (tabela_11['Liga'] == 'GER1') | (tabela_11['Liga'] == 'POR1') 
            | (tabela_11['Liga'] == 'SWZ') | (tabela_11['Liga'] == 'RUS') | (tabela_11['Liga'] == 'UKR') | (tabela_11['Liga'] == 'BEL1') 
            | (tabela_11['Liga'] == 'CHN') | (tabela_11['Liga'] == 'DEN') | (tabela_11['Liga'] == 'GRE') | (tabela_11['Liga'] == 'HOL') 
            | (tabela_11['Liga'] == 'JAP') | (tabela_11['Liga'] == 'MEX') | (tabela_11['Liga'] == 'SAUD') | (tabela_11['Liga'] == 'TUR') 
            | (tabela_11['Liga'] == 'UAE') | (tabela_11['Liga'] == 'USA') | (tabela_11['Liga'] == 'ITA2') | (tabela_11['Liga'] == 'GER2') 
            | (tabela_11['Liga'] == 'POR2') | (tabela_11['Liga'] == 'BUL') | (tabela_11['Liga'] == 'AUT') | (tabela_11['Liga'] == 'QAT') 
            | (tabela_11['Liga'] == 'BRA1') | (tabela_11['Liga'] == 'ARG1')]

        tabela_12 = pd.read_csv("PlayerAnalysis_Role_16_Full.csv")
        tabela_12 = tabela_12.loc[(tabela_12['Nacionalidade']==nacionalidade)&(tabela_12['Fim_Contrato']<=contrato)&(tabela_12['Versão_Temporada']==temporada)]
        tabela_12 = tabela_12.iloc[:, np.r_[19, 36, 40:44]]
        tabela_12 = tabela_12[(tabela_12['Liga'] == 'ENG1') | (tabela_12['Liga'] == 'ENG2') | (tabela_12['Liga'] == 'FRA1') | (tabela_12['Liga'] == 'FRA2') 
            | (tabela_12['Liga'] == 'SPA1') | (tabela_12['Liga'] == 'ITA1') | (tabela_12['Liga'] == 'GER1') | (tabela_12['Liga'] == 'POR1') 
            | (tabela_12['Liga'] == 'SWZ') | (tabela_12['Liga'] == 'RUS') | (tabela_12['Liga'] == 'UKR') | (tabela_12['Liga'] == 'BEL1') 
            | (tabela_12['Liga'] == 'CHN') | (tabela_12['Liga'] == 'DEN') | (tabela_12['Liga'] == 'GRE') | (tabela_12['Liga'] == 'HOL') 
            | (tabela_12['Liga'] == 'JAP') | (tabela_12['Liga'] == 'MEX') | (tabela_12['Liga'] == 'SAUD') | (tabela_12['Liga'] == 'TUR') 
            | (tabela_12['Liga'] == 'UAE') | (tabela_12['Liga'] == 'USA') | (tabela_12['Liga'] == 'ITA2') | (tabela_12['Liga'] == 'GER2') 
            | (tabela_12['Liga'] == 'POR2') | (tabela_12['Liga'] == 'BUL') | (tabela_12['Liga'] == 'AUT') | (tabela_12['Liga'] == 'QAT') 
            | (tabela_12['Liga'] == 'BRA1') | (tabela_12['Liga'] == 'ARG1')]

        tabela_11 = pd.merge(tabela_11, tabela_12[['Atleta', 'L_Rating', 'L_Ranking', 'L_Percentil', 'Size']], on="Atleta", how="left")
        tabela_11 = tabela_11.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Versão_Temporada':'Janela de Análise', 
                                            'L_Rating':'Rating', 'L_Ranking':'Ranking', 'L_Percentil':'Percentil', 'Size':'Qtde Atletas',
                                            'Valor_Mercado': 'Valor'})

        tabela_11 = tabela_11.sort_values(by='Rating', ascending=False)
        st.markdown("<h4 style='text-align: center;'><br><b>Meias Atacantes </b></h4>", unsafe_allow_html=True)
        #st.dataframe(tabela_11, use_container_width=True, hide_index=True)

        # Styling DataFrame using Pandas
        def style_table(df):
            df = df.reset_index(drop=True)
            # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
            formatter = {"Rating": "{:.3f}", "Idade": "{:.0f}"}  # Format the 'Rating' column to 3 decimal places
            #formatter = {"Idade": "{:.0f}"}
            return df.style.format(formatter).set_table_styles(
                [{
                    'selector': 'thead th',
                    'props': [('font-weight', 'bold'),
                            ('border-style', 'solid'),
                            ('border-width', '0px 0px 2px 0px'),
                            ('border-color', 'black')]
                }, {
                    'selector': 'thead th:not(:first-child)',
                    'props': [('text-align', 'center')]  # Centering all headers except the first
                }, {
                    'selector': 'thead th:last-child',
                    'props': [('color', 'black')]  # Make last column header black
                }, {
                    'selector': 'td',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'center')]
                }, {
                    'selector': 'th',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'left')]
                }]
            ).set_properties(**{'padding': '2px',
                                'font-size': '15px'})

        # Displaying in Streamlit
        def main():
            #st.title("Your DataFrame")

            # Convert the styled DataFrame to HTML without the index and display it
            styled_html = style_table(tabela_11).to_html(escape=False, index=False, hide_index=True)
            st.markdown(styled_html, unsafe_allow_html=True)

        if __name__ == '__main__':
            main()

###############################################################################################################################
###############################################################################################################################

    elif posição == ("Extremo"):
        st.markdown("<h4 style='text-align: center;'>Free Agents Nacionais Mais Bem Ranqueados<br>Extremos </b></h4>", unsafe_allow_html=True)
        tabela_9 = pd.read_csv("17_Role_Extremo_Organizador_Full.csv")
        tabela_9 = tabela_9.loc[(tabela_9['Nacionalidade']==nacionalidade)&(tabela_9['Fim_Contrato']<=contrato)&(tabela_9['Versão_Temporada']==temporada)]   
        tabela_9 = tabela_9.iloc[:, np.r_[1, 3, 4, 7, 15, 9:12, 31]]
        tabela_9 = tabela_9[(tabela_9['Liga'] == 'ENG1') | (tabela_9['Liga'] == 'ENG2') | (tabela_9['Liga'] == 'FRA1') | (tabela_9['Liga'] == 'FRA2') 
            | (tabela_9['Liga'] == 'SPA1') | (tabela_9['Liga'] == 'ITA1') | (tabela_9['Liga'] == 'GER1') | (tabela_9['Liga'] == 'POR1') 
            | (tabela_9['Liga'] == 'SWZ') | (tabela_9['Liga'] == 'RUS') | (tabela_9['Liga'] == 'UKR') | (tabela_9['Liga'] == 'BEL1') 
            | (tabela_9['Liga'] == 'CHN') | (tabela_9['Liga'] == 'DEN') | (tabela_9['Liga'] == 'GRE') | (tabela_9['Liga'] == 'HOL') 
            | (tabela_9['Liga'] == 'JAP') | (tabela_9['Liga'] == 'MEX') | (tabela_9['Liga'] == 'SAUD') | (tabela_9['Liga'] == 'TUR') 
            | (tabela_9['Liga'] == 'UAE') | (tabela_9['Liga'] == 'USA') | (tabela_9['Liga'] == 'ITA2') | (tabela_9['Liga'] == 'GER2') 
            | (tabela_9['Liga'] == 'POR2') | (tabela_9['Liga'] == 'BUL') | (tabela_9['Liga'] == 'AUT') | (tabela_9['Liga'] == 'QAT') 
            | (tabela_9['Liga'] == 'BRA1') | (tabela_9['Liga'] == 'ARG1')]

        tabela_10 = pd.read_csv("PlayerAnalysis_Role_17_Full.csv")
        tabela_10 = tabela_10.loc[(tabela_10['Nacionalidade']==nacionalidade)&(tabela_10['Fim_Contrato']<=contrato)&(tabela_10['Versão_Temporada']==temporada)]
        tabela_10 = tabela_10.iloc[:, np.r_[15, 32, 36:40]]
        tabela_10 = tabela_10[(tabela_10['Liga'] == 'ENG1') | (tabela_10['Liga'] == 'ENG2') | (tabela_10['Liga'] == 'FRA1') | (tabela_10['Liga'] == 'FRA2') 
            | (tabela_10['Liga'] == 'SPA1') | (tabela_10['Liga'] == 'ITA1') | (tabela_10['Liga'] == 'GER1') | (tabela_10['Liga'] == 'POR1') 
            | (tabela_10['Liga'] == 'SWZ') | (tabela_10['Liga'] == 'RUS') | (tabela_10['Liga'] == 'UKR') | (tabela_10['Liga'] == 'BEL1') 
            | (tabela_10['Liga'] == 'CHN') | (tabela_10['Liga'] == 'DEN') | (tabela_10['Liga'] == 'GRE') | (tabela_10['Liga'] == 'HOL') 
            | (tabela_10['Liga'] == 'JAP') | (tabela_10['Liga'] == 'MEX') | (tabela_10['Liga'] == 'SAUD') | (tabela_10['Liga'] == 'TUR') 
            | (tabela_10['Liga'] == 'UAE') | (tabela_10['Liga'] == 'USA') | (tabela_10['Liga'] == 'ITA2') | (tabela_10['Liga'] == 'GER2') 
            | (tabela_10['Liga'] == 'POR2') | (tabela_10['Liga'] == 'BUL') | (tabela_10['Liga'] == 'AUT') | (tabela_10['Liga'] == 'QAT') 
            | (tabela_10['Liga'] == 'BRA1') | (tabela_10['Liga'] == 'ARG1')]

        tabela_9 = pd.merge(tabela_9, tabela_10[['Atleta', 'L_Rating', 'L_Ranking', 'L_Percentil', 'Size']], on="Atleta", how="left")
        tabela_9 = tabela_9.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Versão_Temporada':'Janela de Análise', 
                                            'L_Rating':'Rating', 'L_Ranking':'Ranking', 'L_Percentil':'Percentil', 'Size':'Qtde Atletas',
                                            'Valor_Mercado': 'Valor'})
        tabela_9 = tabela_9.sort_values(by='Rating', ascending=False)
        st.markdown("<h4 style='text-align: center;'><b>Extremos Organizadores </b></h4>", unsafe_allow_html=True)
        #st.dataframe(tabela_9, use_container_width=True, hide_index=True)

        # Styling DataFrame using Pandas
        def style_table(df):
            df = df.reset_index(drop=True)
            # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
            formatter = {"Rating": "{:.3f}", "Idade": "{:.0f}"}  # Format the 'Rating' column to 3 decimal places
            #formatter = {"Idade": "{:.0f}"}
            return df.style.format(formatter).set_table_styles(
                [{
                    'selector': 'thead th',
                    'props': [('font-weight', 'bold'),
                            ('border-style', 'solid'),
                            ('border-width', '0px 0px 2px 0px'),
                            ('border-color', 'black')]
                }, {
                    'selector': 'thead th:not(:first-child)',
                    'props': [('text-align', 'center')]  # Centering all headers except the first
                }, {
                    'selector': 'thead th:last-child',
                    'props': [('color', 'black')]  # Make last column header black
                }, {
                    'selector': 'td',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'center')]
                }, {
                    'selector': 'th',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'left')]
                }]
            ).set_properties(**{'padding': '2px',
                                'font-size': '15px'})

        # Displaying in Streamlit
        def main():
            #st.title("Your DataFrame")

            # Convert the styled DataFrame to HTML without the index and display it
            styled_html = style_table(tabela_9).to_html(escape=False, index=False, hide_index=True)
            st.markdown(styled_html, unsafe_allow_html=True)

        if __name__ == '__main__':
            main()


        tabela_11 = pd.read_csv("18_Role_Extremo_Tático_Full.csv")
        tabela_11 = tabela_11.loc[(tabela_11['Nacionalidade']==nacionalidade)&(tabela_11['Fim_Contrato']<=contrato)&(tabela_11['Versão_Temporada']==temporada)]   
        tabela_11 = tabela_11.iloc[:, np.r_[1, 3, 4, 7, 15, 9:12, 25]]
        tabela_11 = tabela_11[(tabela_11['Liga'] == 'ENG1') | (tabela_11['Liga'] == 'ENG2') | (tabela_11['Liga'] == 'FRA1') | (tabela_11['Liga'] == 'FRA2') 
            | (tabela_11['Liga'] == 'SPA1') | (tabela_11['Liga'] == 'ITA1') | (tabela_11['Liga'] == 'GER1') | (tabela_11['Liga'] == 'POR1') 
            | (tabela_11['Liga'] == 'SWZ') | (tabela_11['Liga'] == 'RUS') | (tabela_11['Liga'] == 'UKR') | (tabela_11['Liga'] == 'BEL1') 
            | (tabela_11['Liga'] == 'CHN') | (tabela_11['Liga'] == 'DEN') | (tabela_11['Liga'] == 'GRE') | (tabela_11['Liga'] == 'HOL') 
            | (tabela_11['Liga'] == 'JAP') | (tabela_11['Liga'] == 'MEX') | (tabela_11['Liga'] == 'SAUD') | (tabela_11['Liga'] == 'TUR') 
            | (tabela_11['Liga'] == 'UAE') | (tabela_11['Liga'] == 'USA') | (tabela_11['Liga'] == 'ITA2') | (tabela_11['Liga'] == 'GER2') 
            | (tabela_11['Liga'] == 'POR2') | (tabela_11['Liga'] == 'BUL') | (tabela_11['Liga'] == 'AUT') | (tabela_11['Liga'] == 'QAT') 
            | (tabela_11['Liga'] == 'BRA1') | (tabela_11['Liga'] == 'ARG1')]

        tabela_12 = pd.read_csv("PlayerAnalysis_Role_18_Full.csv")
        tabela_12 = tabela_12.loc[(tabela_12['Nacionalidade']==nacionalidade)&(tabela_12['Fim_Contrato']<=contrato)&(tabela_12['Versão_Temporada']==temporada)]
        tabela_12 = tabela_12.iloc[:, np.r_[9, 26, 30:34]]
        tabela_12 = tabela_12[(tabela_12['Liga'] == 'ENG1') | (tabela_12['Liga'] == 'ENG2') | (tabela_12['Liga'] == 'FRA1') | (tabela_12['Liga'] == 'FRA2') 
            | (tabela_12['Liga'] == 'SPA1') | (tabela_12['Liga'] == 'ITA1') | (tabela_12['Liga'] == 'GER1') | (tabela_12['Liga'] == 'POR1') 
            | (tabela_12['Liga'] == 'SWZ') | (tabela_12['Liga'] == 'RUS') | (tabela_12['Liga'] == 'UKR') | (tabela_12['Liga'] == 'BEL1') 
            | (tabela_12['Liga'] == 'CHN') | (tabela_12['Liga'] == 'DEN') | (tabela_12['Liga'] == 'GRE') | (tabela_12['Liga'] == 'HOL') 
            | (tabela_12['Liga'] == 'JAP') | (tabela_12['Liga'] == 'MEX') | (tabela_12['Liga'] == 'SAUD') | (tabela_12['Liga'] == 'TUR') 
            | (tabela_12['Liga'] == 'UAE') | (tabela_12['Liga'] == 'USA') | (tabela_12['Liga'] == 'ITA2') | (tabela_12['Liga'] == 'GER2') 
            | (tabela_12['Liga'] == 'POR2') | (tabela_12['Liga'] == 'BUL') | (tabela_12['Liga'] == 'AUT') | (tabela_12['Liga'] == 'QAT')
            | (tabela_12['Liga'] == 'BRA1') | (tabela_12['Liga'] == 'ARG1')]

        tabela_11 = pd.merge(tabela_11, tabela_12[['Atleta', 'L_Rating', 'L_Ranking', 'L_Percentil', 'Size']], on="Atleta", how="left")
        tabela_11 = tabela_11.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Versão_Temporada':'Janela de Análise', 
                                            'L_Rating':'Rating', 'L_Ranking':'Ranking', 'L_Percentil':'Percentil', 'Size':'Qtde Atletas',
                                            'Valor_Mercado': 'Valor'})

        tabela_11 = tabela_11.sort_values(by='Rating', ascending=False)
        st.markdown("<h4 style='text-align: center;'><br><b>Extremos Táticos </b></h4>", unsafe_allow_html=True)
        #st.dataframe(tabela_11, use_container_width=True, hide_index=True)

        # Styling DataFrame using Pandas
        def style_table(df):
            df = df.reset_index(drop=True)
            # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
            formatter = {"Rating": "{:.3f}", "Idade": "{:.0f}"}  # Format the 'Rating' column to 3 decimal places
            #formatter = {"Idade": "{:.0f}"}
            return df.style.format(formatter).set_table_styles(
                [{
                    'selector': 'thead th',
                    'props': [('font-weight', 'bold'),
                            ('border-style', 'solid'),
                            ('border-width', '0px 0px 2px 0px'),
                            ('border-color', 'black')]
                }, {
                    'selector': 'thead th:not(:first-child)',
                    'props': [('text-align', 'center')]  # Centering all headers except the first
                }, {
                    'selector': 'thead th:last-child',
                    'props': [('color', 'black')]  # Make last column header black
                }, {
                    'selector': 'td',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'center')]
                }, {
                    'selector': 'th',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'left')]
                }]
            ).set_properties(**{'padding': '2px',
                                'font-size': '15px'})

        # Displaying in Streamlit
        def main():
            #st.title("Your DataFrame")

            # Convert the styled DataFrame to HTML without the index and display it
            styled_html = style_table(tabela_11).to_html(escape=False, index=False, hide_index=True)
            st.markdown(styled_html, unsafe_allow_html=True)

        if __name__ == '__main__':
            main()

        tabela_13 = pd.read_csv("19_Role_Extremo_Agudo_Full.csv")
        tabela_13 = tabela_13.loc[(tabela_13['Nacionalidade']==nacionalidade)&(tabela_13['Fim_Contrato']<=contrato)&(tabela_13['Versão_Temporada']==temporada)]   
        tabela_13 = tabela_13.iloc[:, np.r_[1, 3, 4, 7, 15, 9:12, 31]]
        tabela_13 = tabela_13[(tabela_13['Liga'] == 'ENG1') | (tabela_13['Liga'] == 'ENG2') | (tabela_13['Liga'] == 'FRA1') | (tabela_13['Liga'] == 'FRA2') 
            | (tabela_13['Liga'] == 'SPA1') | (tabela_13['Liga'] == 'ITA1') | (tabela_13['Liga'] == 'GER1') | (tabela_13['Liga'] == 'POR1') 
            | (tabela_13['Liga'] == 'SWZ') | (tabela_13['Liga'] == 'RUS') | (tabela_13['Liga'] == 'UKR') | (tabela_13['Liga'] == 'BEL1') 
            | (tabela_13['Liga'] == 'CHN') | (tabela_13['Liga'] == 'DEN') | (tabela_13['Liga'] == 'GRE') | (tabela_13['Liga'] == 'HOL') 
            | (tabela_13['Liga'] == 'JAP') | (tabela_13['Liga'] == 'MEX') | (tabela_13['Liga'] == 'SAUD') | (tabela_13['Liga'] == 'TUR') 
            | (tabela_13['Liga'] == 'UAE') | (tabela_13['Liga'] == 'USA') | (tabela_13['Liga'] == 'ITA2') | (tabela_13['Liga'] == 'GER2') 
            | (tabela_13['Liga'] == 'POR2') | (tabela_13['Liga'] == 'BUL') | (tabela_13['Liga'] == 'AUT') | (tabela_13['Liga'] == 'QAT')
            | (tabela_13['Liga'] == 'BRA1') | (tabela_13['Liga'] == 'ARG1')]

        tabela_14 = pd.read_csv("PlayerAnalysis_Role_19_Full.csv")
        tabela_14 = tabela_14.loc[(tabela_14['Nacionalidade']==nacionalidade)&(tabela_14['Fim_Contrato']<=contrato)&(tabela_14['Versão_Temporada']==temporada)]
        tabela_14 = tabela_14.iloc[:, np.r_[15, 32, 36:40]]
        tabela_14 = tabela_14[(tabela_14['Liga'] == 'ENG1') | (tabela_14['Liga'] == 'ENG2') | (tabela_14['Liga'] == 'FRA1') | (tabela_14['Liga'] == 'FRA2') 
            | (tabela_14['Liga'] == 'SPA1') | (tabela_14['Liga'] == 'ITA1') | (tabela_14['Liga'] == 'GER1') | (tabela_14['Liga'] == 'POR1') 
            | (tabela_14['Liga'] == 'SWZ') | (tabela_14['Liga'] == 'RUS') | (tabela_14['Liga'] == 'UKR') | (tabela_14['Liga'] == 'BEL1') 
            | (tabela_14['Liga'] == 'CHN') | (tabela_14['Liga'] == 'DEN') | (tabela_14['Liga'] == 'GRE') | (tabela_14['Liga'] == 'HOL') 
            | (tabela_14['Liga'] == 'JAP') | (tabela_14['Liga'] == 'MEX') | (tabela_14['Liga'] == 'SAUD') | (tabela_14['Liga'] == 'TUR') 
            | (tabela_14['Liga'] == 'UAE') | (tabela_14['Liga'] == 'USA') | (tabela_14['Liga'] == 'ITA2') | (tabela_14['Liga'] == 'GER2') 
            | (tabela_14['Liga'] == 'POR2') | (tabela_14['Liga'] == 'BUL') | (tabela_14['Liga'] == 'AUT') | (tabela_14['Liga'] == 'QAT') 
            | (tabela_14['Liga'] == 'BRA1') | (tabela_14['Liga'] == 'ARG1')]

        tabela_13 = pd.merge(tabela_13, tabela_14[['Atleta', 'L_Rating', 'L_Ranking', 'L_Percentil', 'Size']], on="Atleta", how="left")
        tabela_13 = tabela_13.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Versão_Temporada':'Janela de Análise', 
                                            'L_Rating':'Rating', 'L_Ranking':'Ranking', 'L_Percentil':'Percentil', 'Size':'Qtde Atletas',
                                            'Valor_Mercado': 'Valor'})
        tabela_13 = tabela_13.sort_values(by='Rating', ascending=False)
        st.markdown("<h4 style='text-align: center;'><br><b>Extremos Agudos </b></h4>", unsafe_allow_html=True)
        #st.dataframe(tabela_13, use_container_width=True, hide_index=True)

        # Styling DataFrame using Pandas
        def style_table(df):
            df = df.reset_index(drop=True)
            # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
            formatter = {"Rating": "{:.3f}", "Idade": "{:.0f}"}  # Format the 'Rating' column to 3 decimal places
            #formatter = {"Idade": "{:.0f}"}
            return df.style.format(formatter).set_table_styles(
                [{
                    'selector': 'thead th',
                    'props': [('font-weight', 'bold'),
                            ('border-style', 'solid'),
                            ('border-width', '0px 0px 2px 0px'),
                            ('border-color', 'black')]
                }, {
                    'selector': 'thead th:not(:first-child)',
                    'props': [('text-align', 'center')]  # Centering all headers except the first
                }, {
                    'selector': 'thead th:last-child',
                    'props': [('color', 'black')]  # Make last column header black
                }, {
                    'selector': 'td',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'center')]
                }, {
                    'selector': 'th',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'left')]
                }]
            ).set_properties(**{'padding': '2px',
                                'font-size': '15px'})

        # Displaying in Streamlit
        def main():
            #st.title("Your DataFrame")

            # Convert the styled DataFrame to HTML without the index and display it
            styled_html = style_table(tabela_13).to_html(escape=False, index=False, hide_index=True)
            st.markdown(styled_html, unsafe_allow_html=True)

        if __name__ == '__main__':
            main()

###############################################################################################################################
###############################################################################################################################

    elif posição == ("Atacante"):
        st.markdown("<h4 style='text-align: center;'>Free Agents Nacionais Mais Bem Ranqueados<br>Atacantes </b></h4>", unsafe_allow_html=True)
        tabela_9 = pd.read_csv("20_Role_Atacante_Referência_Full.csv")
        tabela_9 = tabela_9.loc[(tabela_9['Nacionalidade']==nacionalidade)&(tabela_9['Fim_Contrato']<=contrato)&(tabela_9['Versão_Temporada']==temporada)]   
        tabela_9 = tabela_9.iloc[:, np.r_[1, 3, 4, 7, 15, 9:12, 28]]
        tabela_9 = tabela_9[(tabela_9['Liga'] == 'ENG1') | (tabela_9['Liga'] == 'ENG2') | (tabela_9['Liga'] == 'FRA1') | (tabela_9['Liga'] == 'FRA2') 
            | (tabela_9['Liga'] == 'SPA1') | (tabela_9['Liga'] == 'ITA1') | (tabela_9['Liga'] == 'GER1') | (tabela_9['Liga'] == 'POR1') 
            | (tabela_9['Liga'] == 'SWZ') | (tabela_9['Liga'] == 'RUS') | (tabela_9['Liga'] == 'UKR') | (tabela_9['Liga'] == 'BEL1') 
            | (tabela_9['Liga'] == 'CHN') | (tabela_9['Liga'] == 'DEN') | (tabela_9['Liga'] == 'GRE') | (tabela_9['Liga'] == 'HOL') 
            | (tabela_9['Liga'] == 'JAP') | (tabela_9['Liga'] == 'MEX') | (tabela_9['Liga'] == 'SAUD') | (tabela_9['Liga'] == 'TUR') 
            | (tabela_9['Liga'] == 'UAE') | (tabela_9['Liga'] == 'USA') | (tabela_9['Liga'] == 'ITA2') | (tabela_9['Liga'] == 'GER2') 
            | (tabela_9['Liga'] == 'POR2') | (tabela_9['Liga'] == 'BUL') | (tabela_9['Liga'] == 'AUT') | (tabela_9['Liga'] == 'QAT') 
            | (tabela_9['Liga'] == 'BRA1') | (tabela_9['Liga'] == 'ARG1')]

        tabela_10 = pd.read_csv("PlayerAnalysis_Role_20_Full.csv")
        tabela_10 = tabela_10.loc[(tabela_10['Nacionalidade']==nacionalidade)&(tabela_10['Fim_Contrato']<=contrato)&(tabela_10['Versão_Temporada']==temporada)]
        tabela_10 = tabela_10.iloc[:, np.r_[12, 29, 33:37]]
        tabela_10 = tabela_10[(tabela_10['Liga'] == 'ENG1') | (tabela_10['Liga'] == 'ENG2') | (tabela_10['Liga'] == 'FRA1') | (tabela_10['Liga'] == 'FRA2') 
            | (tabela_10['Liga'] == 'SPA1') | (tabela_10['Liga'] == 'ITA1') | (tabela_10['Liga'] == 'GER1') | (tabela_10['Liga'] == 'POR1') 
            | (tabela_10['Liga'] == 'SWZ') | (tabela_10['Liga'] == 'RUS') | (tabela_10['Liga'] == 'UKR') | (tabela_10['Liga'] == 'BEL1') 
            | (tabela_10['Liga'] == 'CHN') | (tabela_10['Liga'] == 'DEN') | (tabela_10['Liga'] == 'GRE') | (tabela_10['Liga'] == 'HOL') 
            | (tabela_10['Liga'] == 'JAP') | (tabela_10['Liga'] == 'MEX') | (tabela_10['Liga'] == 'SAUD') | (tabela_10['Liga'] == 'TUR') 
            | (tabela_10['Liga'] == 'UAE') | (tabela_10['Liga'] == 'USA') | (tabela_10['Liga'] == 'ITA2') | (tabela_10['Liga'] == 'GER2') 
            | (tabela_10['Liga'] == 'POR2') | (tabela_10['Liga'] == 'BUL') | (tabela_10['Liga'] == 'AUT') | (tabela_10['Liga'] == 'QAT') 
            | (tabela_10['Liga'] == 'BRA1') | (tabela_10['Liga'] == 'ARG1')]

        tabela_9 = pd.merge(tabela_9, tabela_10[['Atleta', 'L_Rating', 'L_Ranking', 'L_Percentil', 'Size']], on="Atleta", how="left")
        tabela_9 = tabela_9.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Versão_Temporada':'Janela de Análise', 
                                            'L_Rating':'Rating', 'L_Ranking':'Ranking', 'L_Percentil':'Percentil', 'Size':'Qtde Atletas',
                                            'Valor_Mercado': 'Valor'})
        tabela_9 = tabela_9.sort_values(by='Rating', ascending=False)
        st.markdown("<h4 style='text-align: center;'>Atacantes Referência </b></h4>", unsafe_allow_html=True)
        #st.dataframe(tabela_9, use_container_width=True, hide_index=True)

        # Styling DataFrame using Pandas
        def style_table(df):
            df = df.reset_index(drop=True)
            # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
            formatter = {"Rating": "{:.3f}", "Idade": "{:.0f}"}  # Format the 'Rating' column to 3 decimal places
            #formatter = {"Idade": "{:.0f}"}
            return df.style.format(formatter).set_table_styles(
                [{
                    'selector': 'thead th',
                    'props': [('font-weight', 'bold'),
                            ('border-style', 'solid'),
                            ('border-width', '0px 0px 2px 0px'),
                            ('border-color', 'black')]
                }, {
                    'selector': 'thead th:not(:first-child)',
                    'props': [('text-align', 'center')]  # Centering all headers except the first
                }, {
                    'selector': 'thead th:last-child',
                    'props': [('color', 'black')]  # Make last column header black
                }, {
                    'selector': 'td',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'center')]
                }, {
                    'selector': 'th',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'left')]
                }]
            ).set_properties(**{'padding': '2px',
                                'font-size': '15px'})

        # Displaying in Streamlit
        def main():
            #st.title("Your DataFrame")

            # Convert the styled DataFrame to HTML without the index and display it
            styled_html = style_table(tabela_9).to_html(escape=False, index=False, hide_index=True)
            st.markdown(styled_html, unsafe_allow_html=True)

        if __name__ == '__main__':
            main()


        tabela_11 = pd.read_csv("21_Role_Atacante_Móvel_Full.csv")
        tabela_11 = tabela_11.loc[(tabela_11['Nacionalidade']==nacionalidade)&(tabela_11['Fim_Contrato']<=contrato)&(tabela_11['Versão_Temporada']==temporada)]   
        tabela_11 = tabela_11.iloc[:, np.r_[1, 3, 4, 7, 15, 9:12, 27]]
        tabela_11 = tabela_11[(tabela_11['Liga'] == 'ENG1') | (tabela_11['Liga'] == 'ENG2') | (tabela_11['Liga'] == 'FRA1') | (tabela_11['Liga'] == 'FRA2') 
            | (tabela_11['Liga'] == 'SPA1') | (tabela_11['Liga'] == 'ITA1') | (tabela_11['Liga'] == 'GER1') | (tabela_11['Liga'] == 'POR1') 
            | (tabela_11['Liga'] == 'SWZ') | (tabela_11['Liga'] == 'RUS') | (tabela_11['Liga'] == 'UKR') | (tabela_11['Liga'] == 'BEL1') 
            | (tabela_11['Liga'] == 'CHN') | (tabela_11['Liga'] == 'DEN') | (tabela_11['Liga'] == 'GRE') | (tabela_11['Liga'] == 'HOL') 
            | (tabela_11['Liga'] == 'JAP') | (tabela_11['Liga'] == 'MEX') | (tabela_11['Liga'] == 'SAUD') | (tabela_11['Liga'] == 'TUR') 
            | (tabela_11['Liga'] == 'UAE') | (tabela_11['Liga'] == 'USA') | (tabela_11['Liga'] == 'ITA2') | (tabela_11['Liga'] == 'GER2') 
            | (tabela_11['Liga'] == 'POR2') | (tabela_11['Liga'] == 'BUL') | (tabela_11['Liga'] == 'AUT') | (tabela_11['Liga'] == 'QAT') 
            | (tabela_11['Liga'] == 'BRA1') | (tabela_11['Liga'] == 'ARG1')]

        tabela_12 = pd.read_csv("PlayerAnalysis_Role_21_Full.csv")
        tabela_12 = tabela_12.loc[(tabela_12['Nacionalidade']==nacionalidade)&(tabela_12['Fim_Contrato']<=contrato)&(tabela_12['Versão_Temporada']==temporada)]
        tabela_12 = tabela_12.iloc[:, np.r_[11, 28, 32:36]]
        tabela_12 = tabela_12[(tabela_12['Liga'] == 'ENG1') | (tabela_12['Liga'] == 'ENG2') | (tabela_12['Liga'] == 'FRA1') | (tabela_12['Liga'] == 'FRA2') 
            | (tabela_12['Liga'] == 'SPA1') | (tabela_12['Liga'] == 'ITA1') | (tabela_12['Liga'] == 'GER1') | (tabela_12['Liga'] == 'POR1') 
            | (tabela_12['Liga'] == 'SWZ') | (tabela_12['Liga'] == 'RUS') | (tabela_12['Liga'] == 'UKR') | (tabela_12['Liga'] == 'BEL1') 
            | (tabela_12['Liga'] == 'CHN') | (tabela_12['Liga'] == 'DEN') | (tabela_12['Liga'] == 'GRE') | (tabela_12['Liga'] == 'HOL') 
            | (tabela_12['Liga'] == 'JAP') | (tabela_12['Liga'] == 'MEX') | (tabela_12['Liga'] == 'SAUD') | (tabela_12['Liga'] == 'TUR') 
            | (tabela_12['Liga'] == 'UAE') | (tabela_12['Liga'] == 'USA') | (tabela_12['Liga'] == 'ITA2') | (tabela_12['Liga'] == 'GER2') 
            | (tabela_12['Liga'] == 'POR2') | (tabela_12['Liga'] == 'BUL') | (tabela_12['Liga'] == 'AUT') | (tabela_12['Liga'] == 'QAT') 
            | (tabela_12['Liga'] == 'BRA1') | (tabela_12['Liga'] == 'ARG1')]

        tabela_11 = pd.merge(tabela_11, tabela_12[['Atleta', 'L_Rating', 'L_Ranking', 'L_Percentil', 'Size']], on="Atleta", how="left")
        tabela_11 = tabela_11.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Versão_Temporada':'Janela de Análise', 
                                            'L_Rating':'Rating', 'L_Ranking':'Ranking', 'L_Percentil':'Percentil', 'Size':'Qtde Atletas',
                                            'Valor_Mercado': 'Valor'})

        tabela_11 = tabela_11.sort_values(by='Rating', ascending=False)
        st.markdown("<h4 style='text-align: center;'><br><b>Atacantes Móveis </b></h4>", unsafe_allow_html=True)
        #st.dataframe(tabela_11, use_container_width=True, hide_index=True)

        # Styling DataFrame using Pandas
        def style_table(df):
            df = df.reset_index(drop=True)
            # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
            formatter = {"Rating": "{:.3f}", "Idade": "{:.0f}"}  # Format the 'Rating' column to 3 decimal places
            #formatter = {"Idade": "{:.0f}"}
            return df.style.format(formatter).set_table_styles(
                [{
                    'selector': 'thead th',
                    'props': [('font-weight', 'bold'),
                            ('border-style', 'solid'),
                            ('border-width', '0px 0px 2px 0px'),
                            ('border-color', 'black')]
                }, {
                    'selector': 'thead th:not(:first-child)',
                    'props': [('text-align', 'center')]  # Centering all headers except the first
                }, {
                    'selector': 'thead th:last-child',
                    'props': [('color', 'black')]  # Make last column header black
                }, {
                    'selector': 'td',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'center')]
                }, {
                    'selector': 'th',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'left')]
                }]
            ).set_properties(**{'padding': '2px',
                                'font-size': '15px'})

        # Displaying in Streamlit
        def main():
            #st.title("Your DataFrame")

            # Convert the styled DataFrame to HTML without the index and display it
            styled_html = style_table(tabela_11).to_html(escape=False, index=False, hide_index=True)
            st.markdown(styled_html, unsafe_allow_html=True)

        if __name__ == '__main__':
            main()


        tabela_13 = pd.read_csv("22_Role_Segundo_Atacante_Full.csv")
        tabela_13 = tabela_13.loc[(tabela_13['Nacionalidade']==nacionalidade)&(tabela_13['Fim_Contrato']<=contrato)&(tabela_13['Versão_Temporada']==temporada)]   
        tabela_13 = tabela_13.iloc[:, np.r_[1, 3, 4, 7, 15, 9:12, 31]]
        tabela_13 = tabela_13[(tabela_13['Liga'] == 'ENG1') | (tabela_13['Liga'] == 'ENG2') | (tabela_13['Liga'] == 'FRA1') | (tabela_13['Liga'] == 'FRA2') 
            | (tabela_13['Liga'] == 'SPA1') | (tabela_13['Liga'] == 'ITA1') | (tabela_13['Liga'] == 'GER1') | (tabela_13['Liga'] == 'POR1') 
            | (tabela_13['Liga'] == 'SWZ') | (tabela_13['Liga'] == 'RUS') | (tabela_13['Liga'] == 'UKR') | (tabela_13['Liga'] == 'BEL1') 
            | (tabela_13['Liga'] == 'CHN') | (tabela_13['Liga'] == 'DEN') | (tabela_13['Liga'] == 'GRE') | (tabela_13['Liga'] == 'HOL') 
            | (tabela_13['Liga'] == 'JAP') | (tabela_13['Liga'] == 'MEX') | (tabela_13['Liga'] == 'SAUD') | (tabela_13['Liga'] == 'TUR') 
            | (tabela_13['Liga'] == 'UAE') | (tabela_13['Liga'] == 'USA') | (tabela_13['Liga'] == 'ITA2') | (tabela_13['Liga'] == 'GER2') 
            | (tabela_13['Liga'] == 'POR2') | (tabela_13['Liga'] == 'BUL') | (tabela_13['Liga'] == 'AUT') | (tabela_13['Liga'] == 'QAT') 
            | (tabela_13['Liga'] == 'BRA1') | (tabela_13['Liga'] == 'ARG1')]

        tabela_14 = pd.read_csv("PlayerAnalysis_Role_22_Full.csv")
        tabela_14 = tabela_14.loc[(tabela_14['Nacionalidade']==nacionalidade)&(tabela_14['Fim_Contrato']<=contrato)&(tabela_14['Versão_Temporada']==temporada)]
        tabela_14 = tabela_14.iloc[:, np.r_[15, 32, 36:40]]
        tabela_14 = tabela_14[(tabela_14['Liga'] == 'ENG1') | (tabela_14['Liga'] == 'ENG2') | (tabela_14['Liga'] == 'FRA1') | (tabela_14['Liga'] == 'FRA2') 
            | (tabela_14['Liga'] == 'SPA1') | (tabela_14['Liga'] == 'ITA1') | (tabela_14['Liga'] == 'GER1') | (tabela_14['Liga'] == 'POR1') 
            | (tabela_14['Liga'] == 'SWZ') | (tabela_14['Liga'] == 'RUS') | (tabela_14['Liga'] == 'UKR') | (tabela_14['Liga'] == 'BEL1') 
            | (tabela_14['Liga'] == 'CHN') | (tabela_14['Liga'] == 'DEN') | (tabela_14['Liga'] == 'GRE') | (tabela_14['Liga'] == 'HOL') 
            | (tabela_14['Liga'] == 'JAP') | (tabela_14['Liga'] == 'MEX') | (tabela_14['Liga'] == 'SAUD') | (tabela_14['Liga'] == 'TUR') 
            | (tabela_14['Liga'] == 'UAE') | (tabela_14['Liga'] == 'USA') | (tabela_14['Liga'] == 'ITA2') | (tabela_14['Liga'] == 'GER2') 
            | (tabela_14['Liga'] == 'POR2') | (tabela_14['Liga'] == 'BUL') | (tabela_14['Liga'] == 'AUT') | (tabela_14['Liga'] == 'QAT')
            | (tabela_14['Liga'] == 'BRA1') | (tabela_14['Liga'] == 'ARG1')]

        tabela_13 = pd.merge(tabela_13, tabela_14[['Atleta', 'L_Rating', 'L_Ranking', 'L_Percentil', 'Size']], on="Atleta", how="left")
        tabela_13 = tabela_13.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Versão_Temporada':'Janela de Análise', 
                                            'L_Rating':'Rating', 'L_Ranking':'Ranking', 'L_Percentil':'Percentil', 'Size':'Qtde Atletas',
                                            'Valor_Mercado': 'Valor'})
        tabela_13 = tabela_13.sort_values(by='Rating', ascending=False)
        st.markdown("<h4 style='text-align: center;'><br><b>Segundos Atacantes </b></h4>", unsafe_allow_html=True)
        #st.dataframe(tabela_13, use_container_width=True, hide_index=True)

        # Styling DataFrame using Pandas
        def style_table(df):
            df = df.reset_index(drop=True)
            # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
            formatter = {"Rating": "{:.3f}", "Idade": "{:.0f}"}  # Format the 'Rating' column to 3 decimal places
            #formatter = {"Idade": "{:.0f}"}
            return df.style.format(formatter).set_table_styles(
                [{
                    'selector': 'thead th',
                    'props': [('font-weight', 'bold'),
                            ('border-style', 'solid'),
                            ('border-width', '0px 0px 2px 0px'),
                            ('border-color', 'black')]
                }, {
                    'selector': 'thead th:not(:first-child)',
                    'props': [('text-align', 'center')]  # Centering all headers except the first
                }, {
                    'selector': 'thead th:last-child',
                    'props': [('color', 'black')]  # Make last column header black
                }, {
                    'selector': 'td',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'center')]
                }, {
                    'selector': 'th',
                    'props': [('border-style', 'solid'),
                            ('border-width', '0px 0px 1px 0px'),
                            ('border-color', 'black'),
                            ('text-align', 'left')]
                }]
            ).set_properties(**{'padding': '2px',
                                'font-size': '15px'})

        # Displaying in Streamlit
        def main():
            #st.title("Your DataFrame")

            # Convert the styled DataFrame to HTML without the index and display it
            styled_html = style_table(tabela_13).to_html(escape=False, index=False, hide_index=True)
            st.markdown(styled_html, unsafe_allow_html=True)

        if __name__ == '__main__':
            main()

###############################################################################################################################
###############################################################################################################################
###############################################################################################################################
###############################################################################################################################

if choose == "Ranking de Jogadores":
    st.markdown("<h2 style='text-align: center;'>Ranking de Jogadores</h2>", unsafe_allow_html=True)
    st.markdown("<h3 style='text-align: center;'>2020-2024</h3>", unsafe_allow_html=True)
    jogadores = st.selectbox("Digite o nome de seu jogador. A grafia deve ser exata!", options=jogadores, index=None, placeholder="Jogador")
    if jogadores:
        #Determinar Temporada
        df3 = df.loc[(df['Atleta']==jogadores)]
        temporadas = df3['Versão_Temporada'].unique()
        temporada = st.selectbox("Escolha a Temporada", options=temporadas)
        if temporada:
            #Determinar a Liga
            dfa = df3.loc[(df3['Versão_Temporada']==temporada)]
            ligas = dfa['Liga'].unique()
            liga = st.selectbox("Escolha a Liga", options=ligas)
            if liga:
                df4 = dfa.loc[(dfa['Versão_Temporada']==temporada)&(dfa['Liga']==liga)]
                posição = dfa['Posição'].unique()
                posição = st.selectbox("Escolha a Posição", options=posição)
                if posição == ("Goleiro"):
                    #####################################################################################################################
                    #####################################################################################################################
                    ##################################################################################################################### 
                    #####################################################################################################################
                    # GOLEIRO CLÁSSICO
                    # Elaborar Tabela de Abertura com Rating, Ranking, Percentil
                    tabela_1 = pd.read_csv('PlayerAnalysis_Role_1.csv')
                    tabela_1  = tabela_1.iloc[:, np.r_[9, 14, 26, 30:34, 28, 32, 11]]
                    tabela_1 = tabela_1[(tabela_1['Atleta']==jogadores)&(tabela_1['Código_Posição_Wyscout']==0)&(tabela_1['Versão_Temporada']==temporada)&(tabela_1['Liga']==liga)]
                    clube = tabela_1.iat[0, 9]
                    rating = tabela_1.iat[0, 3]
                    ranking = tabela_1.iat[0,4]
                    percentil = tabela_1.iat[0,6]
                    size = tabela_1.iat[0,5]
                    fontsize = 20
                    # Texto de Abertura
                    markdown_amount_1 = f"<div style='text-align:center; font-size:{fontsize}px'>{jogadores:}</div>"
                    markdown_amount_2 = f"<div style='text-align:center; font-size:{fontsize}px'>{clube:}</div>"
                    st.markdown("<h4 style='text-align: center;'>Jogador Selecionado</b></h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_1, unsafe_allow_html=True)
                    st.markdown(markdown_amount_2, unsafe_allow_html=True)
                    st.markdown("---")
                    #####################################################################################################################
                    #####################################################################################################################
                    # Dados Básicos do Jogador
                    tabela_a  = pd.read_csv("PlayerAnalysis_Role_1.csv")
                    tabela_a = tabela_a.iloc[:, np.r_[9, 11, 15:21, 22:25, 14, 26, 28]]
                    tabela_a = tabela_a[(tabela_a['Atleta']==jogadores)&(tabela_a['Código_Posição_Wyscout']==0)&(tabela_a['Versão_Temporada']==temporada)&(tabela_a['Liga']==liga)]
                    tabela_a  = tabela_a.iloc[:, np.r_[0:3, 4:10]]
                    st.markdown("<h4 style='text-align: center;'>Dados Básicos</b></h4>", unsafe_allow_html=True)
                    #st.dataframe(tabela_a, use_container_width=True, hide_index=True)

                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Valor_Mercado': 'Valor', 'Nacionalidade': 'Nacional'})
                        df = df.reset_index(drop=True)
                        
                        # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                        return df.style.set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px',
                                            'font-size': '15px'})

                    # Displaying in Streamlit
                    def main():
                        # Convert the styled DataFrame to HTML without the index and display it
                        styled_html = style_table(tabela_a).to_html(index=False, escape=False)
                        st.markdown(styled_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    #####################################################################################################################
                    #####################################################################################################################
                    st.markdown("<h3 style='text-align: center;'><br>GOLEIRO CLÁSSICO</b></h3>", unsafe_allow_html=True)
                    # Rating/Ranking/Percentil
                    markdown_amount_3 = f"<div style='text-align:center; font-size:{fontsize}px'>{rating:}</div>"
                    markdown_amount_4 = f"<div style='text-align:center; font-size:{fontsize}px'>{ranking:}</div>"
                    markdown_amount_5 = f"<div style='text-align:center; font-size:{fontsize}px'>{percentil:}</div>"
                    markdown_amount_6 = f"<div style='text-align:center; font-size:{fontsize}px'>(Total de {size:} jogadores na Liga)</div>"
                    st.markdown("<h4 style='text-align: center;'>Rating/Ranking/Percentil do Jogador na Liga/Temporada</h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_6, unsafe_allow_html=True)
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.markdown("<h4 style='text-align: center;'>Rating</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_3, unsafe_allow_html=True)
                    with col2:
                        st.markdown("<h4 style='text-align: center;'>Ranking</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_4, unsafe_allow_html=True)
                    with col3:
                        st.markdown("<h4 style='text-align: center;'>Percentil</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_5, unsafe_allow_html=True)
                    st.markdown("---")
                    ##################################################################################################################### 
                    #####################################################################################################################
                    # #Elaborar Tabela com Métricas do Atleta
                    tabela_2 = pd.read_csv('1_Role_Goleiro.csv')
                    tabela_2 = tabela_2.iloc[:, np.r_[1, 18:25, 6, 25, 27]]
                    tabela_2 = tabela_2[(tabela_2['Atleta']==jogadores)&(tabela_2['Código_Posição_Wyscout']==0)&(tabela_2['Versão_Temporada']==temporada)&(tabela_2['Liga']==liga)]
                    tabela_2  = tabela_2.iloc[:, np.r_[0:8]]
                    tabela_2 = tabela_2.rename(columns={'Interceptações.1':'Interceptações'})
                    tabela_2  = pd.DataFrame(tabela_2)
                    tabela_2 = tabela_2.round(decimals=2)
                    # Média da Liga
                    tabela_b = pd.read_csv('1_Role_Goleiro.csv')
                    tabela_b = tabela_b.iloc[:, np.r_[1, 18:25, 6, 25, 27]]
                    tabela_b = tabela_b[(tabela_b['Código_Posição_Wyscout']==0)&(tabela_b['Versão_Temporada']==temporada)&(tabela_b['Liga']==liga)]
                    tabela_b = tabela_b.iloc[:, np.r_[1:8, 9]]
                    tabela_b = tabela_b.round(decimals=2)
                    tabela_b = tabela_b.rename(columns={'Interceptações.1':'Interceptações'})
                    tabela_c = (tabela_b.groupby('Liga')[['Duelos_Aéreos_Ganhos', 'Defesas', 'Gols_Evitados', 'Saídas', 'Interceptações', 'xG_Evitado', 'Finalizações_por_Gol_Sofrido']].mean())
                    tabela_c = tabela_c.round(decimals=2)
                    Atleta = ['Média da Liga']
                    tabela_c['Atleta'] = Atleta 
                    tabela_c.insert(0, 'Atleta', tabela_c.pop('Atleta'))
                    # Percentil na Liga
                    tabela_d = pd.read_csv('PlayerAnalysis_Role_1.csv')
                    tabela_d = tabela_d.iloc[:, np.r_[48:55, 9, 14, 26, 28]]
                    tabela_d = tabela_d[(tabela_d['Atleta']==jogadores)&(tabela_d['Código_Posição_Wyscout']==0)&(tabela_d['Versão_Temporada']==temporada)&(tabela_d['Liga']==liga)]
                    tabela_d = tabela_d.iloc[:, np.r_[0:7]]
                    tabela_d = tabela_d.rename(columns={'Duelos_Aéreos_Ganhos_Percentil':'Duelos_Aéreos_Ganhos', 'Defesas_Percentil': 'Defesas', 
                                                        'Gols_Evitados_Percentil':'Gols_Evitados', 'Saídas_Percentil': 'Saídas', 
                                                        'Interceptações.1_Percentil': 'Interceptações', 'xG_Evitado_Percentil': 'xG_Evitado', 
                                                        'Finalizações_por_Gol_Sofrido_Percentil': 'Finalizações_por_Gol_Sofrido'})
                    Atleta = ['Percentil na Liga']
                    tabela_d['Atleta'] = Atleta 
                    tabela_d.insert(0, 'Atleta', tabela_d.pop('Atleta'))
                    tabela_2 = pd.concat([tabela_2, tabela_c, tabela_d]).reset_index(drop=True)
                    tabela_2 = tabela_2.transpose()
                    st.markdown("<h4 style='text-align: center;'>Desempenho do Jogador na Liga/Temporada<br></h4>", unsafe_allow_html=True)
                    #st.dataframe(tabela_2, use_container_width=True)

                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index()  # If you want the index to be a visible column
                        new_header = df.iloc[0]  # Capture the first row to use as column headers
                        df = df[1:]  # Remove the first row from the data
                        df.columns = new_header  # Set the new column headers
                        first_column_name = df.columns[1]  # Adjusted for the added index column
                        # Ensure 'Rating' is rounded and formatted to 2 decimal places during styling
                        formatter = {first_column_name: "{:.2f}", "Média da Liga": "{:.2f}", "Percentil na Liga": "{:.0f}"}
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px', 'font-size': '15px', 'margin': 'auto'})  # Adjust this for centering

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML, ensure the index is shown and wrapped in a center-aligned div
                        styled_html = style_table(tabela_2).to_html(escape=False, index=False, hide_index=False)
                        center_html = f"<div style='margin-left: auto; margin-right: auto; width: fit-content;'>{styled_html}</div>"
                        st.markdown(center_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    #####################################################################################################################
                    #####################################################################################################################
                    ##################################################################################################################### 
                    #####################################################################################################################
                    #Plotar Gráfico Alternativo
                    # Player Comparison Data
                    st.markdown("<h4 style='text-align: center;'><br>Comparativo do Jogador com a Média da Liga</h4>", unsafe_allow_html=True)
                    Role_1_Mean_Charts = pd.read_csv('1_Role_Goleiro.csv')
                    #PLOTTING COMPARISON BETWEEN 1 PLAYER AND LEAGUE MEAN
                    #Determining Club and League 
                    Role_x_Mean_Charts  = Role_1_Mean_Charts.iloc[:, np.r_[1, 3, 25, 27, 18:25]]
                    
                    Role_x_Mean_Charts = Role_x_Mean_Charts[(Role_x_Mean_Charts['Versão_Temporada']==temporada)&(Role_x_Mean_Charts['Liga']==liga)]

                    Role_x_Mean_Charts['Duelos_Aéreos_Ganhos_LM'] = Role_x_Mean_Charts['Duelos_Aéreos_Ganhos'].mean()
                    Role_x_Mean_Charts['Defesas_LM'] = Role_x_Mean_Charts['Defesas'].mean()
                    Role_x_Mean_Charts['Gols_Evitados_LM'] = Role_x_Mean_Charts['Gols_Evitados'].mean()
                    Role_x_Mean_Charts['Saídas_LM'] = Role_x_Mean_Charts['Saídas'].mean()
                    Role_x_Mean_Charts['Interceptações_LM'] = Role_x_Mean_Charts['Interceptações.1'].mean()
                    Role_x_Mean_Charts['xG_Evitado_LM'] = Role_x_Mean_Charts['xG_Evitado'].mean()
                    Role_x_Mean_Charts['Finalizações_por_Gol_Sofrido_LM'] = Role_x_Mean_Charts['Finalizações_por_Gol_Sofrido'].mean()
                    Role_x_Mean_Charts  = pd.DataFrame(Role_x_Mean_Charts)
                    
                    Role_y_Mean_Charts  = pd.DataFrame(Role_x_Mean_Charts)
                    Role_y_Mean_Charts = Role_y_Mean_Charts.rename(columns={'Interceptações.1': 'Interceptações'})

                    Role_x_Mean_Charts = Role_x_Mean_Charts[(Role_x_Mean_Charts['Atleta']==jogadores)]
                    
                    #Selecting data to compare 1 player and league mean
                    Role_1_Mean_Charts  = Role_x_Mean_Charts.iloc[:, np.r_[0, 4:11]]

                    #Preparing League Mean Data
                    League_Mean = Role_x_Mean_Charts.iloc[:, np.r_[11:18]]
                    League_Mean['Atleta'] = 'Média da Liga' 
                    League_Mean.insert(0, 'Atleta', League_Mean.pop('Atleta'))
                    League_Mean = League_Mean.rename(columns={'Duelos_Aéreos_Ganhos_LM':'Duelos_Aéreos_Ganhos', 'Defesas_LM': 'Defesas', 
                                                                'Gols_Evitados_LM':'Gols_Evitados', 'Saídas_LM': 'Saídas',  
                                                                'Interceptações_LM': 'Interceptações', 'xG_Evitado_LM': 'xG_Evitado', 
                                                                'Finalizações_por_Gol_Sofrido_LM': 'Finalizações_por_Gol_Sofrido'})
                    #Merging Dataframes
                    #Adjusting Player Dataframe
                    Role_1_Mean_Charts = Role_1_Mean_Charts.rename(columns={'Interceptações.1': 'Interceptações'})    
                    #Concatenating Dataframes
                    Role_1_Mean_Charts = pd.concat([Role_1_Mean_Charts, League_Mean]).reset_index(drop=True)
                    #Role_1_Mean_Charts = Role_1_Mean_Charts.append(League_Mean).reset_index()
                    Role_1_Mean_Charts = Role_1_Mean_Charts.rename(columns={'Interceptações.1': 'Interceptações'})    
                    # Preparing the Graph
                    params = list(Role_1_Mean_Charts.columns)
                    params = params[1:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_y_Mean_Charts[params][x])
                        a = a
                        b = max(Role_y_Mean_Charts[params][x])
                        b = b
                        ranges.append((a, b))

                    for x in range(len(Role_1_Mean_Charts['Atleta'])):
                        if Role_1_Mean_Charts['Atleta'][x] == jogadores:
                            a_values = Role_1_Mean_Charts.iloc[x].values.tolist()
                        if Role_1_Mean_Charts['Atleta'][x] == 'Média da Liga':
                            b_values = Role_1_Mean_Charts.iloc[x].values.tolist()
                                
                    a_values = a_values[1:]
                    b_values = b_values[1:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        title_name_2 = 'Média da Liga',
                        title_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll features are per90'
                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    plt.savefig('Player&League_Comparison.png')
                    st.pyplot(fig)
                    fig.savefig('Player&League_Comparison.png', dpi=600, bbox_inches="tight")

                    #####################################################################################################################
                    #####################################################################################################################
                    ##################################################################################################################### 
                    #####################################################################################################################
                    # GOLEIRO LÍBERO
                    # Elaborar Tabela de Abertura com Rating, Ranking, Percentil
                    tabela_1 = pd.read_csv('PlayerAnalysis_Role_2.csv')
                    tabela_1  = tabela_1.iloc[:, np.r_[12, 17, 29, 33:37, 31, 35, 14]]
                    tabela_1 = tabela_1[(tabela_1['Atleta']==jogadores)&(tabela_1['Código_Posição_Wyscout']==0)&(tabela_1['Versão_Temporada']==temporada)&(tabela_1['Liga']==liga)]
                    clube = tabela_1.iat[0, 9]
                    rating = tabela_1.iat[0, 3]
                    ranking = tabela_1.iat[0,4]
                    percentil = tabela_1.iat[0,6]
                    size = tabela_1.iat[0,5]
                    fontsize = 20
                    #####################################################################################################################
                    st.markdown("<h3 style='text-align: center;'>GOLEIRO LÍBERO</b></h3>", unsafe_allow_html=True)
                    # Rating/Ranking/Percentil
                    markdown_amount_3 = f"<div style='text-align:center; font-size:{fontsize}px'>{rating:}</div>"
                    markdown_amount_4 = f"<div style='text-align:center; font-size:{fontsize}px'>{ranking:}</div>"
                    markdown_amount_5 = f"<div style='text-align:center; font-size:{fontsize}px'>{percentil:}</div>"
                    markdown_amount_6 = f"<div style='text-align:center; font-size:{fontsize}px'>(Total de {size:} jogadores na Liga)</div>"
                    st.markdown("<h4 style='text-align: center;'>Rating/Ranking/Percentil do Jogador na Liga/Temporada</h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_6, unsafe_allow_html=True)
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.markdown("<h4 style='text-align: center;'>Rating</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_3, unsafe_allow_html=True)
                    with col2:
                        st.markdown("<h4 style='text-align: center;'>Ranking</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_4, unsafe_allow_html=True)
                    with col3:
                        st.markdown("<h4 style='text-align: center;'>Percentil</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_5, unsafe_allow_html=True)
                    st.markdown("---")
                    ##################################################################################################################### 
                    #####################################################################################################################
                    #Plotar Gráfico Alternativo
                    # Player Comparison Data
                    st.markdown("<h4 style='text-align: center;'><br>Comparativo do Jogador com a Média da Liga</h4>", unsafe_allow_html=True)
                    Role_2_Mean_Charts = pd.read_csv('2_Role_Goleiro_Líbero.csv')
                    #PLOTTING COMPARISON BETWEEN 1 PLAYER AND LEAGUE MEAN
                    #Determining Club and League 
                    Role_x_Mean_Charts  = Role_2_Mean_Charts.iloc[:, np.r_[1, 3, 28, 30, 18:28]]
                    
                    Role_x_Mean_Charts = Role_x_Mean_Charts[(Role_x_Mean_Charts['Versão_Temporada']==temporada)&(Role_x_Mean_Charts['Liga']==liga)]
                    
                    Role_x_Mean_Charts['Duelos_Aéreos_Ganhos_LM'] = Role_x_Mean_Charts['Duelos_Aéreos_Ganhos'].mean()
                    Role_x_Mean_Charts['Passes_Curtos_Médios_Certos_LM'] = Role_x_Mean_Charts['Passes_Curtos_Médios_Certos'].mean()
                    Role_x_Mean_Charts['Passes_Longos_Certos_LM'] = Role_x_Mean_Charts['Passes_Longos_Certos'].mean()
                    Role_x_Mean_Charts['Passes_Progressivos_Certos_LM'] = Role_x_Mean_Charts['Passes_Progressivos_Certos'].mean()
                    Role_x_Mean_Charts['Defesas_LM'] = Role_x_Mean_Charts['Defesas'].mean()
                    Role_x_Mean_Charts['Gols_Evitados_LM'] = Role_x_Mean_Charts['Gols_Evitados'].mean()
                    Role_x_Mean_Charts['Saídas_LM'] = Role_x_Mean_Charts['Saídas'].mean()
                    Role_x_Mean_Charts['Interceptações_LM'] = Role_x_Mean_Charts['Interceptações.1'].mean()
                    Role_x_Mean_Charts['xG_Evitado_LM'] = Role_x_Mean_Charts['xG_Evitado'].mean()
                    Role_x_Mean_Charts['Finalizações_por_Gol_Sofrido_LM'] = Role_x_Mean_Charts['Finalizações_por_Gol_Sofrido'].mean()

                    Role_y_Mean_Charts  = pd.DataFrame(Role_x_Mean_Charts)
                    Role_y_Mean_Charts = Role_y_Mean_Charts.rename(columns={'Interceptações.1': 'Interceptações'})

                    Role_x_Mean_Charts  = pd.DataFrame(Role_x_Mean_Charts)
                    
                    Role_x_Mean_Charts = Role_x_Mean_Charts[(Role_x_Mean_Charts['Atleta']==jogadores)]
                    
                    #Selecting data to compare 1 player and league mean
                    Role_2_Mean_Charts  = Role_x_Mean_Charts.iloc[:, np.r_[0, 4:14]]

                    #Preparing League Mean Data
                    League_Mean = Role_x_Mean_Charts.iloc[:, np.r_[14:24]]
                    League_Mean['Atleta'] = 'Média da Liga' 
                    League_Mean.insert(0, 'Atleta', League_Mean.pop('Atleta'))
                    League_Mean = League_Mean.rename(columns={'Duelos_Aéreos_Ganhos_LM':'Duelos_Aéreos_Ganhos', 'Passes_Curtos_Médios_Certos_LM':'Passes_Curtos_Médios_Certos', 
                                                            'Passes_Longos_Certos_LM': 'Passes_Longos_Certos', 'Passes_Progressivos_Certos_LM': 'Passes_Progressivos_Certos',
                                                            'Defesas_LM': 'Defesas', 'Gols_Evitados_LM':'Gols_Evitados', 'Saídas_LM': 'Saídas',  
                                                            'Interceptações_LM': 'Interceptações', 'xG_Evitado_LM': 'xG_Evitado', 
                                                            'Finalizações_por_Gol_Sofrido_LM': 'Finalizações_por_Gol_Sofrido'})
                    #Merging Dataframes
                    #Adjusting Player Dataframe
                    Role_2_Mean_Charts = Role_2_Mean_Charts.rename(columns={'Interceptações.1': 'Interceptações'})    
                    #Concatenating Dataframes
                    Role_2_Mean_Charts = pd.concat([Role_2_Mean_Charts, League_Mean]).reset_index(drop=True)
                    #Role_2_Mean_Charts = Role_2_Mean_Charts.append(League_Mean).reset_index()
                    
                    # Preparing the Graph
                    params = list(Role_2_Mean_Charts.columns)
                    params = params[1:]
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_y_Mean_Charts[params][x])
                        a = a
                        b = max(Role_y_Mean_Charts[params][x])
                        b = b
                        ranges.append((a, b))

                    for x in range(len(Role_2_Mean_Charts['Atleta'])):
                        if Role_2_Mean_Charts['Atleta'][x] == jogadores:
                            a_values = Role_2_Mean_Charts.iloc[x].values.tolist()
                        if Role_2_Mean_Charts['Atleta'][x] == 'Média da Liga':
                            b_values = Role_2_Mean_Charts.iloc[x].values.tolist()
                                
                    a_values = a_values[1:]
                    b_values = b_values[1:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        title_name_2 = 'Média da Liga',
                        title_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll features are per90'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    plt.savefig('Player&League_Comparison.png')
                    st.pyplot(fig)
                    fig.savefig('Player&League_Comparison.png', dpi=600, bbox_inches="tight")
#################################################################################################################################
                    mais_gráficos = st.button("Para gráficos adicionais por métrica, clique")
                    if mais_gráficos:
                        st.markdown("<h4 style='text-align: center;'><br>Posição Relativa do Jogador na Liga<br></h4>", unsafe_allow_html=True)
                        # Select columns from 4 to 10 (7 columns in total)
                        selected_columns = Role_y_Mean_Charts.iloc[:, 4:14]

                        # Plot KDE for each selected column in pairs
                        for i in range(0, len(selected_columns.columns), 2):
                            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 4))  # Always create two subplots

                            # Plot first column in the pair
                            density = sns.kdeplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i], ax=ax1, color='blue', bw_adjust=0.5)
                            sns.rugplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i], ax=ax1, color='red', height=0.05)  # Adding rug plot
                            x_vals = density.get_lines()[0].get_xdata()
                            y_vals = density.get_lines()[0].get_ydata()
                            ax1.fill_between(x_vals, y_vals, color='lightblue', alpha=0.5)
                            player_value = Role_y_Mean_Charts.loc[Role_y_Mean_Charts['Atleta'] == jogadores, selected_columns.columns[i]].values[0]
                            ax1.axvline(x=player_value, color='red', linewidth=2)
                            ax1.text(player_value + 0.01 * (ax1.get_xlim()[1] - ax1.get_xlim()[0]), ax1.get_ylim()[0] + (ax1.get_ylim()[1] - ax1.get_ylim()[0]) * 0.1, jogadores, color='red', fontsize=17, verticalalignment='bottom')
                            ax1.set_title(f'{selected_columns.columns[i]}', fontsize=18, fontweight='bold')
                            ax1.spines['top'].set_visible(False)
                            ax1.spines['right'].set_visible(False)
                            ax1.spines['left'].set_visible(False)
                            ax1.set_xlabel('')
                            ax1.set_ylabel('')
                            ax1.tick_params(axis='x', labelsize=14)
                            ax1.tick_params(axis='y', which='both', left=False, labelleft=False)


                            if i + 1 < len(selected_columns.columns):  # Check if there is a second plot to render
                                # Plot second column in the pair
                                density = sns.kdeplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i+1], ax=ax2, color='blue', bw_adjust=0.5)
                                sns.rugplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i+1], ax=ax2, color='red', height=0.05)  # Adding rug plot
                                x_vals = density.get_lines()[0].get_xdata()
                                y_vals = density.get_lines()[0].get_ydata()
                                ax2.fill_between(x_vals, y_vals, color='lightblue', alpha=0.5)                                
                                player_value = Role_y_Mean_Charts.loc[Role_y_Mean_Charts['Atleta'] == jogadores, selected_columns.columns[i+1]].values[0]
                                ax2.axvline(x=player_value, color='red', linewidth=2)
                                ax2.text(player_value + 0.01 * (ax2.get_xlim()[1] - ax2.get_xlim()[0]), ax2.get_ylim()[0] + (ax2.get_ylim()[1] - ax2.get_ylim()[0]) * 0.1, jogadores, color='red', fontsize=17, verticalalignment='bottom')
                                ax2.set_title(f'{selected_columns.columns[i+1]}', fontsize=18, fontweight='bold')
                                ax2.spines['top'].set_visible(False)
                                ax2.spines['right'].set_visible(False)
                                ax2.spines['left'].set_visible(False)
                                ax2.set_xlabel('')
                                ax2.set_ylabel('')
                                ax2.tick_params(axis='x', labelsize=14)
                                ax2.tick_params(axis='y', which='both', left=False, labelleft=False)

                            else:
                                # Instead of hiding the second axis, we simply clear it
                                ax2.clear()
                                ax2.axis('off')  # Turn off the axis if not used

                            plt.tight_layout()  # Adjust layout to prevent overlap
                            st.pyplot(fig)

                        ###############################################################################################################################
                        ###############################################################################################################################
                        ###############################################################################################################################
                        ###############################################################################################################################

                elif posição == ("Lateral"):
                    ##################################################################################################################### 
                    #####################################################################################################################
                    # LATERAL DEFENSIVO
                    # Elaborar Tabela de Abertura com Rating, Ranking, Percentil
                    tabela_1 = pd.read_csv('PlayerAnalysis_Role_3.csv')
                    tabela_1  = tabela_1.iloc[:, np.r_[8, 13, 25, 29:33, 27, 10]]
                    tabela_1 = tabela_1[(tabela_1['Atleta']==jogadores)&(tabela_1['Código_Posição_Wyscout']==1)&(tabela_1['Versão_Temporada']==temporada)&(tabela_1['Liga']==liga)]
                    clube = tabela_1.iat[0, 8]
                    rating = tabela_1.iat[0, 3]
                    ranking = tabela_1.iat[0,4]
                    percentil = tabela_1.iat[0,6]
                    size = tabela_1.iat[0,5]
                    fontsize = 20
                    # Texto de Abertura
                    markdown_amount_1 = f"<div style='text-align:center; font-size:{fontsize}px'>{jogadores:}</div>"
                    markdown_amount_2 = f"<div style='text-align:center; font-size:{fontsize}px'>{clube:}</div>"
                    st.markdown("<h4 style='text-align: center;'>Jogador Selecionado</b></h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_1, unsafe_allow_html=True)
                    st.markdown(markdown_amount_2, unsafe_allow_html=True)
                    st.markdown("---")
                    ##################################################################################################################### 
                    #####################################################################################################################
                    # Dados Básicos do Jogador
                    tabela_a  = pd.read_csv("PlayerAnalysis_Role_3.csv")
                    tabela_a = tabela_a.iloc[:, np.r_[8, 10, 14:20, 21:24, 13, 25, 27]]
                    tabela_a = tabela_a[(tabela_a['Atleta']==jogadores)&(tabela_a['Código_Posição_Wyscout']==1)&(tabela_a['Versão_Temporada']==temporada)&(tabela_a['Liga']==liga)]
                    tabela_a  = tabela_a.iloc[:, np.r_[0:3, 4:10]]
                    st.markdown("<h4 style='text-align: center;'>Dados Básicos</b></h4>", unsafe_allow_html=True)
                    #st.dataframe(tabela_a, use_container_width=True, hide_index=True)
                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index(drop=True)
                        df = df.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Valor_Mercado': 'Valor', 'Nacionalidade': 'Nacional'})
                        # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                        return df.style.format().set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px',
                                            'font-size': '15px'})

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML without the index and display it
                        styled_html = style_table(tabela_a).to_html(escape=False, index=False, hide_index=True)
                        st.markdown(styled_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    ##################################################################################################################### 
                    #####################################################################################################################
                    st.markdown("<h3 style='text-align: center;'><br>LATERAL DEFENSIVO</b></h3>", unsafe_allow_html=True)
                    st.markdown("<h6 style='text-align: center;'>(Laterais D/E são ranqueados em conjunto)</b></h6>", unsafe_allow_html=True)
                    # Rating/Ranking/Percentil
                    markdown_amount_3 = f"<div style='text-align:center; font-size:{fontsize}px'>{rating:}</div>"
                    markdown_amount_4 = f"<div style='text-align:center; font-size:{fontsize}px'>{ranking:}</div>"
                    markdown_amount_5 = f"<div style='text-align:center; font-size:{fontsize}px'>{percentil:}</div>"
                    markdown_amount_6 = f"<div style='text-align:center; font-size:{fontsize}px'>(Total de {size:} jogadores na Liga)</div>"
                    st.markdown("<h4 style='text-align: center;'>Rating/Ranking/Percentil do Jogador na Liga/Temporada</h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_6, unsafe_allow_html=True)
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.markdown("<h4 style='text-align: center;'>Rating</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_3, unsafe_allow_html=True)
                    with col2:
                        st.markdown("<h4 style='text-align: center;'>Ranking</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_4, unsafe_allow_html=True)
                    with col3:
                        st.markdown("<h4 style='text-align: center;'>Percentil</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_5, unsafe_allow_html=True)
                    st.markdown("---")
                    ##################################################################################################################### 
                    #####################################################################################################################
                    # LATERAL OFENSIVO
                    # Elaborar Tabela de Abertura com Rating, Ranking, Percentil
                    tabela_1 = pd.read_csv('PlayerAnalysis_Role_4.csv')
                    tabela_1  = tabela_1.iloc[:, np.r_[17, 22, 34, 38:42, 36, 19]]
                    tabela_1 = tabela_1[(tabela_1['Atleta']==jogadores)&(tabela_1['Código_Posição_Wyscout']==1)&(tabela_1['Versão_Temporada']==temporada)&(tabela_1['Liga']==liga)]
                    clube = tabela_1.iat[0, 8]
                    rating = tabela_1.iat[0, 3]
                    ranking = tabela_1.iat[0,4]
                    percentil = tabela_1.iat[0,6]
                    size = tabela_1.iat[0,5]
                    fontsize = 20
                    # Texto de Abertura
                    st.markdown("<h3 style='text-align: center;'>LATERAL OFENSIVO</b></h3>", unsafe_allow_html=True)
                    # Rating/Ranking/Percentil
                    markdown_amount_3 = f"<div style='text-align:center; font-size:{fontsize}px'>{rating:}</div>"
                    markdown_amount_4 = f"<div style='text-align:center; font-size:{fontsize}px'>{ranking:}</div>"
                    markdown_amount_5 = f"<div style='text-align:center; font-size:{fontsize}px'>{percentil:}</div>"
                    markdown_amount_6 = f"<div style='text-align:center; font-size:{fontsize}px'>(Total de {size:} jogadores na Liga)</div>"
                    st.markdown("<h4 style='text-align: center;'>Rating/Ranking/Percentil do Jogador na Liga/Temporada</h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_6, unsafe_allow_html=True)
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.markdown("<h4 style='text-align: center;'>Rating</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_3, unsafe_allow_html=True)
                    with col2:
                        st.markdown("<h4 style='text-align: center;'>Ranking</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_4, unsafe_allow_html=True)
                    with col3:
                        st.markdown("<h4 style='text-align: center;'>Percentil</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_5, unsafe_allow_html=True)
                    st.markdown("---")
                    ##################################################################################################################### 
                    #####################################################################################################################
                    # LATERAL EQUILIBRADO
                    # Elaborar Tabela de Abertura com Rating, Ranking, Percentil
                    tabela_1 = pd.read_csv('PlayerAnalysis_Role_5.csv')
                    tabela_1  = tabela_1.iloc[:, np.r_[20, 25, 37, 41:45, 39, 22]]
                    tabela_1 = tabela_1[(tabela_1['Atleta']==jogadores)&(tabela_1['Código_Posição_Wyscout']==1)&(tabela_1['Versão_Temporada']==temporada)&(tabela_1['Liga']==liga)]
                    clube = tabela_1.iat[0, 8]
                    rating = tabela_1.iat[0, 3]
                    ranking = tabela_1.iat[0,4]
                    percentil = tabela_1.iat[0,6]
                    size = tabela_1.iat[0,5]
                    fontsize = 20
                    # Texto de Abertura
                    st.markdown("<h3 style='text-align: center;'>LATERAL EQUILIBRADO</b></h3>", unsafe_allow_html=True)
                    # Rating/Ranking/Percentil
                    markdown_amount_3 = f"<div style='text-align:center; font-size:{fontsize}px'>{rating:}</div>"
                    markdown_amount_4 = f"<div style='text-align:center; font-size:{fontsize}px'>{ranking:}</div>"
                    markdown_amount_5 = f"<div style='text-align:center; font-size:{fontsize}px'>{percentil:}</div>"
                    markdown_amount_6 = f"<div style='text-align:center; font-size:{fontsize}px'>(Total de {size:} jogadores na Liga)</div>"
                    st.markdown("<h4 style='text-align: center;'>Rating/Ranking/Percentil do Jogador na Liga/Temporada</h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_6, unsafe_allow_html=True)
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.markdown("<h4 style='text-align: center;'>Rating</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_3, unsafe_allow_html=True)
                    with col2:
                        st.markdown("<h4 style='text-align: center;'>Ranking</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_4, unsafe_allow_html=True)
                    with col3:
                        st.markdown("<h4 style='text-align: center;'>Percentil</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_5, unsafe_allow_html=True)
                    st.markdown("---")
                    ##################################################################################################################### 
                    #####################################################################################################################
                    # #Elaborar Tabela com Métricas do Atleta
                    tabela_2 = pd.read_csv('5_Role_Lateral_Equilibrado.csv')
                    tabela_2 = tabela_2.iloc[:, np.r_[1, 18:36, 6, 36, 38]]
                    tabela_2 = tabela_2[(tabela_2['Atleta']==jogadores)&(tabela_2['Código_Posição_Wyscout']==1)&(tabela_2['Versão_Temporada']==temporada)&(tabela_2['Liga']==liga)]
                    tabela_2  = tabela_2.iloc[:, np.r_[0:19]]
                    tabela_2  = pd.DataFrame(tabela_2)
                    tabela_2 = tabela_2.round(decimals=2)
                    # Média da Liga
                    tabela_b = pd.read_csv('5_Role_Lateral_Equilibrado.csv')
                    tabela_b = tabela_b.iloc[:, np.r_[1, 18:36, 6, 36, 38]]
                    tabela_b = tabela_b[(tabela_b['Código_Posição_Wyscout']==1)&(tabela_b['Versão_Temporada']==temporada)&(tabela_b['Liga']==liga)]
                    tabela_b = tabela_b.iloc[:, np.r_[1:19, 20]]
                    tabela_b = tabela_b.round(decimals=2)
                    tabela_c = (tabela_b.groupby('Liga')[['Ações_Defensivas_BemSucedidas', 'Duelos_Defensivos_Ganhos', 'Duelos_Aéreos_Ganhos', 
                                                            'Passes_Longos_Certos', 'Passes_Progressivos_Certos', 'Passes_Laterais_Certos', 'Ações_Ofensivas_BemSucedidas', 
                                                            'Duelos_Ofensivos_Ganhos', 'Pisadas_Área', 'Dribles_BemSucedidos', 'Corridas_Progressivas', 
                                                            'Acelerações', 'xA', 'Assistência_Finalização', 'Passes_TerçoFinal_Certos', 'Deep_Completions', 
                                                            'Deep_Completed_Crosses', 'Passes_ÁreaPênalti_Certos']].mean())
                    tabela_c = tabela_c.round(decimals=2)
                    Atleta = ['Média da Liga']
                    tabela_c['Atleta'] = Atleta 
                    tabela_c.insert(0, 'Atleta', tabela_c.pop('Atleta'))
                    # Percentil na Liga
                    tabela_d = pd.read_csv('PlayerAnalysis_Role_5.csv')
                    tabela_d = tabela_d.iloc[:, np.r_[81:99, 20, 25, 37, 39]]
                    tabela_d = tabela_d[(tabela_d['Atleta']==jogadores)&(tabela_d['Código_Posição_Wyscout']==1)&(tabela_d['Versão_Temporada']==temporada)&(tabela_d['Liga']==liga)]
                    tabela_d = tabela_d.iloc[:, np.r_[0:18]]
                    tabela_d = tabela_d.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 'Duelos_Defensivos_Ganhos_Percentil':'Duelos_Defensivos_Ganhos', 'Duelos_Aéreos_Ganhos_Percentil':'Duelos_Aéreos_Ganhos', 'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos',
                                                            'Passes_Laterais_Certos_Percentil':'Passes_Laterais_Certos', 'Ações_Ofensivas_BemSucedidas_Percentil':'Ações_Ofensivas_BemSucedidas', 'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos', 
                                                            'Pisadas_Área_Percentil':'Pisadas_Área', 'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos', 'Corridas_Progressivas_Percentil':'Corridas_Progressivas', 'Acelerações_Percentil':'Acelerações', 
                                                            'xA_Percentil':'xA', 'Assistência_Finalização_Percentil':'Assistência_Finalização', 'Passes_TerçoFinal_Certos_Percentil':'Passes_TerçoFinal_Certos', 'Deep_Completions_Percentil':'Deep_Completions',
                                                            'Deep_Completed_Crosses_Percentil':'Deep_Completed_Crosses', 'Passes_ÁreaPênalti_Certos_Percentil':'Passes_ÁreaPênalti_Certos'})
                    Atleta = ['Percentil na Liga']
                    tabela_d['Atleta'] = Atleta 
                    tabela_d.insert(0, 'Atleta', tabela_d.pop('Atleta'))
                    tabela_2 = pd.concat([tabela_2, tabela_c, tabela_d]).reset_index(drop=True)
#                        tabela_2 = tabela_2.append(tabela_c).reset_index()
#                        tabela_2 = tabela_2.append(tabela_d).reset_index()
                    tabela_2 = tabela_2.transpose()
#                        tabela_2 = tabela_2.drop([tabela_2.index[0], tabela_2.index[1]])
                    st.markdown("<h4 style='text-align: center;'>Desempenho do Jogador na Liga/Temporada</h4>", unsafe_allow_html=True)
                    #st.dataframe(tabela_2, use_container_width=True)

                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index()  # If you want the index to be a visible column
                        new_header = df.iloc[0]  # Capture the first row to use as column headers
                        df = df[1:]  # Remove the first row from the data
                        df.columns = new_header  # Set the new column headers
                        first_column_name = df.columns[1]  # Adjusted for the added index column
                        # Ensure 'Rating' is rounded and formatted to 2 decimal places during styling
                        formatter = {first_column_name: "{:.2f}", "Média da Liga": "{:.2f}", "Percentil na Liga": "{:.0f}"}
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px', 'font-size': '15px', 'margin': 'auto'})  # Adjust this for centering

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML, ensure the index is shown and wrapped in a center-aligned div
                        styled_html = style_table(tabela_2).to_html(escape=False, index=False, hide_index=False)
                        center_html = f"<div style='margin-left: auto; margin-right: auto; width: fit-content;'>{styled_html}</div>"
                        st.markdown(center_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()


                    ##################################################################################################################### 
                    #####################################################################################################################
                    ##################################################################################################################### 
                    #####################################################################################################################

                    #Plotar Gráfico Alternativo
                    # Player Comparison Data
                    st.markdown("<h4 style='text-align: center;'><br>Comparativo do Jogador com a Média da Liga</h4>", unsafe_allow_html=True)
                    Role_5_Mean_Charts = pd.read_csv('5_Role_Lateral_Equilibrado.csv')
                    #PLOTTING COMPARISON BETWEEN 1 PLAYER AND LEAGUE MEAN
                    #Determining Club and League 
                    Role_x_Mean_Charts  = Role_5_Mean_Charts.iloc[:, np.r_[1, 3, 36, 38, 18:36]]
                    Role_x_Mean_Charts = Role_x_Mean_Charts[(Role_x_Mean_Charts['Versão_Temporada']==temporada)&(Role_x_Mean_Charts['Liga']==liga)]
                    
                    Role_x_Mean_Charts['Ações_Defensivas_BemSucedidas_LM'] = Role_x_Mean_Charts['Ações_Defensivas_BemSucedidas'].mean()
                    Role_x_Mean_Charts['Duelos_Defensivos_Ganhos_LM'] = Role_x_Mean_Charts['Duelos_Defensivos_Ganhos'].mean()
                    Role_x_Mean_Charts['Duelos_Aéreos_Ganhos_LM'] = Role_x_Mean_Charts['Duelos_Aéreos_Ganhos'].mean()
                    Role_x_Mean_Charts['Passes_Longos_Certos_LM'] = Role_x_Mean_Charts['Passes_Longos_Certos'].mean()
                    Role_x_Mean_Charts['Passes_Progressivos_Certos_LM'] = Role_x_Mean_Charts['Passes_Progressivos_Certos'].mean()
                    Role_x_Mean_Charts['Passes_Laterais_Certos_LM'] = Role_x_Mean_Charts['Passes_Laterais_Certos'].mean()
                    Role_x_Mean_Charts['Ações_Ofensivas_BemSucedidas_LM'] = Role_x_Mean_Charts['Ações_Ofensivas_BemSucedidas'].mean()
                    Role_x_Mean_Charts['Duelos_Ofensivos_Ganhos_LM'] = Role_x_Mean_Charts['Duelos_Ofensivos_Ganhos'].mean()
                    Role_x_Mean_Charts['Pisadas_Área_LM'] = Role_x_Mean_Charts['Pisadas_Área'].mean()
                    Role_x_Mean_Charts['Dribles_BemSucedidos_LM'] = Role_x_Mean_Charts['Dribles_BemSucedidos'].mean()
                    Role_x_Mean_Charts['Corridas_Progressivas_LM'] = Role_x_Mean_Charts['Corridas_Progressivas'].mean()
                    Role_x_Mean_Charts['Acelerações_LM'] = Role_x_Mean_Charts['Acelerações'].mean()
                    Role_x_Mean_Charts['xA_LM'] = Role_x_Mean_Charts['xA'].mean()
                    Role_x_Mean_Charts['Assistência_Finalização_LM'] = Role_x_Mean_Charts['Assistência_Finalização'].mean()
                    Role_x_Mean_Charts['Passes_TerçoFinal_Certos_LM'] = Role_x_Mean_Charts['Passes_TerçoFinal_Certos'].mean()
                    Role_x_Mean_Charts['Deep_Completions_LM'] = Role_x_Mean_Charts['Deep_Completions'].mean()
                    Role_x_Mean_Charts['Deep_Completed_Crosses_LM'] = Role_x_Mean_Charts['Deep_Completed_Crosses'].mean()
                    Role_x_Mean_Charts['Passes_ÁreaPênalti_Certos_LM'] = Role_x_Mean_Charts['Passes_ÁreaPênalti_Certos'].mean()
                    
                    Role_x_Mean_Charts  = pd.DataFrame(Role_x_Mean_Charts)
                    Role_y_Mean_Charts  = pd.DataFrame(Role_x_Mean_Charts)
                    
                    Role_x_Mean_Charts = Role_x_Mean_Charts[(Role_x_Mean_Charts['Atleta']==jogadores)]
                    
                    #Selecting data to compare 1 player and league mean
                    Role_5_Mean_Charts  = Role_x_Mean_Charts.iloc[:, np.r_[0, 4:22]]
                    #Preparing League Mean Data
                    League_Mean = Role_x_Mean_Charts.iloc[:, np.r_[22:40]]
                    League_Mean['Atleta'] = 'Média da Liga' 
                    League_Mean.insert(0, 'Atleta', League_Mean.pop('Atleta'))
                    League_Mean = League_Mean.rename(columns={'Ações_Defensivas_BemSucedidas_LM':'Ações_Defensivas_BemSucedidas', 'Duelos_Defensivos_Ganhos_LM':'Duelos_Defensivos_Ganhos', 
                                                            'Duelos_Aéreos_Ganhos_LM':'Duelos_Aéreos_Ganhos', 'Passes_Longos_Certos_LM': 'Passes_Longos_Certos', 'Passes_Progressivos_Certos_LM': 'Passes_Progressivos_Certos',
                                                            'Passes_Laterais_Certos_LM': 'Passes_Laterais_Certos', 'Ações_Ofensivas_BemSucedidas_LM':'Ações_Ofensivas_BemSucedidas', 
                                                            'Duelos_Ofensivos_Ganhos_LM': 'Duelos_Ofensivos_Ganhos', 'Pisadas_Área_LM':'Pisadas_Área', 'Dribles_BemSucedidos_LM':'Dribles_BemSucedidos',  
                                                            'Corridas_Progressivas_LM':'Corridas_Progressivas', 'Acelerações_LM': 'Acelerações', 'xA_LM':'xA', 'Assistência_Finalização_LM':'Assistência_Finalização',
                                                            'Passes_TerçoFinal_Certos_LM': 'Passes_TerçoFinal_Certos', 'Deep_Completions_LM':'Deep_Completions', 'Deep_Completed_Crosses_LM':'Deep_Completed_Crosses',
                                                            'Passes_ÁreaPênalti_Certos_LM':'Passes_ÁreaPênalti_Certos'})
                    #Merging Dataframes
                    #Adjusting Player Dataframe
                    #Concatenating Dataframes
                    Role_5_Mean_Charts = pd.concat([Role_5_Mean_Charts, League_Mean]).reset_index(drop=True)
                    #Role_5_Mean_Charts = Role_5_Mean_Charts.append(League_Mean).reset_index()
                    #Splitting Columns
                    Role_5_Mean_Charts_1 = Role_5_Mean_Charts.iloc[:, np.r_[0, 1:10]]
                    Role_5_Mean_Charts_2 = Role_5_Mean_Charts.iloc[:, np.r_[0, 10:19]]
                    # Preparing Graph 1
                    # Get Parameters
                    params = list(Role_5_Mean_Charts_1.columns)
                    params = params[1:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_y_Mean_Charts[params][x])
                        a = a
                        b = max(Role_y_Mean_Charts[params][x])
                        b = b
                        ranges.append((a, b))

                    for x in range(len(Role_5_Mean_Charts_1['Atleta'])):
                        if Role_5_Mean_Charts_1['Atleta'][x] == jogadores:
                            a_values = Role_5_Mean_Charts_1.iloc[x].values.tolist()
                        if Role_5_Mean_Charts_1['Atleta'][x] == 'Média da Liga':
                            b_values = Role_5_Mean_Charts_1.iloc[x].values.tolist()
                                
                    a_values = a_values[1:]
                    b_values = b_values[1:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        title_name_2 = 'Média da Liga',
                        title_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll features are per90'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    plt.savefig('Player&League_Comparison_1.png')
                    st.pyplot(fig)
                    fig.savefig('Player&League_Comparison_1.png', dpi=600, bbox_inches="tight")

                    # Preparing Graph 2
                    # Get Parameters

                    params = list(Role_5_Mean_Charts_2.columns)
                    params = params[1:]
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_y_Mean_Charts[params][x])
                        a = a
                        b = max(Role_y_Mean_Charts[params][x])
                        b = b
                        ranges.append((a, b))

                    for x in range(len(Role_5_Mean_Charts_2['Atleta'])):
                        if Role_5_Mean_Charts_2['Atleta'][x] == jogadores:
                            a_values = Role_5_Mean_Charts_2.iloc[x].values.tolist()
                        if Role_5_Mean_Charts_2['Atleta'][x] == 'Média da Liga':
                            b_values = Role_5_Mean_Charts_2.iloc[x].values.tolist()
                                
                    a_values = a_values[1:]
                    b_values = b_values[1:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        title_name_2 = 'Média da Liga',
                        title_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll features are per90'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    plt.savefig('Player&League_Comparison_1.png')
                    st.pyplot(fig)
                    fig.savefig('Player&League_Comparison_1.png', dpi=600, bbox_inches="tight")

                    ##########################################################################################################################################

                    # Plotting KDE Comparison Graphs
                    mais_gráficos = st.button("Para gráficos adicionais por métrica, clique")
                    if mais_gráficos:
                        st.markdown("<h4 style='text-align: center;'><br>Posição Relativa do Jogador na Liga<br></h4>", unsafe_allow_html=True)
                        # Select columns from 4 to 10 (7 columns in total)
                        selected_columns = Role_y_Mean_Charts.iloc[:, 4:22]

                        # Plot KDE for each selected column in pairs
                        for i in range(0, len(selected_columns.columns), 2):
                            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 4))  # Always create two subplots

                            # Plot first column in the pair
                            density = sns.kdeplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i], ax=ax1, color='blue', bw_adjust=0.5)
                            sns.rugplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i], ax=ax1, color='red', height=0.05)  # Adding rug plot
                            x_vals = density.get_lines()[0].get_xdata()
                            y_vals = density.get_lines()[0].get_ydata()
                            ax1.fill_between(x_vals, y_vals, color='lightblue', alpha=0.5)
                            player_value = Role_y_Mean_Charts.loc[Role_y_Mean_Charts['Atleta'] == jogadores, selected_columns.columns[i]].values[0]
                            ax1.axvline(x=player_value, color='red', linewidth=2)
                            ax1.text(player_value + 0.01 * (ax1.get_xlim()[1] - ax1.get_xlim()[0]), ax1.get_ylim()[0] + (ax1.get_ylim()[1] - ax1.get_ylim()[0]) * 0.1, jogadores, color='red', fontsize=17, verticalalignment='bottom')
                            ax1.set_title(f'{selected_columns.columns[i]}', fontsize=18, fontweight='bold')
                            ax1.spines['top'].set_visible(False)
                            ax1.spines['right'].set_visible(False)
                            ax1.spines['left'].set_visible(False)
                            ax1.set_xlabel('')
                            ax1.set_ylabel('')
                            ax1.tick_params(axis='x', labelsize=14)
                            ax1.tick_params(axis='y', which='both', left=False, labelleft=False)


                            if i + 1 < len(selected_columns.columns):  # Check if there is a second plot to render
                                # Plot second column in the pair
                                density = sns.kdeplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i+1], ax=ax2, color='blue', bw_adjust=0.5)
                                sns.rugplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i+1], ax=ax2, color='red', height=0.05)  # Adding rug plot
                                x_vals = density.get_lines()[0].get_xdata()
                                y_vals = density.get_lines()[0].get_ydata()
                                ax2.fill_between(x_vals, y_vals, color='lightblue', alpha=0.5)                                
                                player_value = Role_y_Mean_Charts.loc[Role_y_Mean_Charts['Atleta'] == jogadores, selected_columns.columns[i+1]].values[0]
                                ax2.axvline(x=player_value, color='red', linewidth=2)
                                ax2.text(player_value + 0.01 * (ax2.get_xlim()[1] - ax2.get_xlim()[0]), ax2.get_ylim()[0] + (ax2.get_ylim()[1] - ax2.get_ylim()[0]) * 0.1, jogadores, color='red', fontsize=17, verticalalignment='bottom')
                                ax2.set_title(f'{selected_columns.columns[i+1]}', fontsize=18, fontweight='bold')
                                ax2.spines['top'].set_visible(False)
                                ax2.spines['right'].set_visible(False)
                                ax2.spines['left'].set_visible(False)
                                ax2.set_xlabel('')
                                ax2.set_ylabel('')
                                ax2.tick_params(axis='x', labelsize=14)
                                ax2.tick_params(axis='y', which='both', left=False, labelleft=False)

                            else:
                                # Instead of hiding the second axis, we simply clear it
                                ax2.clear()
                                ax2.axis('off')  # Turn off the axis if not used

                            plt.tight_layout()  # Adjust layout to prevent overlap
                            st.pyplot(fig)

                        #####################################################################################################################
                        #####################################################################################################################
                        ##################################################################################################################### 
                        #####################################################################################################################

                elif posição == ("Zagueiro"):
                    ##################################################################################################################### 
                    #####################################################################################################################
                    # ZAGUEIRO CLÁSSICO
                    # Elaborar Tabela de Abertura com Rating, Ranking, Percentil
                    tabela_1 = pd.read_csv('PlayerAnalysis_Role_6.csv')
                    tabela_1  = tabela_1.iloc[:, np.r_[8, 13, 25, 29:33, 27, 10]]
                    tabela_1 = tabela_1[(tabela_1['Atleta']==jogadores)&(tabela_1['Código_Posição_Wyscout']==4)&(tabela_1['Versão_Temporada']==temporada)&(tabela_1['Liga']==liga)]
                    clube = tabela_1.iat[0, 8]
                    rating = tabela_1.iat[0, 3]
                    ranking = tabela_1.iat[0,4]
                    percentil = tabela_1.iat[0,6]
                    size = tabela_1.iat[0,5]
                    fontsize = 20
                    # Texto de Abertura
                    markdown_amount_1 = f"<div style='text-align:center; font-size:{fontsize}px'>{jogadores:}</div>"
                    markdown_amount_2 = f"<div style='text-align:center; font-size:{fontsize}px'>{clube:}</div>"
                    st.markdown("<h4 style='text-align: center;'>Jogador Selecionado</b></h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_1, unsafe_allow_html=True)
                    st.markdown(markdown_amount_2, unsafe_allow_html=True)
                    st.markdown("---")
                    ##################################################################################################################### 
                    #####################################################################################################################
                    # Dados Básicos do Jogador
                    tabela_a  = pd.read_csv("PlayerAnalysis_Role_6.csv")
                    tabela_a = tabela_a.iloc[:, np.r_[8, 10, 14:20, 21:24, 13, 25, 27]]
                    tabela_a = tabela_a[(tabela_a['Atleta']==jogadores)&(tabela_a['Código_Posição_Wyscout']==4)&(tabela_a['Versão_Temporada']==temporada)&(tabela_a['Liga']==liga)]
                    tabela_a  = tabela_a.iloc[:, np.r_[0:3, 4:10]]
                    st.markdown("<h4 style='text-align: center;'>Dados Básicos</b></h4>", unsafe_allow_html=True)

                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index(drop=True)
                        df = df.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Valor_Mercado': 'Valor', 'Nacionalidade': 'Nacional'})
                        formatter = {"Idade": "{:.0f}"}
                        # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px',
                                            'font-size': '15px'})

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML without the index and display it
                        styled_html = style_table(tabela_a).to_html(escape=False, index=False, hide_index=True)
                        st.markdown(styled_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    ##################################################################################################################### 
                    #####################################################################################################################
                    st.markdown("<h3 style='text-align: center;'><br>ZAGUEIRO CLÁSSICO</b></h3>", unsafe_allow_html=True)
                    # Rating/Ranking/Percentil
                    markdown_amount_3 = f"<div style='text-align:center; font-size:{fontsize}px'>{rating:}</div>"
                    markdown_amount_4 = f"<div style='text-align:center; font-size:{fontsize}px'>{ranking:}</div>"
                    markdown_amount_5 = f"<div style='text-align:center; font-size:{fontsize}px'>{percentil:}</div>"
                    markdown_amount_6 = f"<div style='text-align:center; font-size:{fontsize}px'>(Total de {size:} jogadores na Liga)</div>"
                    st.markdown("<h4 style='text-align: center;'>Rating/Ranking/Percentil do Jogador na Liga/Temporada</h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_6, unsafe_allow_html=True)
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.markdown("<h4 style='text-align: center;'>Rating</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_3, unsafe_allow_html=True)
                    with col2:
                        st.markdown("<h4 style='text-align: center;'>Ranking</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_4, unsafe_allow_html=True)
                    with col3:
                        st.markdown("<h4 style='text-align: center;'>Percentil</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_5, unsafe_allow_html=True)
                    st.markdown("---")
                    ##################################################################################################################### 
                    #####################################################################################################################
                    # ZAGUEIRO CONSTRUTOR
                    # Elaborar Tabela de Abertura com Rating, Ranking, Percentil
                    tabela_1 = pd.read_csv('PlayerAnalysis_Role_7.csv')
                    tabela_1  = tabela_1.iloc[:, np.r_[12, 17, 29, 33:37, 31, 14]]
                    tabela_1 = tabela_1[(tabela_1['Atleta']==jogadores)&(tabela_1['Código_Posição_Wyscout']==4)&(tabela_1['Versão_Temporada']==temporada)&(tabela_1['Liga']==liga)]
                    clube = tabela_1.iat[0, 8]
                    rating = tabela_1.iat[0, 3]
                    ranking = tabela_1.iat[0,4]
                    percentil = tabela_1.iat[0,6]
                    size = tabela_1.iat[0,5]
                    fontsize = 20
                    # Texto de Abertura
                    st.markdown("<h3 style='text-align: center;'>ZAGUEIRO CONSTRUTOR</b></h3>", unsafe_allow_html=True)
                    # Rating/Ranking/Percentil
                    markdown_amount_3 = f"<div style='text-align:center; font-size:{fontsize}px'>{rating:}</div>"
                    markdown_amount_4 = f"<div style='text-align:center; font-size:{fontsize}px'>{ranking:}</div>"
                    markdown_amount_5 = f"<div style='text-align:center; font-size:{fontsize}px'>{percentil:}</div>"
                    markdown_amount_6 = f"<div style='text-align:center; font-size:{fontsize}px'>(Total de {size:} jogadores na Liga)</div>"
                    st.markdown("<h4 style='text-align: center;'>Rating/Ranking/Percentil do Jogador na Liga/Temporada</h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_6, unsafe_allow_html=True)
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.markdown("<h4 style='text-align: center;'>Rating</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_3, unsafe_allow_html=True)
                    with col2:
                        st.markdown("<h4 style='text-align: center;'>Ranking</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_4, unsafe_allow_html=True)
                    with col3:
                        st.markdown("<h4 style='text-align: center;'>Percentil</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_5, unsafe_allow_html=True)
                    st.markdown("---")
                    ##################################################################################################################### 
                    #####################################################################################################################
                    # ZAGUEIRO EQUILIBRADO
                    # Elaborar Tabela de Abertura com Rating, Ranking, Percentil
                    tabela_1 = pd.read_csv('PlayerAnalysis_Role_8.csv')
                    tabela_1  = tabela_1.iloc[:, np.r_[15, 20, 32, 36:40, 34, 17]]
                    tabela_1 = tabela_1[(tabela_1['Atleta']==jogadores)&(tabela_1['Código_Posição_Wyscout']==4)&(tabela_1['Versão_Temporada']==temporada)&(tabela_1['Liga']==liga)]
                    clube = tabela_1.iat[0, 8]
                    rating = tabela_1.iat[0, 3]
                    ranking = tabela_1.iat[0,4]
                    percentil = tabela_1.iat[0,6]
                    size = tabela_1.iat[0,5]
                    fontsize = 20
                    # Texto de Abertura
                    st.markdown("<h3 style='text-align: center;'>ZAGUEIRO EQUILIBRADO</b></h3>", unsafe_allow_html=True)
                    # Rating/Ranking/Percentil
                    markdown_amount_3 = f"<div style='text-align:center; font-size:{fontsize}px'>{rating:}</div>"
                    markdown_amount_4 = f"<div style='text-align:center; font-size:{fontsize}px'>{ranking:}</div>"
                    markdown_amount_5 = f"<div style='text-align:center; font-size:{fontsize}px'>{percentil:}</div>"
                    markdown_amount_6 = f"<div style='text-align:center; font-size:{fontsize}px'>(Total de {size:} jogadores na Liga)</div>"
                    st.markdown("<h4 style='text-align: center;'>Rating/Ranking/Percentil do Jogador na Liga/Temporada</h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_6, unsafe_allow_html=True)
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.markdown("<h4 style='text-align: center;'>Rating</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_3, unsafe_allow_html=True)
                    with col2:
                        st.markdown("<h4 style='text-align: center;'>Ranking</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_4, unsafe_allow_html=True)
                    with col3:
                        st.markdown("<h4 style='text-align: center;'>Percentil</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_5, unsafe_allow_html=True)
                    st.markdown("---")
                    ##################################################################################################################### 
                    #####################################################################################################################
                    # #Elaborar Tabela com Métricas do Atleta
                    tabela_2 = pd.read_csv('8_Role_Zagueiro_Equilibrado.csv')
                    tabela_2 = tabela_2.iloc[:, np.r_[1, 18:31, 6, 31, 33]]
                    tabela_2 = tabela_2[(tabela_2['Atleta']==jogadores)&(tabela_2['Código_Posição_Wyscout']==4)&(tabela_2['Versão_Temporada']==temporada)&(tabela_2['Liga']==liga)]
                    tabela_2  = tabela_2.iloc[:, np.r_[0:14]]
                    tabela_2  = pd.DataFrame(tabela_2)
                    tabela_2 = tabela_2.round(decimals=2)
                    # Média da Liga
                    tabela_b = pd.read_csv('8_Role_Zagueiro_Equilibrado.csv')
                    tabela_b = tabela_b.iloc[:, np.r_[1, 18:31, 6, 31, 33]]
                    tabela_b = tabela_b[(tabela_b['Código_Posição_Wyscout']==4)&(tabela_b['Versão_Temporada']==temporada)&(tabela_b['Liga']==liga)]
                    tabela_b = tabela_b.iloc[:, np.r_[1:14, 15]]
                    tabela_b = tabela_b.round(decimals=2)
                    tabela_c = (tabela_b.groupby('Liga')[['Ações_Defensivas_BemSucedidas', 'Duelos_Defensivos_Ganhos', 'Duelos_Aéreos_Ganhos', 
                                                            'Finalizações_Bloqueadas', 'Interceptações_Ajustadas_a_Posse', 'Passes_Longos_Certos', 
                                                            'Passes_Frontais_Certos', 'Passes_Progressivos_Certos', 'Passes_Laterais_Certos', 'Duelos_Ofensivos_Ganhos', 
                                                            'Dribles_BemSucedidos', 'Corridas_Progressivas', 'Passes_TerçoFinal_Certos']].mean())
                    tabela_c = tabela_c.round(decimals=2)
                    Atleta = ['Média da Liga']
                    tabela_c['Atleta'] = Atleta 
                    tabela_c.insert(0, 'Atleta', tabela_c.pop('Atleta'))
                    # Percentil na Liga
                    tabela_d = pd.read_csv('PlayerAnalysis_Role_8.csv')
                    tabela_d = tabela_d.iloc[:, np.r_[66:79, 15, 20, 32, 34]]
                    tabela_d = tabela_d[(tabela_d['Atleta']==jogadores)&(tabela_d['Código_Posição_Wyscout']==4)&(tabela_d['Versão_Temporada']==temporada)&(tabela_d['Liga']==liga)]
                    tabela_d = tabela_d.iloc[:, np.r_[0:13]]
                    tabela_d = tabela_d.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 'Duelos_Defensivos_Ganhos_Percentil':'Duelos_Defensivos_Ganhos', 'Duelos_Aéreos_Ganhos_Percentil':'Duelos_Aéreos_Ganhos',
                                                        'Finalizações_Bloqueadas_Percentil':'Finalizações_Bloqueadas', 'Interceptações_Ajustadas_a_Posse_Percentil':'Interceptações_Ajustadas_a_Posse', 'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 
                                                        'Passes_Frontais_Certos_Percentil':'Passes_Frontais_Certos', 'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos', 'Passes_Laterais_Certos_Percentil':'Passes_Laterais_Certos', 'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos', 
                                                        'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos', 'Corridas_Progressivas_Percentil':'Corridas_Progressivas', 'Passes_TerçoFinal_Certos_Percentil':'Passes_TerçoFinal_Certos'})
                    Atleta = ['Percentil na Liga']
                    tabela_d['Atleta'] = Atleta 
                    tabela_d.insert(0, 'Atleta', tabela_d.pop('Atleta'))
                    tabela_2 = pd.concat([tabela_2, tabela_c, tabela_d]).reset_index(drop=True)
                    tabela_2 = tabela_2.transpose()
                    st.markdown("<h4 style='text-align: center;'>Desempenho do Jogador na Liga/Temporada</h4>", unsafe_allow_html=True)


                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index()  # If you want the index to be a visible column
                        new_header = df.iloc[0]  # Capture the first row to use as column headers
                        df = df[1:]  # Remove the first row from the data
                        df.columns = new_header  # Set the new column headers
                        first_column_name = df.columns[1]  # Adjusted for the added index column
                        # Ensure 'Rating' is rounded and formatted to 2 decimal places during styling
                        formatter = {first_column_name: "{:.2f}", "Média da Liga": "{:.2f}", "Percentil na Liga": "{:.0f}"}
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px', 'font-size': '15px', 'margin': 'auto'})  # Adjust this for centering

                    # Displaying in Streamlit
                    def main():
                        # Convert the styled DataFrame to HTML, ensure the index is shown and wrapped in a center-aligned div
                        styled_html = style_table(tabela_2).to_html(escape=False, index=False, hide_index=False)
                        center_html = f"<div style='margin-left: auto; margin-right: auto; width: fit-content;'>{styled_html}</div>"
                        st.markdown(center_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    ##################################################################################################################### 
                    #####################################################################################################################

                    #Plotar Gráfico Alternativo
                    # Player Comparison Data
                    st.markdown("<h4 style='text-align: center;'><br>Comparativo do Jogador com a Média da Liga</h4>", unsafe_allow_html=True)
                    Role_8_Mean_Charts = pd.read_csv('8_Role_Zagueiro_Equilibrado.csv')
                    #PLOTTING COMPARISON BETWEEN 1 PLAYER AND LEAGUE MEAN
                    #Determining Club and League 
                    Role_x_Mean_Charts  = Role_8_Mean_Charts.iloc[:, np.r_[1, 3, 31, 33, 18:31]]
                    
                    Role_x_Mean_Charts = Role_x_Mean_Charts[(Role_x_Mean_Charts['Versão_Temporada']==temporada)&(Role_x_Mean_Charts['Liga']==liga)]

                    Role_x_Mean_Charts['Ações_Defensivas_BemSucedidas_LM'] = Role_x_Mean_Charts['Ações_Defensivas_BemSucedidas'].mean()
                    Role_x_Mean_Charts['Duelos_Defensivos_Ganhos_LM'] = Role_x_Mean_Charts['Duelos_Defensivos_Ganhos'].mean()
                    Role_x_Mean_Charts['Duelos_Aéreos_Ganhos_LM'] = Role_x_Mean_Charts['Duelos_Aéreos_Ganhos'].mean()
                    Role_x_Mean_Charts['Finalizações_Bloqueadas_LM'] = Role_x_Mean_Charts['Finalizações_Bloqueadas'].mean()
                    Role_x_Mean_Charts['Interceptações_Ajustadas_a_Posse_LM'] = Role_x_Mean_Charts['Interceptações_Ajustadas_a_Posse'].mean()
                    Role_x_Mean_Charts['Passes_Longos_Certos_LM'] = Role_x_Mean_Charts['Passes_Longos_Certos'].mean()
                    Role_x_Mean_Charts['Passes_Frontais_Certos_LM'] = Role_x_Mean_Charts['Passes_Frontais_Certos'].mean()
                    Role_x_Mean_Charts['Passes_Progressivos_Certos_LM'] = Role_x_Mean_Charts['Passes_Progressivos_Certos'].mean()
                    Role_x_Mean_Charts['Passes_Laterais_Certos_LM'] = Role_x_Mean_Charts['Passes_Laterais_Certos'].mean()
                    Role_x_Mean_Charts['Duelos_Ofensivos_Ganhos_LM'] = Role_x_Mean_Charts['Duelos_Ofensivos_Ganhos'].mean()
                    Role_x_Mean_Charts['Dribles_BemSucedidos_LM'] = Role_x_Mean_Charts['Dribles_BemSucedidos'].mean()
                    Role_x_Mean_Charts['Corridas_Progressivas_LM'] = Role_x_Mean_Charts['Corridas_Progressivas'].mean()
                    Role_x_Mean_Charts['Passes_TerçoFinal_Certos_LM'] = Role_x_Mean_Charts['Passes_TerçoFinal_Certos'].mean()
                    
                    Role_x_Mean_Charts  = pd.DataFrame(Role_x_Mean_Charts)
                    Role_y_Mean_Charts  = pd.DataFrame(Role_x_Mean_Charts)

                    
                    Role_x_Mean_Charts = Role_x_Mean_Charts[(Role_x_Mean_Charts['Atleta']==jogadores)]
                    
                    #Selecting data to compare 1 player and league mean
                    Role_8_Mean_Charts  = Role_x_Mean_Charts.iloc[:, np.r_[0, 4:17]]

                    #Preparing League Mean Data
                    League_Mean = Role_x_Mean_Charts.iloc[:, np.r_[17:30]]
                    League_Mean['Atleta'] = 'Média da Liga' 
                    League_Mean.insert(0, 'Atleta', League_Mean.pop('Atleta'))
                    League_Mean = League_Mean.rename(columns={'Ações_Defensivas_BemSucedidas_LM':'Ações_Defensivas_BemSucedidas', 'Duelos_Defensivos_Ganhos_LM':'Duelos_Defensivos_Ganhos', 'Duelos_Aéreos_Ganhos_LM':'Duelos_Aéreos_Ganhos',
                                                        'Finalizações_Bloqueadas_LM':'Finalizações_Bloqueadas', 'Interceptações_Ajustadas_a_Posse_LM':'Interceptações_Ajustadas_a_Posse', 'Passes_Longos_Certos_LM':'Passes_Longos_Certos', 
                                                        'Passes_Frontais_Certos_LM':'Passes_Frontais_Certos', 'Passes_Progressivos_Certos_LM':'Passes_Progressivos_Certos', 'Passes_Laterais_Certos_LM':'Passes_Laterais_Certos', 'Duelos_Ofensivos_Ganhos_LM':'Duelos_Ofensivos_Ganhos', 
                                                        'Dribles_BemSucedidos_LM':'Dribles_BemSucedidos', 'Corridas_Progressivas_LM':'Corridas_Progressivas', 'Passes_TerçoFinal_Certos_LM':'Passes_TerçoFinal_Certos'})
                    #Merging Dataframes
                    #Adjusting Player Dataframe
                    #Concatenating Dataframes
                    Role_8_Mean_Charts = pd.concat([Role_8_Mean_Charts, League_Mean]).reset_index(drop=True)
                    #Role_8_Mean_Charts = Role_8_Mean_Charts.append(League_Mean).reset_index()

                    #Splitting Columns
                    Role_8_Mean_Charts_1 = Role_8_Mean_Charts.iloc[:, np.r_[0, 1:8]]
#                        st.dataframe(Role_8_Mean_Charts_1)
                    Role_8_Mean_Charts_2 = Role_8_Mean_Charts.iloc[:, np.r_[0, 8:14]]
#                        st.dataframe(Role_8_Mean_Charts_2)

                    # Preparing Graph 1
                    # Get Parameters

                    params = list(Role_8_Mean_Charts_1.columns)
                    params = params[1:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_y_Mean_Charts[params][x])
                        a = a
                        b = max(Role_y_Mean_Charts[params][x])
                        b = b
                        ranges.append((a, b))

                    for x in range(len(Role_8_Mean_Charts_1['Atleta'])):
                        if Role_8_Mean_Charts_1['Atleta'][x] == jogadores:
                            a_values = Role_8_Mean_Charts_1.iloc[x].values.tolist()
                        if Role_8_Mean_Charts_1['Atleta'][x] == 'Média da Liga':
                            b_values = Role_8_Mean_Charts_1.iloc[x].values.tolist()
                                
                    a_values = a_values[1:]
                    b_values = b_values[1:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        title_name_2 = 'Média da Liga',
                        title_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll features are per90'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    plt.savefig('Player&League_Comparison_1.png')
                    st.pyplot(fig)
                    fig.savefig('Player&League_Comparison_1.png', dpi=600, bbox_inches="tight")

                    # Preparing Graph 2
                    # Get Parameters

                    params = list(Role_8_Mean_Charts_2.columns)
                    params = params[1:]
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_y_Mean_Charts[params][x])
                        a = a
                        b = max(Role_y_Mean_Charts[params][x])
                        b = b
                        ranges.append((a, b))

                    for x in range(len(Role_8_Mean_Charts_2['Atleta'])):
                        if Role_8_Mean_Charts_2['Atleta'][x] == jogadores:
                            a_values = Role_8_Mean_Charts_2.iloc[x].values.tolist()
                        if Role_8_Mean_Charts_2['Atleta'][x] == 'Média da Liga':
                            b_values = Role_8_Mean_Charts_2.iloc[x].values.tolist()
                                
                    a_values = a_values[1:]
                    b_values = b_values[1:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        title_name_2 = 'Média da Liga',
                        title_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll features are per90'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    plt.savefig('Player&League_Comparison_1.png')
                    st.pyplot(fig)
                    fig.savefig('Player&League_Comparison_1.png', dpi=600, bbox_inches="tight")

                    ##########################################################################################################################################

                    # Plotting KDE Comparison Graphs
                    mais_gráficos = st.button("Para gráficos adicionais por métrica, clique")
                    if mais_gráficos:
                        st.markdown("<h4 style='text-align: center;'><br>Posição Relativa do Jogador na Liga<br></h4>", unsafe_allow_html=True)
                        # Select columns from 4 to 10 (7 columns in total)
                        selected_columns = Role_y_Mean_Charts.iloc[:, 4:17]

                        # Plot KDE for each selected column in pairs
                        for i in range(0, len(selected_columns.columns), 2):
                            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 4))  # Always create two subplots

                            # Plot first column in the pair
                            density = sns.kdeplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i], ax=ax1, color='blue', bw_adjust=0.5)
                            sns.rugplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i], ax=ax1, color='red', height=0.05)  # Adding rug plot
                            x_vals = density.get_lines()[0].get_xdata()
                            y_vals = density.get_lines()[0].get_ydata()
                            ax1.fill_between(x_vals, y_vals, color='lightblue', alpha=0.5)
                            player_value = Role_y_Mean_Charts.loc[Role_y_Mean_Charts['Atleta'] == jogadores, selected_columns.columns[i]].values[0]
                            ax1.axvline(x=player_value, color='red', linewidth=2)
                            ax1.text(player_value + 0.01 * (ax1.get_xlim()[1] - ax1.get_xlim()[0]), ax1.get_ylim()[0] + (ax1.get_ylim()[1] - ax1.get_ylim()[0]) * 0.1, jogadores, color='red', fontsize=17, verticalalignment='bottom')
                            ax1.set_title(f'{selected_columns.columns[i]}', fontsize=18, fontweight='bold')
                            ax1.spines['top'].set_visible(False)
                            ax1.spines['right'].set_visible(False)
                            ax1.spines['left'].set_visible(False)
                            ax1.set_xlabel('')
                            ax1.set_ylabel('')
                            ax1.tick_params(axis='x', labelsize=14)
                            ax1.tick_params(axis='y', which='both', left=False, labelleft=False)


                            if i + 1 < len(selected_columns.columns):  # Check if there is a second plot to render
                                # Plot second column in the pair
                                density = sns.kdeplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i+1], ax=ax2, color='blue', bw_adjust=0.5)
                                sns.rugplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i+1], ax=ax2, color='red', height=0.05)  # Adding rug plot
                                x_vals = density.get_lines()[0].get_xdata()
                                y_vals = density.get_lines()[0].get_ydata()
                                ax2.fill_between(x_vals, y_vals, color='lightblue', alpha=0.5)                                
                                player_value = Role_y_Mean_Charts.loc[Role_y_Mean_Charts['Atleta'] == jogadores, selected_columns.columns[i+1]].values[0]
                                ax2.axvline(x=player_value, color='red', linewidth=2)
                                ax2.text(player_value + 0.01 * (ax2.get_xlim()[1] - ax2.get_xlim()[0]), ax2.get_ylim()[0] + (ax2.get_ylim()[1] - ax2.get_ylim()[0]) * 0.1, jogadores, color='red', fontsize=17, verticalalignment='bottom')
                                ax2.set_title(f'{selected_columns.columns[i+1]}', fontsize=18, fontweight='bold')
                                ax2.spines['top'].set_visible(False)
                                ax2.spines['right'].set_visible(False)
                                ax2.spines['left'].set_visible(False)
                                ax2.set_xlabel('')
                                ax2.set_ylabel('')
                                ax2.tick_params(axis='x', labelsize=14)
                                ax2.tick_params(axis='y', which='both', left=False, labelleft=False)

                            else:
                                # Instead of hiding the second axis, we simply clear it
                                ax2.clear()
                                ax2.axis('off')  # Turn off the axis if not used

                            plt.tight_layout()  # Adjust layout to prevent overlap
                            st.pyplot(fig)

                        #####################################################################################################################
                        #####################################################################################################################
                        ##################################################################################################################### 
                        #####################################################################################################################
                elif posição == ("Primeiro Volante"):
                    ##################################################################################################################### 
                    #####################################################################################################################
                    # PRIMEIRO VOLANTE DEFENSIVO
                    ##################################################################################################################### 
                    #####################################################################################################################
                    # Elaborar Tabela de Abertura com Rating, Ranking, Percentil
                    tabela_1 = pd.read_csv('PlayerAnalysis_Role_9.csv')
                    tabela_1  = tabela_1.iloc[:, np.r_[6, 11, 23, 27:31, 25, 8]]
                    tabela_1 = tabela_1[(tabela_1['Atleta']==jogadores)&(tabela_1['Código_Posição_Wyscout']==7)&(tabela_1['Versão_Temporada']==temporada)&(tabela_1['Liga']==liga)]
                    clube = tabela_1.iat[0, 8]
                    rating = tabela_1.iat[0, 3]
                    ranking = tabela_1.iat[0,4]
                    percentil = tabela_1.iat[0,6]
                    size = tabela_1.iat[0,5]
                    fontsize = 20
                    # Texto de Abertura
                    markdown_amount_1 = f"<div style='text-align:center; font-size:{fontsize}px'>{jogadores:}</div>"
                    markdown_amount_2 = f"<div style='text-align:center; font-size:{fontsize}px'>{clube:}</div>"
                    st.markdown("<h4 style='text-align: center;'>Jogador Selecionado</b></h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_1, unsafe_allow_html=True)
                    st.markdown(markdown_amount_2, unsafe_allow_html=True)
                    st.markdown("---")
                    ##################################################################################################################### 
                    #####################################################################################################################
                    # Dados Básicos do Jogador
                    tabela_a  = pd.read_csv("PlayerAnalysis_Role_9.csv")
                    tabela_a = tabela_a.iloc[:, np.r_[6, 8, 12:18, 19:22, 11, 23, 25]]
                    tabela_a = tabela_a[(tabela_a['Atleta']==jogadores)&(tabela_a['Código_Posição_Wyscout']==7)&(tabela_a['Versão_Temporada']==temporada)&(tabela_a['Liga']==liga)]
                    tabela_a  = tabela_a.iloc[:, np.r_[0:3, 4:10]]
                    st.markdown("<h4 style='text-align: center;'>Dados Básicos</b></h4>", unsafe_allow_html=True)
                    #st.dataframe(tabela_a, use_container_width=True, hide_index=True)

                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index(drop=True)
                        df = df.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Valor_Mercado': 'Valor', 'Nacionalidade': 'Nacional'})
                        formatter = {"Idade": "{:.0f}"}
                        # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px',
                                            'font-size': '15px'})

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML without the index and display it
                        styled_html = style_table(tabela_a).to_html(escape=False, index=False, hide_index=True)
                        st.markdown(styled_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    ##################################################################################################################### 
                    #####################################################################################################################
                    st.markdown("<h3 style='text-align: center;'><br>PRIMEIRO VOLANTE DEFENSIVO</b></h3>", unsafe_allow_html=True)
                    # Rating/Ranking/Percentil
                    markdown_amount_3 = f"<div style='text-align:center; font-size:{fontsize}px'>{rating:}</div>"
                    markdown_amount_4 = f"<div style='text-align:center; font-size:{fontsize}px'>{ranking:}</div>"
                    markdown_amount_5 = f"<div style='text-align:center; font-size:{fontsize}px'>{percentil:}</div>"
                    markdown_amount_6 = f"<div style='text-align:center; font-size:{fontsize}px'>(Total de {size:} jogadores na Liga)</div>"
                    st.markdown("<h4 style='text-align: center;'>Rating/Ranking/Percentil do Jogador na Liga/Temporada</h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_6, unsafe_allow_html=True)
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.markdown("<h4 style='text-align: center;'>Rating</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_3, unsafe_allow_html=True)
                    with col2:
                        st.markdown("<h4 style='text-align: center;'>Ranking</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_4, unsafe_allow_html=True)
                    with col3:
                        st.markdown("<h4 style='text-align: center;'>Percentil</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_5, unsafe_allow_html=True)
                    st.markdown("---")
                    #####################################################################################################################
                    #####################################################################################################################
                    #####################################################################################################################
                    #####################################################################################################################

                    # PRIMEIRO VOLANTE CONSTRUTOR
                    # Elaborar Tabela de Abertura com Rating, Ranking, Percentil
                    tabela_1 = pd.read_csv('PlayerAnalysis_Role_10.csv')
                    tabela_1  = tabela_1.iloc[:, np.r_[11, 16, 28, 32:36, 30, 13]]
                    tabela_1 = tabela_1[(tabela_1['Atleta']==jogadores)&(tabela_1['Código_Posição_Wyscout']==7)&(tabela_1['Versão_Temporada']==temporada)&(tabela_1['Liga']==liga)]
                    clube = tabela_1.iat[0, 8]
                    rating = tabela_1.iat[0, 3]
                    ranking = tabela_1.iat[0,4]
                    percentil = tabela_1.iat[0,6]
                    size = tabela_1.iat[0,5]
                    fontsize = 20
                    # Texto de Abertura
                    st.markdown("<h3 style='text-align: center;'>PRIMEIRO VOLANTE CONSTRUTOR</b></h3>", unsafe_allow_html=True)
                    # Rating/Ranking/Percentil
                    markdown_amount_3 = f"<div style='text-align:center; font-size:{fontsize}px'>{rating:}</div>"
                    markdown_amount_4 = f"<div style='text-align:center; font-size:{fontsize}px'>{ranking:}</div>"
                    markdown_amount_5 = f"<div style='text-align:center; font-size:{fontsize}px'>{percentil:}</div>"
                    markdown_amount_6 = f"<div style='text-align:center; font-size:{fontsize}px'>(Total de {size:} jogadores na Liga)</div>"
                    st.markdown("<h4 style='text-align: center;'>Rating/Ranking/Percentil do Jogador na Liga/Temporada</h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_6, unsafe_allow_html=True)
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.markdown("<h4 style='text-align: center;'>Rating</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_3, unsafe_allow_html=True)
                    with col2:
                        st.markdown("<h4 style='text-align: center;'>Ranking</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_4, unsafe_allow_html=True)
                    with col3:
                        st.markdown("<h4 style='text-align: center;'>Percentil</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_5, unsafe_allow_html=True)
                    st.markdown("---")
                    ##################################################################################################################### 
                    #####################################################################################################################
                    # PRIMEIRO VOLANTE EQUILIBRADO
                    # Elaborar Tabela de Abertura com Rating, Ranking, Percentil
                    tabela_1 = pd.read_csv('PlayerAnalysis_Role_11.csv')
                    tabela_1  = tabela_1.iloc[:, np.r_[13, 18, 30, 34:38, 32, 15]]
                    tabela_1 = tabela_1[(tabela_1['Atleta']==jogadores)&(tabela_1['Código_Posição_Wyscout']==7)&(tabela_1['Versão_Temporada']==temporada)&(tabela_1['Liga']==liga)]
                    clube = tabela_1.iat[0, 8]
                    rating = tabela_1.iat[0, 3]
                    ranking = tabela_1.iat[0,4]
                    percentil = tabela_1.iat[0,6]
                    size = tabela_1.iat[0,5]
                    fontsize = 20
                    # Texto de Abertura
                    st.markdown("<h3 style='text-align: center;'>PRIMEIRO VOLANTE EQUILIBRADO</b></h3>", unsafe_allow_html=True)
                    # Rating/Ranking/Percentil
                    markdown_amount_3 = f"<div style='text-align:center; font-size:{fontsize}px'>{rating:}</div>"
                    markdown_amount_4 = f"<div style='text-align:center; font-size:{fontsize}px'>{ranking:}</div>"
                    markdown_amount_5 = f"<div style='text-align:center; font-size:{fontsize}px'>{percentil:}</div>"
                    markdown_amount_6 = f"<div style='text-align:center; font-size:{fontsize}px'>(Total de {size:} jogadores na Liga)</div>"
                    st.markdown("<h4 style='text-align: center;'>Rating/Ranking/Percentil do Jogador na Liga/Temporada</h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_6, unsafe_allow_html=True)
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.markdown("<h4 style='text-align: center;'>Rating</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_3, unsafe_allow_html=True)
                    with col2:
                        st.markdown("<h4 style='text-align: center;'>Ranking</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_4, unsafe_allow_html=True)
                    with col3:
                        st.markdown("<h4 style='text-align: center;'>Percentil</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_5, unsafe_allow_html=True)
                    st.markdown("---")
                    ##################################################################################################################### 
                    #####################################################################################################################
                    # Elaborar Tabela com Métricas do Atleta
                    tabela_2 = pd.read_csv('11_Role_Volante_Equilibrado.csv')
                    tabela_2 = tabela_2.iloc[:, np.r_[1, 18:29, 6, 29, 31]]
                    tabela_2 = tabela_2[(tabela_2['Atleta']==jogadores)&(tabela_2['Código_Posição_Wyscout']==7)&(tabela_2['Versão_Temporada']==temporada)&(tabela_2['Liga']==liga)]
                    tabela_2  = tabela_2.iloc[:, np.r_[0:12]]
                    tabela_2  = pd.DataFrame(tabela_2)
                    tabela_2 = tabela_2.round(decimals=2)
                    # Média da Liga
                    tabela_b = pd.read_csv('11_Role_Volante_Equilibrado.csv')
                    tabela_b = tabela_b.iloc[:, np.r_[1, 18:29, 6, 29, 31]]
                    tabela_b = tabela_b[(tabela_b['Código_Posição_Wyscout']==7)&(tabela_b['Versão_Temporada']==temporada)&(tabela_b['Liga']==liga)]
                    tabela_b = tabela_b.iloc[:, np.r_[1:12, 13]]
                    tabela_b = tabela_b.round(decimals=2)
                    tabela_c = (tabela_b.groupby('Liga')[['Ações_Defensivas_BemSucedidas', 'Duelos_Defensivos_Ganhos', 'Duelos_Aéreos_Ganhos', 
                                                            'Passes_Longos_Certos', 'Passes_Frontais_Certos', 'Passes_Progressivos_Certos', 
                                                            'Ações_Ofensivas_BemSucedidas', 'Duelos_Ofensivos_Ganhos', 'Dribles_BemSucedidos', 
                                                            'Corridas_Progressivas', 'Passes_TerçoFinal_Certos']].mean())
                    tabela_c = tabela_c.round(decimals=2)
                    Atleta = ['Média da Liga']
                    tabela_c['Atleta'] = Atleta 
                    tabela_c.insert(0, 'Atleta', tabela_c.pop('Atleta'))
                    # Percentil na Liga
                    tabela_d = pd.read_csv('PlayerAnalysis_Role_11.csv')
                    tabela_d = tabela_d.iloc[:, np.r_[60:71, 13, 18, 30, 32]]
                    tabela_d = tabela_d[(tabela_d['Atleta']==jogadores)&(tabela_d['Código_Posição_Wyscout']==7)&(tabela_d['Versão_Temporada']==temporada)&(tabela_d['Liga']==liga)]
                    tabela_d = tabela_d.iloc[:, np.r_[0:12]]
                    tabela_d = tabela_d.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 'Duelos_Defensivos_Ganhos_Percentil':'Duelos_Defensivos_Ganhos', 'Duelos_Aéreos_Ganhos_Percentil':'Duelos_Aéreos_Ganhos',
                                                        'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 'Passes_Frontais_Certos_Percentil':'Passes_Frontais_Certos', 'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos',
                                                        'Ações_Ofensivas_BemSucedidas_Percentil':'Ações_Ofensivas_BemSucedidas', 'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos', 'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos',
                                                        'Corridas_Progressivas_Percentil':'Corridas_Progressivas', 'Passes_TerçoFinal_Certos_Percentil':'Passes_TerçoFinal_Certos'})
                    Atleta = ['Percentil na Liga']
                    tabela_d['Atleta'] = Atleta 
                    tabela_d.insert(0, 'Atleta', tabela_d.pop('Atleta'))
                    tabela_2 = pd.concat([tabela_2, tabela_c, tabela_d]).reset_index(drop=True)
#                        tabela_2 = tabela_2.append(tabela_c).reset_index()
#                        tabela_2 = tabela_2.append(tabela_d).reset_index()
                    tabela_2 = tabela_2.transpose()
#                        tabela_2 = tabela_2.drop([tabela_2.index[0], tabela_2.index[1]])
                    st.markdown("<h4 style='text-align: center;'>Desempenho do Jogador na Liga/Temporada</h4>", unsafe_allow_html=True)
                    #st.dataframe(tabela_2, use_container_width=True)

                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index()  # If you want the index to be a visible column
                        new_header = df.iloc[0]  # Capture the first row to use as column headers
                        df = df[1:]  # Remove the first row from the data
                        df.columns = new_header  # Set the new column headers
                        first_column_name = df.columns[1]  # Adjusted for the added index column
                        # Ensure 'Rating' is rounded and formatted to 2 decimal places during styling
                        formatter = {first_column_name: "{:.2f}", "Média da Liga": "{:.2f}", "Percentil na Liga": "{:.0f}"}
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px', 'font-size': '15px', 'margin': 'auto'})  # Adjust this for centering

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML, ensure the index is shown and wrapped in a center-aligned div
                        styled_html = style_table(tabela_2).to_html(escape=False, index=False, hide_index=False)
                        center_html = f"<div style='margin-left: auto; margin-right: auto; width: fit-content;'>{styled_html}</div>"
                        st.markdown(center_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    ##################################################################################################################### 
                    #####################################################################################################################

                    #Plotar Gráfico Alternativo
                    # Player Comparison Data
                    st.markdown("<h4 style='text-align: center;'><br>Comparativo do Jogador com a Média da Liga</h4>", unsafe_allow_html=True)
                    Role_11_Mean_Charts = pd.read_csv('11_Role_Volante_Equilibrado.csv')
                    #PLOTTING COMPARISON BETWEEN 1 PLAYER AND LEAGUE MEAN
                    #Determining Club and League 
                    Role_x_Mean_Charts  = Role_11_Mean_Charts.iloc[:, np.r_[1, 3, 29, 31, 18:29]]
                    Role_x_Mean_Charts = Role_x_Mean_Charts[(Role_x_Mean_Charts['Versão_Temporada']==temporada)&(Role_x_Mean_Charts['Liga']==liga)]

                    Role_x_Mean_Charts['Ações_Defensivas_BemSucedidas_LM'] = Role_x_Mean_Charts['Ações_Defensivas_BemSucedidas'].mean()
                    Role_x_Mean_Charts['Duelos_Defensivos_Ganhos_LM'] = Role_x_Mean_Charts['Duelos_Defensivos_Ganhos'].mean()
                    Role_x_Mean_Charts['Duelos_Aéreos_Ganhos_LM'] = Role_x_Mean_Charts['Duelos_Aéreos_Ganhos'].mean()
                    Role_x_Mean_Charts['Passes_Longos_Certos_LM'] = Role_x_Mean_Charts['Passes_Longos_Certos'].mean()
                    Role_x_Mean_Charts['Passes_Frontais_Certos_LM'] = Role_x_Mean_Charts['Passes_Frontais_Certos'].mean()
                    Role_x_Mean_Charts['Passes_Progressivos_Certos_LM'] = Role_x_Mean_Charts['Passes_Progressivos_Certos'].mean()
                    Role_x_Mean_Charts['Ações_Ofensivas_BemSucedidas_LM'] = Role_x_Mean_Charts['Ações_Ofensivas_BemSucedidas'].mean()
                    Role_x_Mean_Charts['Duelos_Ofensivos_Ganhos_LM'] = Role_x_Mean_Charts['Duelos_Ofensivos_Ganhos'].mean()
                    Role_x_Mean_Charts['Dribles_BemSucedidos_LM'] = Role_x_Mean_Charts['Dribles_BemSucedidos'].mean()
                    Role_x_Mean_Charts['Corridas_Progressivas_LM'] = Role_x_Mean_Charts['Corridas_Progressivas'].mean()
                    Role_x_Mean_Charts['Passes_TerçoFinal_Certos_LM'] = Role_x_Mean_Charts['Passes_TerçoFinal_Certos'].mean()
                    
                    Role_x_Mean_Charts  = pd.DataFrame(Role_x_Mean_Charts)
                    Role_y_Mean_Charts  = pd.DataFrame(Role_x_Mean_Charts)

                    
                    Role_x_Mean_Charts = Role_x_Mean_Charts[(Role_x_Mean_Charts['Atleta']==jogadores)]
                    
                    #Selecting data to compare 1 player and league mean
                    Role_11_Mean_Charts  = Role_x_Mean_Charts.iloc[:, np.r_[0, 4:15]]

                    #Preparing League Mean Data
                    League_Mean = Role_x_Mean_Charts.iloc[:, np.r_[15:26]]
                    League_Mean['Atleta'] = 'Média da Liga' 
                    League_Mean.insert(0, 'Atleta', League_Mean.pop('Atleta'))
                    League_Mean = League_Mean.rename(columns={'Ações_Defensivas_BemSucedidas_LM':'Ações_Defensivas_BemSucedidas', 'Duelos_Defensivos_Ganhos_LM':'Duelos_Defensivos_Ganhos', 'Duelos_Aéreos_Ganhos_LM':'Duelos_Aéreos_Ganhos',
                                                        'Passes_Longos_Certos_LM':'Passes_Longos_Certos', 'Passes_Frontais_Certos_LM':'Passes_Frontais_Certos', 'Passes_Progressivos_Certos_LM':'Passes_Progressivos_Certos', 
                                                        'Ações_Ofensivas_BemSucedidas_LM':'Ações_Ofensivas_BemSucedidas', 'Duelos_Ofensivos_Ganhos_LM':'Duelos_Ofensivos_Ganhos', 
                                                        'Dribles_BemSucedidos_LM':'Dribles_BemSucedidos', 'Corridas_Progressivas_LM':'Corridas_Progressivas', 'Passes_TerçoFinal_Certos_LM':'Passes_TerçoFinal_Certos'})
                    #Merging Dataframes
                    #Adjusting Player Dataframe
                    #Concatenating Dataframes
                    Role_11_Mean_Charts = pd.concat([Role_11_Mean_Charts, League_Mean]).reset_index(drop=True)
                    #Role_11_Mean_Charts = Role_11_Mean_Charts.append(League_Mean).reset_index()

                    #Splitting Columns
                    Role_11_Mean_Charts_1 = Role_11_Mean_Charts.iloc[:, np.r_[0, 1:7]]
                    Role_11_Mean_Charts_2 = Role_11_Mean_Charts.iloc[:, np.r_[0, 7:12]]


                    # Preparing Graph 1
                    # Get Parameters

                    params = list(Role_11_Mean_Charts_1.columns)
                    params = params[1:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_y_Mean_Charts[params][x])
                        a = a
                        b = max(Role_y_Mean_Charts[params][x])
                        b = b
                        ranges.append((a, b))

                    for x in range(len(Role_11_Mean_Charts_1['Atleta'])):
                        if Role_11_Mean_Charts_1['Atleta'][x] == jogadores:
                            a_values = Role_11_Mean_Charts_1.iloc[x].values.tolist()
                        if Role_11_Mean_Charts_1['Atleta'][x] == 'Média da Liga':
                            b_values = Role_11_Mean_Charts_1.iloc[x].values.tolist()
                                
                    a_values = a_values[1:]
                    b_values = b_values[1:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        title_name_2 = 'Média da Liga',
                        title_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll features are per90'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    plt.savefig('Player&League_Comparison_1.png')
                    st.pyplot(fig)
                    fig.savefig('Player&League_Comparison_1.png', dpi=600, bbox_inches="tight")

                    # Preparing Graph 2
                    # Get Parameters

                    params = list(Role_11_Mean_Charts_2.columns)
                    params = params[1:]
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_y_Mean_Charts[params][x])
                        a = a
                        b = max(Role_y_Mean_Charts[params][x])
                        b = b
                        ranges.append((a, b))

                    for x in range(len(Role_11_Mean_Charts_2['Atleta'])):
                        if Role_11_Mean_Charts_2['Atleta'][x] == jogadores:
                            a_values = Role_11_Mean_Charts_2.iloc[x].values.tolist()
                        if Role_11_Mean_Charts_2['Atleta'][x] == 'Média da Liga':
                            b_values = Role_11_Mean_Charts_2.iloc[x].values.tolist()
                                
                    a_values = a_values[1:]
                    b_values = b_values[1:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        title_name_2 = 'Média da Liga',
                        title_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll features are per90'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    plt.savefig('Player&League_Comparison_1.png')
                    st.pyplot(fig)
                    fig.savefig('Player&League_Comparison_1.png', dpi=600, bbox_inches="tight")

                    ##########################################################################################################################################

                    # Plotting KDE Comparison Graphs
                    mais_gráficos = st.button("Para gráficos adicionais por métrica, clique")
                    if mais_gráficos:
                        st.markdown("<h4 style='text-align: center;'><br>Posição Relativa do Jogador na Liga<br></h4>", unsafe_allow_html=True)
                        # Select columns from 4 to 10 (7 columns in total)
                        selected_columns = Role_y_Mean_Charts.iloc[:, 4:15]

                        # Plot KDE for each selected column in pairs
                        for i in range(0, len(selected_columns.columns), 2):
                            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 4))  # Always create two subplots

                            # Plot first column in the pair
                            density = sns.kdeplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i], ax=ax1, color='blue', bw_adjust=0.5)
                            sns.rugplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i], ax=ax1, color='blue', height=0.05)  # Adding rug plot
                            x_vals = density.get_lines()[0].get_xdata()
                            y_vals = density.get_lines()[0].get_ydata()
                            ax1.fill_between(x_vals, y_vals, color='lightblue', alpha=0.5)
                            player_value = Role_y_Mean_Charts.loc[Role_y_Mean_Charts['Atleta'] == jogadores, selected_columns.columns[i]].values[0]
                            ax1.axvline(x=player_value, color='red', linewidth=2)
                            ax1.text(player_value + 0.01 * (ax1.get_xlim()[1] - ax1.get_xlim()[0]), ax1.get_ylim()[0] + (ax1.get_ylim()[1] - ax1.get_ylim()[0]) * 0.1, jogadores, color='red', fontsize=17, verticalalignment='bottom')
                            ax1.set_title(f'{selected_columns.columns[i]}', fontsize=18, fontweight='bold')
                            ax1.spines['top'].set_visible(False)
                            ax1.spines['right'].set_visible(False)
                            ax1.spines['left'].set_visible(False)
                            ax1.set_xlabel('')
                            ax1.set_ylabel('')
                            ax1.tick_params(axis='x', labelsize=14)
                            ax1.tick_params(axis='y', which='both', left=False, labelleft=False)


                            if i + 1 < len(selected_columns.columns):  # Check if there is a second plot to render
                                # Plot second column in the pair
                                density = sns.kdeplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i+1], ax=ax2, color='blue', bw_adjust=0.5)
                                sns.rugplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i+1], ax=ax2, color='red', height=0.05)  # Adding rug plot
                                x_vals = density.get_lines()[0].get_xdata()
                                y_vals = density.get_lines()[0].get_ydata()
                                ax2.fill_between(x_vals, y_vals, color='lightblue', alpha=0.5)                                
                                player_value = Role_y_Mean_Charts.loc[Role_y_Mean_Charts['Atleta'] == jogadores, selected_columns.columns[i+1]].values[0]
                                ax2.axvline(x=player_value, color='red', linewidth=2)
                                ax2.text(player_value + 0.01 * (ax2.get_xlim()[1] - ax2.get_xlim()[0]), ax2.get_ylim()[0] + (ax2.get_ylim()[1] - ax2.get_ylim()[0]) * 0.1, jogadores, color='red', fontsize=17, verticalalignment='bottom')
                                ax2.set_title(f'{selected_columns.columns[i+1]}', fontsize=18, fontweight='bold')
                                ax2.spines['top'].set_visible(False)
                                ax2.spines['right'].set_visible(False)
                                ax2.spines['left'].set_visible(False)
                                ax2.set_xlabel('')
                                ax2.set_ylabel('')
                                ax2.tick_params(axis='x', labelsize=14)
                                ax2.tick_params(axis='y', which='both', left=False, labelleft=False)

                            else:
                                # Instead of hiding the second axis, we simply clear it
                                ax2.clear()
                                ax2.axis('off')  # Turn off the axis if not used

                            plt.tight_layout()  # Adjust layout to prevent overlap
                            st.pyplot(fig)

                        #####################################################################################################################
                        #####################################################################################################################
                        ##################################################################################################################### 
                        #####################################################################################################################
                elif posição == ("Segundo Volante"):
                    ##################################################################################################################### 
                    #####################################################################################################################
                    # SEGUNDO VOLANTE BOX TO BOX
                    # Elaborar Tabela de Abertura com Rating, Ranking, Percentil
                    tabela_1 = pd.read_csv('PlayerAnalysis_Role_12.csv')
                    tabela_1  = tabela_1.iloc[:, np.r_[15, 20, 32, 36:40, 34, 17]]
                    tabela_1 = tabela_1[(tabela_1['Atleta']==jogadores)&(tabela_1['Código_Posição_Wyscout']==8)&(tabela_1['Versão_Temporada']==temporada)&(tabela_1['Liga']==liga)]
                    clube = tabela_1.iat[0, 8]
                    rating = tabela_1.iat[0, 3]
                    ranking = tabela_1.iat[0,4]
                    percentil = tabela_1.iat[0,6]
                    size = tabela_1.iat[0,5]
                    fontsize = 20
                    # Texto de Abertura
                    markdown_amount_1 = f"<div style='text-align:center; font-size:{fontsize}px'>{jogadores:}</div>"
                    markdown_amount_2 = f"<div style='text-align:center; font-size:{fontsize}px'>{clube:}</div>"
                    st.markdown("<h4 style='text-align: center;'>Jogador Selecionado</b></h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_1, unsafe_allow_html=True)
                    st.markdown(markdown_amount_2, unsafe_allow_html=True)
                    st.markdown("---")
                    #####################################################################################################################
                    #####################################################################################################################
                    # Dados Básicos do Jogador
                    tabela_a  = pd.read_csv("PlayerAnalysis_Role_12.csv")
                    tabela_a = tabela_a.iloc[:, np.r_[15, 17, 21:27, 28:31, 20, 32, 34]]
                    tabela_a = tabela_a[(tabela_a['Atleta']==jogadores)&(tabela_a['Código_Posição_Wyscout']==8)&(tabela_a['Versão_Temporada']==temporada)&(tabela_a['Liga']==liga)]
                    tabela_a  = tabela_a.iloc[:, np.r_[0:3, 4:10]]
                    st.markdown("<h4 style='text-align: center;'>Dados Básicos</b></h4>", unsafe_allow_html=True)
                    #st.dataframe(tabela_a, use_container_width=True, hide_index=True)

                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index(drop=True)
                        df = df.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Valor_Mercado': 'Valor', 'Nacionalidade': 'Nacional'})
                        formatter = {"Idade": "{:.0f}"}
                        # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px',
                                            'font-size': '15px'})

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML without the index and display it
                        styled_html = style_table(tabela_a).to_html(escape=False, index=False, hide_index=True)
                        st.markdown(styled_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    #####################################################################################################################
                    #####################################################################################################################
                    st.markdown("<h3 style='text-align: center;'>SEGUNDO VOLANTE BOX TO BOX</b></h3>", unsafe_allow_html=True)
                    # Rating/Ranking/Percentil
                    markdown_amount_3 = f"<div style='text-align:center; font-size:{fontsize}px'>{rating:}</div>"
                    markdown_amount_4 = f"<div style='text-align:center; font-size:{fontsize}px'>{ranking:}</div>"
                    markdown_amount_5 = f"<div style='text-align:center; font-size:{fontsize}px'>{percentil:}</div>"
                    markdown_amount_6 = f"<div style='text-align:center; font-size:{fontsize}px'>(Total de {size:} jogadores na Liga)</div>"
                    st.markdown("<h4 style='text-align: center;'>Rating/Ranking/Percentil do Jogador na Liga/Temporada</h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_6, unsafe_allow_html=True)
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.markdown("<h4 style='text-align: center;'>Rating</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_3, unsafe_allow_html=True)
                    with col2:
                        st.markdown("<h4 style='text-align: center;'>Ranking</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_4, unsafe_allow_html=True)
                    with col3:
                        st.markdown("<h4 style='text-align: center;'>Percentil</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_5, unsafe_allow_html=True)
                    st.markdown("---")
                    ##################################################################################################################### 
                    #####################################################################################################################
                    # SEGUNDO VOLANTE ORGANIZADOR
                    # Elaborar Tabela de Abertura com Rating, Ranking, Percentil
                    tabela_1 = pd.read_csv('PlayerAnalysis_Role_13.csv')
                    tabela_1  = tabela_1.iloc[:, np.r_[12, 17, 29, 33:37, 31, 14]]
                    tabela_1 = tabela_1[(tabela_1['Atleta']==jogadores)&(tabela_1['Código_Posição_Wyscout']==8)&(tabela_1['Versão_Temporada']==temporada)&(tabela_1['Liga']==liga)]
                    clube = tabela_1.iat[0, 8]
                    rating = tabela_1.iat[0, 3]
                    ranking = tabela_1.iat[0,4]
                    percentil = tabela_1.iat[0,6]
                    size = tabela_1.iat[0,5]
                    fontsize = 20
                    # Texto de Abertura
                    st.markdown("<h3 style='text-align: center;'>SEGUNDO VOLANTE ORGANIZADOR</b></h3>", unsafe_allow_html=True)
                    # Rating/Ranking/Percentil
                    markdown_amount_3 = f"<div style='text-align:center; font-size:{fontsize}px'>{rating:}</div>"
                    markdown_amount_4 = f"<div style='text-align:center; font-size:{fontsize}px'>{ranking:}</div>"
                    markdown_amount_5 = f"<div style='text-align:center; font-size:{fontsize}px'>{percentil:}</div>"
                    markdown_amount_6 = f"<div style='text-align:center; font-size:{fontsize}px'>(Total de {size:} jogadores na Liga)</div>"
                    st.markdown("<h4 style='text-align: center;'>Rating/Ranking/Percentil do Jogador na Liga/Temporada</h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_6, unsafe_allow_html=True)
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.markdown("<h4 style='text-align: center;'>Rating</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_3, unsafe_allow_html=True)
                    with col2:
                        st.markdown("<h4 style='text-align: center;'>Ranking</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_4, unsafe_allow_html=True)
                    with col3:
                        st.markdown("<h4 style='text-align: center;'>Percentil</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_5, unsafe_allow_html=True)
                    st.markdown("---")
                    ##################################################################################################################### 
                    #####################################################################################################################
                    # SEGUNDO VOLANTE EQUILIBRADO
                    # Elaborar Tabela de Abertura com Rating, Ranking, Percentil
                    tabela_1 = pd.read_csv('PlayerAnalysis_Role_14.csv')
                    tabela_1  = tabela_1.iloc[:, np.r_[15, 20, 32, 36:40, 34, 17]]
                    tabela_1 = tabela_1[(tabela_1['Atleta']==jogadores)&(tabela_1['Código_Posição_Wyscout']==8)&(tabela_1['Versão_Temporada']==temporada)&(tabela_1['Liga']==liga)]
                    clube = tabela_1.iat[0, 8]
                    rating = tabela_1.iat[0, 3]
                    ranking = tabela_1.iat[0,4]
                    percentil = tabela_1.iat[0,6]
                    size = tabela_1.iat[0,5]
                    fontsize = 20
                    # Texto de Abertura
                    st.markdown("<h3 style='text-align: center;'>SEGUNDO VOLANTE EQUILIBRADO</b></h3>", unsafe_allow_html=True)
                    # Rating/Ranking/Percentil
                    markdown_amount_3 = f"<div style='text-align:center; font-size:{fontsize}px'>{rating:}</div>"
                    markdown_amount_4 = f"<div style='text-align:center; font-size:{fontsize}px'>{ranking:}</div>"
                    markdown_amount_5 = f"<div style='text-align:center; font-size:{fontsize}px'>{percentil:}</div>"
                    markdown_amount_6 = f"<div style='text-align:center; font-size:{fontsize}px'>(Total de {size:} jogadores na Liga)</div>"
                    st.markdown("<h4 style='text-align: center;'>Rating/Ranking/Percentil do Jogador na Liga/Temporada</h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_6, unsafe_allow_html=True)
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.markdown("<h4 style='text-align: center;'>Rating</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_3, unsafe_allow_html=True)
                    with col2:
                        st.markdown("<h4 style='text-align: center;'>Ranking</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_4, unsafe_allow_html=True)
                    with col3:
                        st.markdown("<h4 style='text-align: center;'>Percentil</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_5, unsafe_allow_html=True)
                    st.markdown("---")
                    ##################################################################################################################### 
                    #####################################################################################################################
                    # Elaborar Tabela com Métricas do Atleta
                    tabela_2 = pd.read_csv('14_Role_Segundo_Volante_Equilibrado.csv')
                    tabela_2 = tabela_2.iloc[:, np.r_[1, 18:31, 6, 31, 33]]
                    tabela_2 = tabela_2[(tabela_2['Atleta']==jogadores)&(tabela_2['Código_Posição_Wyscout']==8)&(tabela_2['Versão_Temporada']==temporada)&(tabela_2['Liga']==liga)]
                    tabela_2  = tabela_2.iloc[:, np.r_[0:14]]
                    tabela_2  = pd.DataFrame(tabela_2)
                    tabela_2 = tabela_2.round(decimals=2)
                    # Média da Liga
                    tabela_b = pd.read_csv('14_Role_Segundo_Volante_Equilibrado.csv')
                    tabela_b = tabela_b.iloc[:, np.r_[1, 18:31, 6, 31, 33]]
                    tabela_b = tabela_b[(tabela_b['Código_Posição_Wyscout']==8)&(tabela_b['Versão_Temporada']==temporada)&(tabela_b['Liga']==liga)]
                    tabela_b = tabela_b.iloc[:, np.r_[1:14, 15]]
                    tabela_b = tabela_b.round(decimals=2)
                    tabela_c = (tabela_b.groupby('Liga')[['Ações_Defensivas_BemSucedidas', 'Duelos_Defensivos_Ganhos', 'Passes_Longos_Certos', 'Passes_Progressivos_Certos', 'Pisadas_Área',
                                                            'Dribles_BemSucedidos', 'Corridas_Progressivas', 'xG', 'xA', 'Assistência_Finalização', 'Passes_TerçoFinal_Certos',
                                                            'Deep_Completions', 'Passes_ÁreaPênalti_Certos']].mean())
                    tabela_c = tabela_c.round(decimals=2)
                    Atleta = ['Média da Liga']
                    tabela_c['Atleta'] = Atleta 
                    tabela_c.insert(0, 'Atleta', tabela_c.pop('Atleta'))
                    # Percentil na Liga
                    tabela_d = pd.read_csv('PlayerAnalysis_Role_14.csv')
                    tabela_d = tabela_d.iloc[:, np.r_[66:79, 15, 20, 32, 34]]
                    tabela_d = tabela_d[(tabela_d['Atleta']==jogadores)&(tabela_d['Código_Posição_Wyscout']==8)&(tabela_d['Versão_Temporada']==temporada)&(tabela_d['Liga']==liga)]
                    tabela_d = tabela_d.iloc[:, np.r_[0:13]]
                    tabela_d = tabela_d.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 'Duelos_Defensivos_Ganhos_Percentil':'Duelos_Defensivos_Ganhos', 
                                                        'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos',
                                                        'Pisadas_Área_Percentil':'Pisadas_Área', 'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos', 
                                                        'Corridas_Progressivas_Percentil':'Corridas_Progressivas', 'xG_Percentil':'xG', 'xA_Percentil':'xA', 
                                                        'Assistência_Finalização_Percentil':'Assistência_Finalização', 'Passes_TerçoFinal_Certos_Percentil':'Passes_TerçoFinal_Certos',
                                                        'Deep_Completions_Percentil':'Deep_Completions', 'Passes_ÁreaPênalti_Certos_Percentil':'Passes_ÁreaPênalti_Certos'})
                    Atleta = ['Percentil na Liga']
                    tabela_d['Atleta'] = Atleta 
                    tabela_d.insert(0, 'Atleta', tabela_d.pop('Atleta'))
                    tabela_2 = pd.concat([tabela_2, tabela_c, tabela_d]).reset_index(drop=True)
#                        tabela_2 = tabela_2.append(tabela_c).reset_index()
#                        tabela_2 = tabela_2.append(tabela_d).reset_index()
                    tabela_2 = tabela_2.transpose()
#                        tabela_2 = tabela_2.drop([tabela_2.index[0], tabela_2.index[1]])
                    st.markdown("<h4 style='text-align: center;'>Desempenho do Jogador na Liga/Temporada</h4>", unsafe_allow_html=True)
                    #st.dataframe(tabela_2, use_container_width=True)

                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index()  # If you want the index to be a visible column
                        new_header = df.iloc[0]  # Capture the first row to use as column headers
                        df = df[1:]  # Remove the first row from the data
                        df.columns = new_header  # Set the new column headers
                        first_column_name = df.columns[1]  # Adjusted for the added index column
                        # Ensure 'Rating' is rounded and formatted to 2 decimal places during styling
                        formatter = {first_column_name: "{:.2f}", "Média da Liga": "{:.2f}", "Percentil na Liga": "{:.0f}"}
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px', 'font-size': '15px', 'margin': 'auto'})  # Adjust this for centering

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML, ensure the index is shown and wrapped in a center-aligned div
                        styled_html = style_table(tabela_2).to_html(escape=False, index=False, hide_index=False)
                        center_html = f"<div style='margin-left: auto; margin-right: auto; width: fit-content;'>{styled_html}</div>"
                        st.markdown(center_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    ##################################################################################################################### 
                    #####################################################################################################################
                    #Plotar Gráfico Alternativo
                    # Player Comparison Data
                    st.markdown("<h4 style='text-align: center;'><br>Comparativo do Jogador com a Média da Liga</h4>", unsafe_allow_html=True)
                    Role_14_Mean_Charts = pd.read_csv('14_Role_Segundo_Volante_Equilibrado.csv')
                    #PLOTTING COMPARISON BETWEEN 1 PLAYER AND LEAGUE MEAN
                    #Determining Club and League 
                    Role_x_Mean_Charts  = Role_14_Mean_Charts.iloc[:, np.r_[1, 3, 31, 33, 18:31]]
                    Role_x_Mean_Charts = Role_x_Mean_Charts[(Role_x_Mean_Charts['Versão_Temporada']==temporada)&(Role_x_Mean_Charts['Liga']==liga)]

                    Role_x_Mean_Charts['Ações_Defensivas_BemSucedidas_LM'] = Role_x_Mean_Charts['Ações_Defensivas_BemSucedidas'].mean()
                    Role_x_Mean_Charts['Duelos_Defensivos_Ganhos_LM'] = Role_x_Mean_Charts['Duelos_Defensivos_Ganhos'].mean()
                    Role_x_Mean_Charts['Passes_Longos_Certos_LM'] = Role_x_Mean_Charts['Passes_Longos_Certos'].mean()
                    Role_x_Mean_Charts['Passes_Progressivos_Certos_LM'] = Role_x_Mean_Charts['Passes_Progressivos_Certos'].mean()
                    Role_x_Mean_Charts['Pisadas_Área_LM'] = Role_x_Mean_Charts['Pisadas_Área'].mean()
                    Role_x_Mean_Charts['Dribles_BemSucedidos_LM'] = Role_x_Mean_Charts['Dribles_BemSucedidos'].mean()
                    Role_x_Mean_Charts['Corridas_Progressivas_LM'] = Role_x_Mean_Charts['Corridas_Progressivas'].mean()
                    Role_x_Mean_Charts['xG_LM'] = Role_x_Mean_Charts['xG'].mean()
                    Role_x_Mean_Charts['xA_LM'] = Role_x_Mean_Charts['xA'].mean()
                    Role_x_Mean_Charts['Assistência_Finalização_LM'] = Role_x_Mean_Charts['Assistência_Finalização'].mean()
                    Role_x_Mean_Charts['Passes_TerçoFinal_Certos_LM'] = Role_x_Mean_Charts['Passes_TerçoFinal_Certos'].mean()
                    Role_x_Mean_Charts['Deep_Completions_LM'] = Role_x_Mean_Charts['Deep_Completions'].mean()
                    Role_x_Mean_Charts['Passes_ÁreaPênalti_Certos_LM'] = Role_x_Mean_Charts['Passes_ÁreaPênalti_Certos'].mean()
                    
                    Role_x_Mean_Charts  = pd.DataFrame(Role_x_Mean_Charts)
                    Role_y_Mean_Charts  = pd.DataFrame(Role_x_Mean_Charts)

                    
                    Role_x_Mean_Charts = Role_x_Mean_Charts[(Role_x_Mean_Charts['Atleta']==jogadores)]
                    
                    #Selecting data to compare 1 player and league mean
                    Role_14_Mean_Charts  = Role_x_Mean_Charts.iloc[:, np.r_[0, 4:17]]

                    #Preparing League Mean Data
                    League_Mean = Role_x_Mean_Charts.iloc[:, np.r_[17:30]]
                    League_Mean['Atleta'] = 'Média da Liga' 
                    League_Mean.insert(0, 'Atleta', League_Mean.pop('Atleta'))
                    League_Mean = League_Mean.rename(columns={'Ações_Defensivas_BemSucedidas_LM':'Ações_Defensivas_BemSucedidas', 'Duelos_Defensivos_Ganhos_LM':'Duelos_Defensivos_Ganhos',
                                                        'Passes_Longos_Certos_LM':'Passes_Longos_Certos', 'Passes_Progressivos_Certos_LM':'Passes_Progressivos_Certos', 
                                                        'Pisadas_Área_LM':'Pisadas_Área', 'Dribles_BemSucedidos_LM':'Dribles_BemSucedidos', 'Corridas_Progressivas_LM':'Corridas_Progressivas', 
                                                        'xA_LM':'xA', 'xG_LM':'xG','Assistência_Finalização_LM':'Assistência_Finalização', 'Passes_TerçoFinal_Certos_LM':'Passes_TerçoFinal_Certos', 
                                                        'Deep_Completions_LM':'Deep_Completions', 'Passes_ÁreaPênalti_Certos_LM':'Passes_ÁreaPênalti_Certos'})
                    #Merging Dataframes
                    #Adjusting Player Dataframe
                    #Concatenating Dataframes
                    Role_14_Mean_Charts = pd.concat([Role_14_Mean_Charts, League_Mean]).reset_index(drop=True)
                    #Role_14_Mean_Charts = Role_14_Mean_Charts.append(League_Mean).reset_index()

                    #Splitting Columns
                    Role_14_Mean_Charts_1 = Role_14_Mean_Charts.iloc[:, np.r_[0, 1:8]]
                    Role_14_Mean_Charts_2 = Role_14_Mean_Charts.iloc[:, np.r_[0, 8:14]]


                    # Preparing Graph 1
                    # Get Parameters

                    params = list(Role_14_Mean_Charts_1.columns)
                    params = params[1:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_y_Mean_Charts[params][x])
                        a = a
                        b = max(Role_y_Mean_Charts[params][x])
                        b = b
                        ranges.append((a, b))

                    for x in range(len(Role_14_Mean_Charts_1['Atleta'])):
                        if Role_14_Mean_Charts_1['Atleta'][x] == jogadores:
                            a_values = Role_14_Mean_Charts_1.iloc[x].values.tolist()
                        if Role_14_Mean_Charts_1['Atleta'][x] == 'Média da Liga':
                            b_values = Role_14_Mean_Charts_1.iloc[x].values.tolist()
                                
                    a_values = a_values[1:]
                    b_values = b_values[1:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        title_name_2 = 'Média da Liga',
                        title_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll features are per90'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    plt.savefig('Player&League_Comparison_1.png')
                    st.pyplot(fig)
                    fig.savefig('Player&League_Comparison_1.png', dpi=600, bbox_inches="tight")

                    # Preparing Graph 2
                    # Get Parameters

                    params = list(Role_14_Mean_Charts_2.columns)
                    params = params[1:]
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_y_Mean_Charts[params][x])
                        a = a
                        b = max(Role_y_Mean_Charts[params][x])
                        b = b
                        ranges.append((a, b))

                    for x in range(len(Role_14_Mean_Charts_2['Atleta'])):
                        if Role_14_Mean_Charts_2['Atleta'][x] == jogadores:
                            a_values = Role_14_Mean_Charts_2.iloc[x].values.tolist()
                        if Role_14_Mean_Charts_2['Atleta'][x] == 'Média da Liga':
                            b_values = Role_14_Mean_Charts_2.iloc[x].values.tolist()
                                
                    a_values = a_values[1:]
                    b_values = b_values[1:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        title_name_2 = 'Média da Liga',
                        title_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll features are per90'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    plt.savefig('Player&League_Comparison_2.png')
                    st.pyplot(fig)
                    fig.savefig('Player&League_Comparison_2.png', dpi=600, bbox_inches="tight")

                    ##########################################################################################################################################

                    # Plotting KDE Comparison Graphs
                    mais_gráficos = st.button("Para gráficos adicionais por métrica, clique")
                    if mais_gráficos:
                        st.markdown("<h4 style='text-align: center;'><br>Posição Relativa do Jogador na Liga<br></h4>", unsafe_allow_html=True)
                        # Select columns from 4 to 10 (7 columns in total)
                        selected_columns = Role_y_Mean_Charts.iloc[:, 4:17]

                        # Plot KDE for each selected column in pairs
                        for i in range(0, len(selected_columns.columns), 2):
                            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 4))  # Always create two subplots

                            # Plot first column in the pair
                            density = sns.kdeplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i], ax=ax1, color='blue', bw_adjust=0.5)
                            sns.rugplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i], ax=ax1, color='red', height=0.05)  # Adding rug plot
                            x_vals = density.get_lines()[0].get_xdata()
                            y_vals = density.get_lines()[0].get_ydata()
                            ax1.fill_between(x_vals, y_vals, color='lightblue', alpha=0.5)
                            player_value = Role_y_Mean_Charts.loc[Role_y_Mean_Charts['Atleta'] == jogadores, selected_columns.columns[i]].values[0]
                            ax1.axvline(x=player_value, color='red', linewidth=2)
                            ax1.text(player_value + 0.01 * (ax1.get_xlim()[1] - ax1.get_xlim()[0]), ax1.get_ylim()[0] + (ax1.get_ylim()[1] - ax1.get_ylim()[0]) * 0.1, jogadores, color='red', fontsize=17, verticalalignment='bottom')
                            ax1.set_title(f'{selected_columns.columns[i]}', fontsize=18, fontweight='bold')
                            ax1.spines['top'].set_visible(False)
                            ax1.spines['right'].set_visible(False)
                            ax1.spines['left'].set_visible(False)
                            ax1.set_xlabel('')
                            ax1.set_ylabel('')
                            ax1.tick_params(axis='x', labelsize=14)
                            ax1.tick_params(axis='y', which='both', left=False, labelleft=False)


                            if i + 1 < len(selected_columns.columns):  # Check if there is a second plot to render
                                # Plot second column in the pair
                                density = sns.kdeplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i+1], ax=ax2, color='blue', bw_adjust=0.5)
                                sns.rugplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i+1], ax=ax2, color='red', height=0.05)  # Adding rug plot
                                x_vals = density.get_lines()[0].get_xdata()
                                y_vals = density.get_lines()[0].get_ydata()
                                ax2.fill_between(x_vals, y_vals, color='lightblue', alpha=0.5)                                
                                player_value = Role_y_Mean_Charts.loc[Role_y_Mean_Charts['Atleta'] == jogadores, selected_columns.columns[i+1]].values[0]
                                ax2.axvline(x=player_value, color='red', linewidth=2)
                                ax2.text(player_value + 0.01 * (ax2.get_xlim()[1] - ax2.get_xlim()[0]), ax2.get_ylim()[0] + (ax2.get_ylim()[1] - ax2.get_ylim()[0]) * 0.1, jogadores, color='red', fontsize=17, verticalalignment='bottom')
                                ax2.set_title(f'{selected_columns.columns[i+1]}', fontsize=18, fontweight='bold')
                                ax2.spines['top'].set_visible(False)
                                ax2.spines['right'].set_visible(False)
                                ax2.spines['left'].set_visible(False)
                                ax2.set_xlabel('')
                                ax2.set_ylabel('')
                                ax2.tick_params(axis='x', labelsize=14)
                                ax2.tick_params(axis='y', which='both', left=False, labelleft=False)

                            else:
                                # Instead of hiding the second axis, we simply clear it
                                ax2.clear()
                                ax2.axis('off')  # Turn off the axis if not used

                            plt.tight_layout()  # Adjust layout to prevent overlap
                            st.pyplot(fig)

                        #####################################################################################################################
                        #####################################################################################################################
                        ##################################################################################################################### 
                        #####################################################################################################################
                elif posição == ("Meia"):
                    #####################################################################################################################
                    #####################################################################################################################
                    # MEIA ORGANIZADOR
                    # Elaborar Tabela de Abertura com Rating, Ranking, Percentil
                    tabela_1 = pd.read_csv('PlayerAnalysis_Role_15.csv')
                    tabela_1  = tabela_1.iloc[:, np.r_[12, 17, 29, 33:37, 31, 14]]
                    tabela_1 = tabela_1[(tabela_1['Atleta']==jogadores)&(tabela_1['Código_Posição_Wyscout']==9)&(tabela_1['Versão_Temporada']==temporada)&(tabela_1['Liga']==liga)]
                    clube = tabela_1.iat[0, 8]
                    rating = tabela_1.iat[0, 3]
                    ranking = tabela_1.iat[0,4]
                    percentil = tabela_1.iat[0,6]
                    size = tabela_1.iat[0,5]
                    fontsize = 20
                    # Texto de Abertura
                    markdown_amount_1 = f"<div style='text-align:center; font-size:{fontsize}px'>{jogadores:}</div>"
                    markdown_amount_2 = f"<div style='text-align:center; font-size:{fontsize}px'>{clube:}</div>"
                    st.markdown("<h4 style='text-align: center;'>Jogador Selecionado</b></h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_1, unsafe_allow_html=True)
                    st.markdown(markdown_amount_2, unsafe_allow_html=True)
                    st.markdown("---")
                    #####################################################################################################################
                    #####################################################################################################################
                    # Dados Básicos do Jogador
                    tabela_a  = pd.read_csv("PlayerAnalysis_Role_15.csv")
                    tabela_a = tabela_a.iloc[:, np.r_[12, 14, 19:24, 25:28, 17, 29, 31]]
                    tabela_a = tabela_a[(tabela_a['Atleta']==jogadores)&(tabela_a['Código_Posição_Wyscout']==9)&(tabela_a['Versão_Temporada']==temporada)&(tabela_a['Liga']==liga)]
                    tabela_a  = tabela_a.iloc[:, np.r_[0:3, 4:10]]
                    st.markdown("<h4 style='text-align: center;'>Dados Básicos</b></h4>", unsafe_allow_html=True)
                    #st.dataframe(tabela_a, use_container_width=True, hide_index=True)
                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index(drop=True)
                        df = df.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Valor_Mercado': 'Valor', 'Nacionalidade': 'Nacional'})
                        formatter = {"Idade": "{:.0f}"}
                        # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px',
                                            'font-size': '15px'})

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML without the index and display it
                        styled_html = style_table(tabela_a).to_html(escape=False, index=False, hide_index=True)
                        st.markdown(styled_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    #####################################################################################################################
                    #####################################################################################################################
                    st.markdown("<h3 style='text-align: center;'>MEIA ORGANIZADOR</b></h3>", unsafe_allow_html=True)
                    # Rating/Ranking/Percentil
                    markdown_amount_3 = f"<div style='text-align:center; font-size:{fontsize}px'>{rating:}</div>"
                    markdown_amount_4 = f"<div style='text-align:center; font-size:{fontsize}px'>{ranking:}</div>"
                    markdown_amount_5 = f"<div style='text-align:center; font-size:{fontsize}px'>{percentil:}</div>"
                    markdown_amount_6 = f"<div style='text-align:center; font-size:{fontsize}px'>(Total de {size:} jogadores na Liga)</div>"
                    st.markdown("<h4 style='text-align: center;'>Rating/Ranking/Percentil do Jogador na Liga/Temporada</h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_6, unsafe_allow_html=True)
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.markdown("<h4 style='text-align: center;'>Rating</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_3, unsafe_allow_html=True)
                    with col2:
                        st.markdown("<h4 style='text-align: center;'>Ranking</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_4, unsafe_allow_html=True)
                    with col3:
                        st.markdown("<h4 style='text-align: center;'>Percentil</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_5, unsafe_allow_html=True)
                    st.markdown("---")
                    ##################################################################################################################### 
                    #####################################################################################################################
                    # #Elaborar Tabela com Métricas do Atleta
                    tabela_2 = pd.read_csv('15_Role_Meia_Organizador.csv')
                    tabela_2 = tabela_2.iloc[:, np.r_[1, 18:28, 6, 28, 30]]
                    tabela_2 = tabela_2[(tabela_2['Atleta']==jogadores)&(tabela_2['Código_Posição_Wyscout']==9)&(tabela_2['Versão_Temporada']==temporada)&(tabela_2['Liga']==liga)]
                    tabela_2  = tabela_2.iloc[:, np.r_[0:11]]
                    tabela_2  = pd.DataFrame(tabela_2)
                    tabela_2 = tabela_2.round(decimals=2)
                    # Média da Liga
                    tabela_b = pd.read_csv('15_Role_Meia_Organizador.csv')
                    tabela_b = tabela_b.iloc[:, np.r_[1, 18:28, 6, 28, 30]]
                    tabela_b = tabela_b[(tabela_b['Código_Posição_Wyscout']==9)&(tabela_b['Versão_Temporada']==temporada)&(tabela_b['Liga']==liga)]
                    tabela_b = tabela_b.iloc[:, np.r_[0:11, 12]]
                    tabela_b = tabela_b.round(decimals=2)
                    tabela_c = (tabela_b.groupby('Liga')[['Passes_Longos_Certos', 'Passes_Frontais_Certos', 'Passes_Progressivos_Certos',
                                                            'Duelos_Ofensivos_Ganhos', 'Dribles_BemSucedidos', 'xA', 'Assistência_Finalização',
                                                            'Passes_TerçoFinal_Certos', 'Passes_EntreLinhas_Certos', 'Passes_Chave',]].mean())
                    tabela_c = tabela_c.round(decimals=2)
                    Atleta = ['Média da Liga']
                    tabela_c['Atleta'] = Atleta 
                    tabela_c.insert(0, 'Atleta', tabela_c.pop('Atleta'))
                    # Percentil na Liga
                    tabela_d = pd.read_csv('PlayerAnalysis_Role_15.csv')
                    tabela_d = tabela_d.iloc[:, np.r_[57:67, 12, 17, 29, 31]]
                    tabela_d = tabela_d[(tabela_d['Atleta']==jogadores)&(tabela_d['Código_Posição_Wyscout']==9)&(tabela_d['Versão_Temporada']==temporada)&(tabela_d['Liga']==liga)]
                    tabela_d = tabela_d.iloc[:, np.r_[0:10]]
                    tabela_d = tabela_d.rename(columns={'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 'Passes_Frontais_Certos_Percentil':'Passes_Frontais_Certos',
                                                        'Passes_Progressivos_Certos_Percentil': 'Passes_Progressivos_Certos', 'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos', 
                                                        'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos', 'xA_Percentil':'xA', 'Assistência_Finalização_Percentil':'Assistência_Finalização',
                                                        'Passes_TerçoFinal_Certos_Percentil':'Passes_TerçoFinal_Certos', 'Passes_EntreLinhas_Certos_Percentil':'Passes_EntreLinhas_Certos',
                                                        'Passes_Chave_Percentil':'Passes_Chave'})
                    Atleta = ['Percentil na Liga']
                    tabela_d['Atleta'] = Atleta 
                    tabela_d.insert(0, 'Atleta', tabela_d.pop('Atleta'))
                    tabela_2 = pd.concat([tabela_2, tabela_c, tabela_d]).reset_index(drop=True)
#                        tabela_2 = tabela_2.append(tabela_c).reset_index()
#                        tabela_2 = tabela_2.append(tabela_d).reset_index()
                    tabela_2 = tabela_2.transpose()
#                        tabela_2 = tabela_2.drop([tabela_2.index[0], tabela_2.index[1]])
                    st.markdown("<h4 style='text-align: center;'>Desempenho do Jogador na Liga/Temporada</h4>", unsafe_allow_html=True)
                    #st.dataframe(tabela_2, use_container_width=True)

                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index()  # If you want the index to be a visible column
                        new_header = df.iloc[0]  # Capture the first row to use as column headers
                        df = df[1:]  # Remove the first row from the data
                        df.columns = new_header  # Set the new column headers
                        first_column_name = df.columns[1]  # Adjusted for the added index column
                        # Ensure 'Rating' is rounded and formatted to 2 decimal places during styling
                        formatter = {first_column_name: "{:.2f}", "Média da Liga": "{:.2f}", "Percentil na Liga": "{:.0f}"}
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px', 'font-size': '15px', 'margin': 'auto'})  # Adjust this for centering

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML, ensure the index is shown and wrapped in a center-aligned div
                        styled_html = style_table(tabela_2).to_html(escape=False, index=False, hide_index=False)
                        center_html = f"<div style='margin-left: auto; margin-right: auto; width: fit-content;'>{styled_html}</div>"
                        st.markdown(center_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    ##################################################################################################################### 
                    #####################################################################################################################
                    #Plotar Gráfico Alternativo
                    # Player Comparison Data
                    st.markdown("<h4 style='text-align: center;'><br>Comparativo do Jogador com a Média da Liga</h4>", unsafe_allow_html=True)
                    Role_15_Mean_Charts = pd.read_csv('15_Role_Meia_Organizador.csv')
                    #PLOTTING COMPARISON BETWEEN 1 PLAYER AND LEAGUE MEAN
                    #Determining Club and League 
                    Role_x_Mean_Charts  = Role_15_Mean_Charts.iloc[:, np.r_[1, 3, 28, 30, 18:28]]
                    Role_x_Mean_Charts = Role_x_Mean_Charts[(Role_x_Mean_Charts['Versão_Temporada']==temporada)&(Role_x_Mean_Charts['Liga']==liga)]

                    Role_x_Mean_Charts['Passes_Longos_Certos_LM'] = Role_x_Mean_Charts['Passes_Longos_Certos'].mean()
                    Role_x_Mean_Charts['Passes_Frontais_Certos_LM'] = Role_x_Mean_Charts['Passes_Frontais_Certos'].mean()
                    Role_x_Mean_Charts['Passes_Progressivos_Certos_LM'] = Role_x_Mean_Charts['Passes_Progressivos_Certos'].mean()
                    Role_x_Mean_Charts['Duelos_Ofensivos_Ganhos_LM'] = Role_x_Mean_Charts['Duelos_Ofensivos_Ganhos'].mean()
                    Role_x_Mean_Charts['Dribles_BemSucedidos_LM'] = Role_x_Mean_Charts['Dribles_BemSucedidos'].mean()
                    Role_x_Mean_Charts['xA_LM'] = Role_x_Mean_Charts['xA'].mean()
                    Role_x_Mean_Charts['Assistência_Finalização_LM'] = Role_x_Mean_Charts['Assistência_Finalização'].mean()
                    Role_x_Mean_Charts['Passes_TerçoFinal_Certos_LM'] = Role_x_Mean_Charts['Passes_TerçoFinal_Certos'].mean()
                    Role_x_Mean_Charts['Passes_EntreLinhas_Certos_LM'] = Role_x_Mean_Charts['Passes_EntreLinhas_Certos'].mean()
                    Role_x_Mean_Charts['Passes_Chave_LM'] = Role_x_Mean_Charts['Passes_Chave'].mean()
                    
                    Role_x_Mean_Charts  = pd.DataFrame(Role_x_Mean_Charts)
                    Role_y_Mean_Charts  = pd.DataFrame(Role_x_Mean_Charts)

                    
                    Role_x_Mean_Charts = Role_x_Mean_Charts[(Role_x_Mean_Charts['Atleta']==jogadores)]
                    
                    #Selecting data to compare 1 player and league mean
                    Role_15_Mean_Charts  = Role_x_Mean_Charts.iloc[:, np.r_[0, 4:14]]

                    #Preparing League Mean Data
                    League_Mean = Role_x_Mean_Charts.iloc[:, np.r_[14:24]]
                    League_Mean['Atleta'] = 'Média da Liga' 
                    League_Mean.insert(0, 'Atleta', League_Mean.pop('Atleta'))
                    League_Mean = League_Mean.rename(columns={'Passes_Longos_Certos_LM':'Passes_Longos_Certos', 'Passes_Frontais_Certos_LM':'Passes_Frontais_Certos', 'Passes_Progressivos_Certos_LM':'Passes_Progressivos_Certos', 
                                                        'Duelos_Ofensivos_Ganhos_LM':'Duelos_Ofensivos_Ganhos', 'Dribles_BemSucedidos_LM':'Dribles_BemSucedidos', 'xA_LM':'xA', 
                                                        'Assistência_Finalização_LM':'Assistência_Finalização', 'Passes_TerçoFinal_Certos_LM':'Passes_TerçoFinal_Certos', 
                                                        'Passes_EntreLinhas_Certos_LM':'Passes_EntreLinhas_Certos', 'Passes_Chave_LM':'Passes_Chave'})
                    #Merging Dataframes
                    #Adjusting Player Dataframe
                    #Concatenating Dataframes
                    Role_15_Mean_Charts = pd.concat([Role_15_Mean_Charts, League_Mean]).reset_index(drop=True)
                    #Role_15_Mean_Charts = Role_15_Mean_Charts.append(League_Mean).reset_index()

                    #Splitting Columns
                    Role_15_Mean_Charts_1 = Role_15_Mean_Charts.iloc[:, np.r_[0, 1:6]]
                    Role_15_Mean_Charts_2 = Role_15_Mean_Charts.iloc[:, np.r_[0, 6:11]]


                    # Preparing Graph 1
                    # Get Parameters

                    params = list(Role_15_Mean_Charts_1.columns)
                    params = params[1:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_y_Mean_Charts[params][x])
                        a = a
                        b = max(Role_y_Mean_Charts[params][x])
                        b = b
                        ranges.append((a, b))

                    for x in range(len(Role_15_Mean_Charts_1['Atleta'])):
                        if Role_15_Mean_Charts_1['Atleta'][x] == jogadores:
                            a_values = Role_15_Mean_Charts_1.iloc[x].values.tolist()
                        if Role_15_Mean_Charts_1['Atleta'][x] == 'Média da Liga':
                            b_values = Role_15_Mean_Charts_1.iloc[x].values.tolist()
                                
                    a_values = a_values[1:]
                    b_values = b_values[1:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        title_name_2 = 'Média da Liga',
                        title_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll features are per90'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    plt.savefig('Player&League_Comparison_1.png')
                    st.pyplot(fig)
                    fig.savefig('Player&League_Comparison_1.png', dpi=600, bbox_inches="tight")

                    # Preparing Graph 2
                    # Get Parameters

                    params = list(Role_15_Mean_Charts_2.columns)
                    params = params[1:]
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_y_Mean_Charts[params][x])
                        a = a
                        b = max(Role_y_Mean_Charts[params][x])
                        b = b
                        ranges.append((a, b))

                    for x in range(len(Role_15_Mean_Charts_2['Atleta'])):
                        if Role_15_Mean_Charts_2['Atleta'][x] == jogadores:
                            a_values = Role_15_Mean_Charts_2.iloc[x].values.tolist()
                        if Role_15_Mean_Charts_2['Atleta'][x] == 'Média da Liga':
                            b_values = Role_15_Mean_Charts_2.iloc[x].values.tolist()
                                
                    a_values = a_values[1:]
                    b_values = b_values[1:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        title_name_2 = 'Média da Liga',
                        title_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll features are per90'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    plt.savefig('Player&League_Comparison_2.png')
                    st.pyplot(fig)
                    fig.savefig('Player&League_Comparison_2.png', dpi=600, bbox_inches="tight")

####################################################################################################################################################################

                    # Plotting KDE Comparison Graphs
                    mais_gráficos = st.button("Para gráficos adicionais por métrica, clique")
                    if mais_gráficos:
                        st.markdown("<h4 style='text-align: center;'><br>Posição Relativa do Jogador na Liga<br></h4>", unsafe_allow_html=True)
                        # Select columns from 4 to 10 (7 columns in total)
                        selected_columns = Role_y_Mean_Charts.iloc[:, 4:14]

                        # Plot KDE for each selected column in pairs
                        for i in range(0, len(selected_columns.columns), 2):
                            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 4))  # Always create two subplots

                            # Plot first column in the pair
                            density = sns.kdeplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i], ax=ax1, color='blue', bw_adjust=0.5)
                            sns.rugplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i], ax=ax1, color='red', height=0.05)  # Adding rug plot
                            x_vals = density.get_lines()[0].get_xdata()
                            y_vals = density.get_lines()[0].get_ydata()
                            ax1.fill_between(x_vals, y_vals, color='lightblue', alpha=0.5)
                            player_value = Role_y_Mean_Charts.loc[Role_y_Mean_Charts['Atleta'] == jogadores, selected_columns.columns[i]].values[0]
                            ax1.axvline(x=player_value, color='red', linewidth=2)
                            ax1.text(player_value + 0.01 * (ax1.get_xlim()[1] - ax1.get_xlim()[0]), ax1.get_ylim()[0] + (ax1.get_ylim()[1] - ax1.get_ylim()[0]) * 0.1, jogadores, color='red', fontsize=17, verticalalignment='bottom')
                            ax1.set_title(f'{selected_columns.columns[i]}', fontsize=18, fontweight='bold')
                            ax1.spines['top'].set_visible(False)
                            ax1.spines['right'].set_visible(False)
                            ax1.spines['left'].set_visible(False)
                            ax1.set_xlabel('')
                            ax1.set_ylabel('')
                            ax1.tick_params(axis='x', labelsize=14)
                            ax1.tick_params(axis='y', which='both', left=False, labelleft=False)


                            if i + 1 < len(selected_columns.columns):  # Check if there is a second plot to render
                                # Plot second column in the pair
                                density = sns.kdeplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i+1], ax=ax2, color='blue', bw_adjust=0.5)
                                sns.rugplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i+1], ax=ax2, color='red', height=0.05)  # Adding rug plot
                                x_vals = density.get_lines()[0].get_xdata()
                                y_vals = density.get_lines()[0].get_ydata()
                                ax2.fill_between(x_vals, y_vals, color='lightblue', alpha=0.5)                                
                                player_value = Role_y_Mean_Charts.loc[Role_y_Mean_Charts['Atleta'] == jogadores, selected_columns.columns[i+1]].values[0]
                                ax2.axvline(x=player_value, color='red', linewidth=2)
                                ax2.text(player_value + 0.01 * (ax2.get_xlim()[1] - ax2.get_xlim()[0]), ax2.get_ylim()[0] + (ax2.get_ylim()[1] - ax2.get_ylim()[0]) * 0.1, jogadores, color='red', fontsize=17, verticalalignment='bottom')
                                ax2.set_title(f'{selected_columns.columns[i+1]}', fontsize=18, fontweight='bold')
                                ax2.spines['top'].set_visible(False)
                                ax2.spines['right'].set_visible(False)
                                ax2.spines['left'].set_visible(False)
                                ax2.set_xlabel('')
                                ax2.set_ylabel('')
                                ax2.tick_params(axis='x', labelsize=14)
                                ax2.tick_params(axis='y', which='both', left=False, labelleft=False)

                            else:
                                # Instead of hiding the second axis, we simply clear it
                                ax2.clear()
                                ax2.axis('off')  # Turn off the axis if not used

                            plt.tight_layout()  # Adjust layout to prevent overlap
                            st.pyplot(fig)

                    #####################################################################################################################
                    #####################################################################################################################
                    ##################################################################################################################### 
                    #####################################################################################################################
                    # MEIA ATACANTE
                    # Elaborar Tabela de Abertura com Rating, Ranking, Percentil
                    tabela_1 = pd.read_csv('PlayerAnalysis_Role_16.csv')
                    tabela_1  = tabela_1.iloc[:, np.r_[19, 24, 36, 40:44, 38, 21]]
                    tabela_1 = tabela_1[(tabela_1['Atleta']==jogadores)&(tabela_1['Código_Posição_Wyscout']==9)&(tabela_1['Versão_Temporada']==temporada)&(tabela_1['Liga']==liga)]
                    clube = tabela_1.iat[0, 8]
                    rating = tabela_1.iat[0, 3]
                    ranking = tabela_1.iat[0,4]
                    percentil = tabela_1.iat[0,6]
                    size = tabela_1.iat[0,5]
                    fontsize = 20
                    # Texto de Abertura
                    st.markdown("<h3 style='text-align: center;'>MEIA ATACANTE</b></h3>", unsafe_allow_html=True)
                    # Rating/Ranking/Percentil
                    markdown_amount_3 = f"<div style='text-align:center; font-size:{fontsize}px'>{rating:}</div>"
                    markdown_amount_4 = f"<div style='text-align:center; font-size:{fontsize}px'>{ranking:}</div>"
                    markdown_amount_5 = f"<div style='text-align:center; font-size:{fontsize}px'>{percentil:}</div>"
                    markdown_amount_6 = f"<div style='text-align:center; font-size:{fontsize}px'>(Total de {size:} jogadores na Liga)</div>"
                    st.markdown("<h4 style='text-align: center;'>Rating/Ranking/Percentil do Jogador na Liga/Temporada</h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_6, unsafe_allow_html=True)
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.markdown("<h4 style='text-align: center;'>Rating</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_3, unsafe_allow_html=True)
                    with col2:
                        st.markdown("<h4 style='text-align: center;'>Ranking</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_4, unsafe_allow_html=True)
                    with col3:
                        st.markdown("<h4 style='text-align: center;'>Percentil</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_5, unsafe_allow_html=True)
                    st.markdown("---")
                    ##################################################################################################################### 
                    #####################################################################################################################
                    # #Elaborar Tabela com Métricas do Atleta
                    tabela_2 = pd.read_csv('16_Role_Meia_Atacante.csv')
                    tabela_2 = tabela_2.iloc[:, np.r_[1, 18:35, 6, 35, 37]]
                    tabela_2 = tabela_2[(tabela_2['Atleta']==jogadores)&(tabela_2['Código_Posição_Wyscout']==9)&(tabela_2['Versão_Temporada']==temporada)&(tabela_2['Liga']==liga)]
                    tabela_2 = tabela_2.iloc[:, np.r_[0:18]]
                    tabela_2  = pd.DataFrame(tabela_2)
                    tabela_2 = tabela_2.round(decimals=2)
                    # Média da Liga
                    tabela_b = pd.read_csv('16_Role_Meia_Atacante.csv')
                    tabela_b = tabela_b.iloc[:, np.r_[1, 18:35, 6, 35, 37]]
                    tabela_b = tabela_b[(tabela_b['Código_Posição_Wyscout']==9)&(tabela_b['Versão_Temporada']==temporada)&(tabela_b['Liga']==liga)]
                    tabela_b = tabela_b.iloc[:, np.r_[0:18, 19]]
                    tabela_b = tabela_b.round(decimals=2)
                    tabela_c = (tabela_b.groupby('Liga')[['Passes_Longos_Certos', 'Passes_Frontais_Certos', 'Passes_Progressivos_Certos',
                                                            'Duelos_Ofensivos_Ganhos', 'Pisadas_Área', 'Dribles_BemSucedidos', 'xG', 'Finalizações_NoAlvo',
                                                            'Ameaça_Ofensiva', 'xA', 'Assistência_Finalização', 'Passes_TerçoFinal_Certos', 
                                                            'Passes_Inteligentes_Certos', 'Passes_EntreLinhas_Certos', 'Deep_Completions', 'Passes_Chave',
                                                            'Passes_ÁreaPênalti_Certos']].mean())
                    tabela_c = tabela_c.round(decimals=2)
                    Atleta = ['Média da Liga']
                    tabela_c['Atleta'] = Atleta 
                    tabela_c.insert(0, 'Atleta', tabela_c.pop('Atleta'))
                    # Percentil na Liga
                    tabela_d = pd.read_csv('PlayerAnalysis_Role_16.csv')
                    tabela_d = tabela_d.iloc[:, np.r_[78:95, 19, 24, 36, 38]]
                    tabela_d = tabela_d[(tabela_d['Atleta']==jogadores)&(tabela_d['Código_Posição_Wyscout']==9)&(tabela_d['Versão_Temporada']==temporada)&(tabela_d['Liga']==liga)]
                    tabela_d = tabela_d.iloc[:, np.r_[0:17]]
                    tabela_d = tabela_d.rename(columns={'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 'Passes_Frontais_Certos_Percentil':'Passes_Frontais_Certos',
                                                        'Passes_Progressivos_Certos_Percentil': 'Passes_Progressivos_Certos', 'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos', 
                                                        'Pisadas_Área_Percentil':'Pisadas_Área', 'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos', 'xG_Percentil':'xG', 
                                                        'Finalizações_NoAlvo_Percentil':'Finalizações_NoAlvo', 'Ameaça_Ofensiva_Percentil':'Ameaça_Ofensiva', 'xA_Percentil':'xA',
                                                        'Assistência_Finalização_Percentil':'Assistência_Finalização', 'Passes_TerçoFinal_Certos_Percentil':'Passes_TerçoFinal_Certos', 
                                                        'Passes_Inteligentes_Certos_Percentil':'Passes_Inteligentes_Certos', 'Passes_EntreLinhas_Certos_Percentil':'Passes_EntreLinhas_Certos',
                                                        'Deep_Completions_Percentil':'Deep_Completions', 'Passes_Chave_Percentil':'Passes_Chave', 'Passes_ÁreaPênalti_Certos_Percentil':'Passes_ÁreaPênalti_Certos'})
                    Atleta = ['Percentil na Liga']
                    tabela_d['Atleta'] = Atleta 
                    tabela_d.insert(0, 'Atleta', tabela_d.pop('Atleta'))
                    tabela_2 = pd.concat([tabela_2, tabela_c, tabela_d]).reset_index(drop=True)
#                        tabela_2 = tabela_2.append(tabela_c).reset_index()
#                        tabela_2 = tabela_2.append(tabela_d).reset_index()
                    tabela_2 = tabela_2.transpose()
#                        tabela_2 = tabela_2.drop([tabela_2.index[0], tabela_2.index[1]])
                    st.markdown("<h4 style='text-align: center;'>Desempenho do Jogador na Liga/Temporada</h4>", unsafe_allow_html=True)
                    #st.dataframe(tabela_2, use_container_width=True)

                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index()  # If you want the index to be a visible column
                        new_header = df.iloc[0]  # Capture the first row to use as column headers
                        df = df[1:]  # Remove the first row from the data
                        df.columns = new_header  # Set the new column headers
                        first_column_name = df.columns[1]  # Adjusted for the added index column
                        # Ensure 'Rating' is rounded and formatted to 2 decimal places during styling
                        formatter = {first_column_name: "{:.2f}", "Média da Liga": "{:.2f}", "Percentil na Liga": "{:.0f}"}
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px', 'font-size': '15px', 'margin': 'auto'})  # Adjust this for centering

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML, ensure the index is shown and wrapped in a center-aligned div
                        styled_html = style_table(tabela_2).to_html(escape=False, index=False, hide_index=False)
                        center_html = f"<div style='margin-left: auto; margin-right: auto; width: fit-content;'>{styled_html}</div>"
                        st.markdown(center_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    ##################################################################################################################### 
                    #####################################################################################################################
                    #Plotar Gráfico Alternativo
                    # Player Comparison Data
                    st.markdown("<h4 style='text-align: center;'><br>Comparativo do Jogador com a Média da Liga</h4>", unsafe_allow_html=True)
                    Role_16_Mean_Charts = pd.read_csv('16_Role_Meia_Atacante.csv')
                    #PLOTTING COMPARISON BETWEEN 1 PLAYER AND LEAGUE MEAN
                    #Determining Club and League 
                    Role_x_Mean_Charts  = Role_16_Mean_Charts.iloc[:, np.r_[1, 3, 35, 37, 18:35]]
                    Role_x_Mean_Charts = Role_x_Mean_Charts[(Role_x_Mean_Charts['Versão_Temporada']==temporada)&(Role_x_Mean_Charts['Liga']==liga)]

                    Role_x_Mean_Charts['Passes_Longos_Certos_LM'] = Role_x_Mean_Charts['Passes_Longos_Certos'].mean()
                    Role_x_Mean_Charts['Passes_Frontais_Certos_LM'] = Role_x_Mean_Charts['Passes_Frontais_Certos'].mean()
                    Role_x_Mean_Charts['Passes_Progressivos_Certos_LM'] = Role_x_Mean_Charts['Passes_Progressivos_Certos'].mean()
                    Role_x_Mean_Charts['Duelos_Ofensivos_Ganhos_LM'] = Role_x_Mean_Charts['Duelos_Ofensivos_Ganhos'].mean()
                    Role_x_Mean_Charts['Pisadas_Área_LM'] = Role_x_Mean_Charts['Pisadas_Área'].mean()
                    Role_x_Mean_Charts['Dribles_BemSucedidos_LM'] = Role_x_Mean_Charts['Dribles_BemSucedidos'].mean()
                    Role_x_Mean_Charts['xG_LM'] = Role_x_Mean_Charts['xG'].mean()
                    Role_x_Mean_Charts['Finalizações_NoAlvo_LM'] = Role_x_Mean_Charts['Finalizações_NoAlvo'].mean()
                    Role_x_Mean_Charts['Ameaça_Ofensiva_LM'] = Role_x_Mean_Charts['Ameaça_Ofensiva'].mean()
                    Role_x_Mean_Charts['xA_LM'] = Role_x_Mean_Charts['xA'].mean()
                    Role_x_Mean_Charts['Assistência_Finalização_LM'] = Role_x_Mean_Charts['Assistência_Finalização'].mean()
                    Role_x_Mean_Charts['Passes_TerçoFinal_Certos_LM'] = Role_x_Mean_Charts['Passes_TerçoFinal_Certos'].mean()
                    Role_x_Mean_Charts['Passes_Inteligentes_Certos_LM'] = Role_x_Mean_Charts['Passes_Inteligentes_Certos'].mean()
                    Role_x_Mean_Charts['Passes_EntreLinhas_Certos_LM'] = Role_x_Mean_Charts['Passes_EntreLinhas_Certos'].mean()
                    Role_x_Mean_Charts['Deep_Completions_LM'] = Role_x_Mean_Charts['Deep_Completions'].mean()
                    Role_x_Mean_Charts['Passes_Chave_LM'] = Role_x_Mean_Charts['Passes_Chave'].mean()
                    Role_x_Mean_Charts['Passes_ÁreaPênalti_Certos_LM'] = Role_x_Mean_Charts['Passes_ÁreaPênalti_Certos'].mean()
                    
                    Role_x_Mean_Charts  = pd.DataFrame(Role_x_Mean_Charts)
                    Role_y_Mean_Charts  = pd.DataFrame(Role_x_Mean_Charts)
                    
                    Role_x_Mean_Charts = Role_x_Mean_Charts[(Role_x_Mean_Charts['Atleta']==jogadores)]
                    
                    #Selecting data to compare 1 player and league mean
                    Role_16_Mean_Charts  = Role_x_Mean_Charts.iloc[:, np.r_[0, 4:21]]

                    #Preparing League Mean Data
                    League_Mean = Role_x_Mean_Charts.iloc[:, np.r_[21:38]]
                    League_Mean['Atleta'] = 'Média da Liga' 
                    League_Mean.insert(0, 'Atleta', League_Mean.pop('Atleta'))
                    League_Mean = League_Mean.rename(columns={'Passes_Longos_Certos_LM':'Passes_Longos_Certos', 'Passes_Frontais_Certos_LM':'Passes_Frontais_Certos', 'Passes_Progressivos_Certos_LM':'Passes_Progressivos_Certos', 
                                                        'Duelos_Ofensivos_Ganhos_LM':'Duelos_Ofensivos_Ganhos', 'Pisadas_Área_LM':'Pisadas_Área', 'Dribles_BemSucedidos_LM':'Dribles_BemSucedidos', 'xG_LM':'xG',  
                                                        'Finalizações_NoAlvo_LM':'Finalizações_NoAlvo', 'Ameaça_Ofensiva_LM':'Ameaça_Ofensiva', 'xA_LM':'xA', 'Assistência_Finalização_LM':'Assistência_Finalização', 'Passes_TerçoFinal_Certos_LM':'Passes_TerçoFinal_Certos', 
                                                        'Passes_Inteligentes_Certos_LM':'Passes_Inteligentes_Certos', 'Passes_EntreLinhas_Certos_LM':'Passes_EntreLinhas_Certos', 'Deep_Completions_LM':'Deep_Completions', 
                                                        'Passes_Chave_LM':'Passes_Chave', 'Passes_ÁreaPênalti_Certos_LM':'Passes_ÁreaPênalti_Certos'})
                    #Merging Dataframes
                    #Adjusting Player Dataframe
                    #Concatenating Dataframes
                    Role_16_Mean_Charts = pd.concat([Role_16_Mean_Charts, League_Mean]).reset_index(drop=True)
                    #Role_16_Mean_Charts = Role_16_Mean_Charts.append(League_Mean).reset_index()
                    #Role_16_Mean_Charts = Role_16_Mean_Charts.rename(columns={'Interceptações.1': 'Interceptações'})    

                    #Splitting Columns
                    Role_16_Mean_Charts_1 = Role_16_Mean_Charts.iloc[:, np.r_[0, 1:10]]
                    Role_16_Mean_Charts_2 = Role_16_Mean_Charts.iloc[:, np.r_[0, 10:18]]


                    # Preparing Graph 1
                    # Get Parameters

                    params = list(Role_16_Mean_Charts_1.columns)
                    params = params[1:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_y_Mean_Charts[params][x])
                        a = a
                        b = max(Role_y_Mean_Charts[params][x])
                        b = b
                        ranges.append((a, b))

                    for x in range(len(Role_16_Mean_Charts_1['Atleta'])):
                        if Role_16_Mean_Charts_1['Atleta'][x] == jogadores:
                            a_values = Role_16_Mean_Charts_1.iloc[x].values.tolist()
                        if Role_16_Mean_Charts_1['Atleta'][x] == 'Média da Liga':
                            b_values = Role_16_Mean_Charts_1.iloc[x].values.tolist()
                                
                    a_values = a_values[1:]
                    b_values = b_values[1:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        title_name_2 = 'Média da Liga',
                        title_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll features are per90'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    plt.savefig('Player&League_Comparison_1.png')
                    st.pyplot(fig)
                    fig.savefig('Player&League_Comparison_1.png', dpi=600, bbox_inches="tight")

                    # Preparing Graph 2
                    # Get Parameters

                    params = list(Role_16_Mean_Charts_2.columns)
                    params = params[1:]
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_y_Mean_Charts[params][x])
                        a = a
                        b = max(Role_y_Mean_Charts[params][x])
                        b = b
                        ranges.append((a, b))

                    for x in range(len(Role_16_Mean_Charts_2['Atleta'])):
                        if Role_16_Mean_Charts_2['Atleta'][x] == jogadores:
                            a_values = Role_16_Mean_Charts_2.iloc[x].values.tolist()
                        if Role_16_Mean_Charts_2['Atleta'][x] == 'Média da Liga':
                            b_values = Role_16_Mean_Charts_2.iloc[x].values.tolist()
                                
                    a_values = a_values[1:]
                    b_values = b_values[1:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        title_name_2 = 'Média da Liga',
                        title_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll features are per90'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    plt.savefig('Player&League_Comparison_2.png')
                    st.pyplot(fig)
                    fig.savefig('Player&League_Comparison_2.png', dpi=600, bbox_inches="tight")

                    ##########################################################################################################################################

                    # Plotting KDE Comparison Graphs
                    mais_gráficos = st.button("Para gráficos adicionais por métrica, clique", key="mais_graficos_key")
                    if mais_gráficos:
                        st.markdown("<h4 style='text-align: center;'><br>Posição Relativa do Jogador na Liga<br></h4>", unsafe_allow_html=True)
                        # Select columns from 4 to 10 (7 columns in total)
                        selected_columns = Role_y_Mean_Charts.iloc[:, 4:21]

                        # Plot KDE for each selected column in pairs
                        for i in range(0, len(selected_columns.columns), 2):
                            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 4))  # Always create two subplots

                            # Plot first column in the pair
                            density = sns.kdeplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i], ax=ax1, color='blue', bw_adjust=0.5)
                            sns.rugplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i], ax=ax1, color='red', height=0.05)  # Adding rug plot
                            x_vals = density.get_lines()[0].get_xdata()
                            y_vals = density.get_lines()[0].get_ydata()
                            ax1.fill_between(x_vals, y_vals, color='lightblue', alpha=0.5)
                            player_value = Role_y_Mean_Charts.loc[Role_y_Mean_Charts['Atleta'] == jogadores, selected_columns.columns[i]].values[0]
                            ax1.axvline(x=player_value, color='red', linewidth=2)
                            ax1.text(player_value + 0.01 * (ax1.get_xlim()[1] - ax1.get_xlim()[0]), ax1.get_ylim()[0] + (ax1.get_ylim()[1] - ax1.get_ylim()[0]) * 0.1, jogadores, color='red', fontsize=17, verticalalignment='bottom')
                            ax1.set_title(f'{selected_columns.columns[i]}', fontsize=18, fontweight='bold')
                            ax1.spines['top'].set_visible(False)
                            ax1.spines['right'].set_visible(False)
                            ax1.spines['left'].set_visible(False)
                            ax1.set_xlabel('')
                            ax1.set_ylabel('')
                            ax1.tick_params(axis='x', labelsize=14)
                            ax1.tick_params(axis='y', which='both', left=False, labelleft=False)


                            if i + 1 < len(selected_columns.columns):  # Check if there is a second plot to render
                                # Plot second column in the pair
                                density = sns.kdeplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i+1], ax=ax2, color='blue', bw_adjust=0.5)
                                sns.rugplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i+1], ax=ax2, color='red', height=0.05)  # Adding rug plot
                                x_vals = density.get_lines()[0].get_xdata()
                                y_vals = density.get_lines()[0].get_ydata()
                                ax2.fill_between(x_vals, y_vals, color='lightblue', alpha=0.5)                                
                                player_value = Role_y_Mean_Charts.loc[Role_y_Mean_Charts['Atleta'] == jogadores, selected_columns.columns[i+1]].values[0]
                                ax2.axvline(x=player_value, color='red', linewidth=2)
                                ax2.text(player_value + 0.01 * (ax2.get_xlim()[1] - ax2.get_xlim()[0]), ax2.get_ylim()[0] + (ax2.get_ylim()[1] - ax2.get_ylim()[0]) * 0.1, jogadores, color='red', fontsize=17, verticalalignment='bottom')
                                ax2.set_title(f'{selected_columns.columns[i+1]}', fontsize=18, fontweight='bold')
                                ax2.spines['top'].set_visible(False)
                                ax2.spines['right'].set_visible(False)
                                ax2.spines['left'].set_visible(False)
                                ax2.set_xlabel('')
                                ax2.set_ylabel('')
                                ax2.tick_params(axis='x', labelsize=14)
                                ax2.tick_params(axis='y', which='both', left=False, labelleft=False)

                            else:
                                # Instead of hiding the second axis, we simply clear it
                                ax2.clear()
                                ax2.axis('off')  # Turn off the axis if not used

                            plt.tight_layout()  # Adjust layout to prevent overlap
                            st.pyplot(fig)



                    #####################################################################################################################
                    #####################################################################################################################
                    ##################################################################################################################### 
                    #####################################################################################################################
                elif posição == ("Extremo"):
                    ##################################################################################################################### 
                    #####################################################################################################################
                    # EXTREMO ORGANIZADOR
                    # Texto de Abertura
                    # Elaborar Tabela de Abertura com Rating, Ranking, Percentil
                    tabela_1 = pd.read_csv('PlayerAnalysis_Role_17.csv')
                    tabela_1  = tabela_1.iloc[:, np.r_[15, 20, 32, 36:40, 34, 17]]
                    tabela_1 = tabela_1[(tabela_1['Atleta']==jogadores)&((tabela_1['Código_Posição_Wyscout']==10)|(tabela_1['Código_Posição_Wyscout']==11))&(tabela_1['Versão_Temporada']==temporada)&(tabela_1['Liga']==liga)]
                    clube = tabela_1.iat[0, 8]
                    rating = tabela_1.iat[0, 3]
                    ranking = tabela_1.iat[0,4]
                    percentil = tabela_1.iat[0,6]
                    size = tabela_1.iat[0,5]
                    fontsize = 20
                    ##################################################################################################################### 
                    #####################################################################################################################
                    markdown_amount_1 = f"<div style='text-align:center; font-size:{fontsize}px'>{jogadores:}</div>"
                    markdown_amount_2 = f"<div style='text-align:center; font-size:{fontsize}px'>{clube:}</div>"
                    st.markdown("<h4 style='text-align: center;'>Jogador Selecionado</b></h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_1, unsafe_allow_html=True)
                    st.markdown(markdown_amount_2, unsafe_allow_html=True)
                    st.markdown("---")
                    ##################################################################################################################### 
                    #####################################################################################################################
                    # Dados Básicos do Jogador
                    tabela_a  = pd.read_csv("PlayerAnalysis_Role_17.csv")
                    tabela_a = tabela_a.iloc[:, np.r_[15, 17, 21:27, 28:31, 20, 32, 34]]
                    tabela_a = tabela_a[(tabela_a['Atleta']==jogadores)&((tabela_a['Código_Posição_Wyscout']==10)|(tabela_a['Código_Posição_Wyscout']==11))&(tabela_a['Versão_Temporada']==temporada)&(tabela_a['Liga']==liga)]
                    tabela_a  = tabela_a.iloc[:, np.r_[0:3, 4:10]]
                    st.markdown("<h4 style='text-align: center;'>Dados Básicos</b></h4>", unsafe_allow_html=True)
                    #st.dataframe(tabela_a, use_container_width=True, hide_index=True)

                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index(drop=True)
                        df = df.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Valor_Mercado': 'Valor', 'Nacionalidade': 'Nacional'})
                        formatter = {"Idade": "{:.0f}"}
                        # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px',
                                            'font-size': '15px'})

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML without the index and display it
                        styled_html = style_table(tabela_a).to_html(escape=False, index=False, hide_index=True)
                        st.markdown(styled_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    ##################################################################################################################### 
                    #####################################################################################################################
                    # Texto de Abertura
                    st.markdown("<h3 style='text-align: center;'>EXTREMO ORGANIZADOR</b></h3>", unsafe_allow_html=True)
                    # Rating/Ranking/Percentil
                    markdown_amount_3 = f"<div style='text-align:center; font-size:{fontsize}px'>{rating:}</div>"
                    markdown_amount_4 = f"<div style='text-align:center; font-size:{fontsize}px'>{ranking:}</div>"
                    markdown_amount_5 = f"<div style='text-align:center; font-size:{fontsize}px'>{percentil:}</div>"
                    markdown_amount_6 = f"<div style='text-align:center; font-size:{fontsize}px'>(Total de {size:} jogadores na Liga)</div>"
                    st.markdown("<h4 style='text-align: center;'>Rating/Ranking/Percentil do Jogador na Liga/Temporada</h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_6, unsafe_allow_html=True)
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.markdown("<h4 style='text-align: center;'>Rating</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_3, unsafe_allow_html=True)
                    with col2:
                        st.markdown("<h4 style='text-align: center;'>Ranking</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_4, unsafe_allow_html=True)
                    with col3:
                        st.markdown("<h4 style='text-align: center;'>Percentil</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_5, unsafe_allow_html=True)
                    st.markdown("---")
                    ##################################################################################################################### 
                    #####################################################################################################################
                    # #Elaborar Tabela com Métricas do Atleta
                    tabela_2 = pd.read_csv('17_Role_Extremo_Organizador.csv')
                    tabela_2 = tabela_2.iloc[:, np.r_[1, 18:31, 6, 31, 33]]
                    tabela_2 = tabela_2[(tabela_2['Atleta']==jogadores)&((tabela_2['Código_Posição_Wyscout']==10)|(tabela_2['Código_Posição_Wyscout']==11))&(tabela_2['Versão_Temporada']==temporada)&(tabela_2['Liga']==liga)]
                    tabela_2 = tabela_2.iloc[:, np.r_[0:14]]
                    tabela_2  = pd.DataFrame(tabela_2)
                    tabela_2 = tabela_2.round(decimals=2)
                    # Média da Liga
                    tabela_b = pd.read_csv('17_Role_Extremo_Organizador.csv')
                    tabela_b = tabela_b.iloc[:, np.r_[1, 18:31, 6, 31, 33]]
                    tabela_b = tabela_b[((tabela_b['Código_Posição_Wyscout']==10)|(tabela_b['Código_Posição_Wyscout']==11))&(tabela_b['Versão_Temporada']==temporada)&(tabela_b['Liga']==liga)]
                    tabela_b = tabela_b.iloc[:, np.r_[1:14, 15]]
                    tabela_b = tabela_b.round(decimals=2)
                    tabela_c = (tabela_b.groupby('Liga')[['Passes_Longos_Certos', 'Passes_Frontais_Certos', 'Passes_Progressivos_Certos',
                                                            'Duelos_Ofensivos_Ganhos', 'Dribles_BemSucedidos', 'xG', 'Finalizações_NoAlvo',
                                                            'Conversão_Gols', 'xA', 'Assistência_Finalização', 'Passes_Inteligentes_Certos', 
                                                            'Passes_EntreLinhas_Certos', 'Passes_Chave']].mean())
                    tabela_c = tabela_c.round(decimals=2)
                    Atleta = ['Média da Liga']
                    tabela_c['Atleta'] = Atleta 
                    tabela_c.insert(0, 'Atleta', tabela_c.pop('Atleta'))
                    # Percentil na Liga
                    tabela_d = pd.read_csv('PlayerAnalysis_Role_17.csv')
                    tabela_d = tabela_d.iloc[:, np.r_[66:79, 15, 20, 32, 34]]
                    tabela_d = tabela_d[(tabela_d['Atleta']==jogadores)&((tabela_d['Código_Posição_Wyscout']==10)|(tabela_d['Código_Posição_Wyscout']==11))&(tabela_d['Versão_Temporada']==temporada)&(tabela_d['Liga']==liga)]
                    tabela_d = tabela_d.iloc[:, np.r_[0:14]]
                    tabela_d = tabela_d.rename(columns={'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 'Passes_Frontais_Certos_Percentil':'Passes_Frontais_Certos',
                                                        'Passes_Progressivos_Certos_Percentil': 'Passes_Progressivos_Certos', 'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos', 
                                                        'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos', 'xG_Percentil':'xG', 'Finalizações_NoAlvo_Percentil':'Finalizações_NoAlvo', 
                                                        'Conversão_Gols_Percentil':'Conversão_Gols', 'xA_Percentil':'xA', 'Assistência_Finalização_Percentil':'Assistência_Finalização', 
                                                        'Passes_Inteligentes_Certos_Percentil':'Passes_Inteligentes_Certos', 'Passes_EntreLinhas_Certos_Percentil':'Passes_EntreLinhas_Certos',
                                                        'Passes_Chave_Percentil':'Passes_Chave'})
                    Atleta = ['Percentil na Liga']
                    tabela_d['Atleta'] = Atleta 
                    tabela_d.insert(0, 'Atleta', tabela_d.pop('Atleta'))
                    tabela_2 = pd.concat([tabela_2, tabela_c, tabela_d]).reset_index(drop=True)
#                        tabela_2 = tabela_2.append(tabela_c).reset_index()
#                        tabela_2 = tabela_2.append(tabela_d).reset_index()
                    tabela_2 = tabela_2.transpose()
#                        tabela_2 = tabela_2.drop([tabela_2.index[0], tabela_2.index[1]])
                    st.markdown("<h4 style='text-align: center;'>Desempenho do Jogador na Liga/Temporada</h4>", unsafe_allow_html=True)
                    #st.dataframe(tabela_2, use_container_width=True)

                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index()  # If you want the index to be a visible column
                        new_header = df.iloc[0]  # Capture the first row to use as column headers
                        df = df[1:]  # Remove the first row from the data
                        df.columns = new_header  # Set the new column headers
                        first_column_name = df.columns[1]  # Adjusted for the added index column
                        # Ensure 'Rating' is rounded and formatted to 2 decimal places during styling
                        formatter = {first_column_name: "{:.2f}", "Média da Liga": "{:.2f}", "Percentil na Liga": "{:.0f}"}
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px', 'font-size': '15px', 'margin': 'auto'})  # Adjust this for centering

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML, ensure the index is shown and wrapped in a center-aligned div
                        styled_html = style_table(tabela_2).to_html(escape=False, index=False, hide_index=False)
                        center_html = f"<div style='margin-left: auto; margin-right: auto; width: fit-content;'>{styled_html}</div>"
                        st.markdown(center_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    ##################################################################################################################### 
                    #####################################################################################################################
                    #Plotar Gráfico Alternativo
                    # Player Comparison Data
                    st.markdown("<h4 style='text-align: center;'><br>Comparativo do Jogador com a Média da Liga</h4>", unsafe_allow_html=True)
                    Role_17_Mean_Charts = pd.read_csv('17_Role_Extremo_Organizador.csv')
                    #PLOTTING COMPARISON BETWEEN 1 PLAYER AND LEAGUE MEAN
                    #Determining Club and League 
                    Role_x_Mean_Charts  = Role_17_Mean_Charts.iloc[:, np.r_[1, 3, 31, 33, 18:31]]
                    Role_x_Mean_Charts = Role_x_Mean_Charts[(Role_x_Mean_Charts['Versão_Temporada']==temporada)&(Role_x_Mean_Charts['Liga']==liga)]

                    Role_x_Mean_Charts['Passes_Longos_Certos_LM'] = Role_x_Mean_Charts['Passes_Longos_Certos'].mean()
                    Role_x_Mean_Charts['Passes_Frontais_Certos_LM'] = Role_x_Mean_Charts['Passes_Frontais_Certos'].mean()
                    Role_x_Mean_Charts['Passes_Progressivos_Certos_LM'] = Role_x_Mean_Charts['Passes_Progressivos_Certos'].mean()
                    Role_x_Mean_Charts['Duelos_Ofensivos_Ganhos_LM'] = Role_x_Mean_Charts['Duelos_Ofensivos_Ganhos'].mean()
                    Role_x_Mean_Charts['Dribles_BemSucedidos_LM'] = Role_x_Mean_Charts['Dribles_BemSucedidos'].mean()
                    Role_x_Mean_Charts['xG_LM'] = Role_x_Mean_Charts['xG'].mean()
                    Role_x_Mean_Charts['Finalizações_NoAlvo_LM'] = Role_x_Mean_Charts['Finalizações_NoAlvo'].mean()
                    Role_x_Mean_Charts['Conversão_Gols_LM'] = Role_x_Mean_Charts['Conversão_Gols'].mean()
                    Role_x_Mean_Charts['xA_LM'] = Role_x_Mean_Charts['xA'].mean()
                    Role_x_Mean_Charts['Assistência_Finalização_LM'] = Role_x_Mean_Charts['Assistência_Finalização'].mean()
                    Role_x_Mean_Charts['Passes_Inteligentes_Certos_LM'] = Role_x_Mean_Charts['Passes_Inteligentes_Certos'].mean()
                    Role_x_Mean_Charts['Passes_EntreLinhas_Certos_LM'] = Role_x_Mean_Charts['Passes_EntreLinhas_Certos'].mean()
                    Role_x_Mean_Charts['Passes_Chave_LM'] = Role_x_Mean_Charts['Passes_Chave'].mean()
                    
                    Role_x_Mean_Charts  = pd.DataFrame(Role_x_Mean_Charts)
                    Role_y_Mean_Charts  = pd.DataFrame(Role_x_Mean_Charts)
                    
                    Role_x_Mean_Charts = Role_x_Mean_Charts[(Role_x_Mean_Charts['Atleta']==jogadores)]
                    
                    #Selecting data to compare 1 player and league mean
                    Role_17_Mean_Charts  = Role_x_Mean_Charts.iloc[:, np.r_[0, 4:17]]

                    #Preparing League Mean Data
                    League_Mean = Role_x_Mean_Charts.iloc[:, np.r_[17:30]]
                    League_Mean['Atleta'] = 'Média da Liga' 
                    League_Mean.insert(0, 'Atleta', League_Mean.pop('Atleta'))
                    League_Mean = League_Mean.rename(columns={'Passes_Longos_Certos_LM':'Passes_Longos_Certos', 'Passes_Frontais_Certos_LM':'Passes_Frontais_Certos', 'Passes_Progressivos_Certos_LM':'Passes_Progressivos_Certos', 
                                                        'Duelos_Ofensivos_Ganhos_LM':'Duelos_Ofensivos_Ganhos', 'Dribles_BemSucedidos_LM':'Dribles_BemSucedidos', 'xG_LM':'xG',  
                                                        'Finalizações_NoAlvo_LM':'Finalizações_NoAlvo', 'Conversão_Gols_LM':'Conversão_Gols', 'xA_LM':'xA', 'Assistência_Finalização_LM':'Assistência_Finalização', 
                                                        'Passes_Inteligentes_Certos_LM':'Passes_Inteligentes_Certos', 'Passes_EntreLinhas_Certos_LM':'Passes_EntreLinhas_Certos', 
                                                        'Passes_Chave_LM':'Passes_Chave'})
                    #Merging Dataframes
                    #Adjusting Player Dataframe
                    #Concatenating Dataframes
                    Role_17_Mean_Charts = pd.concat([Role_17_Mean_Charts, League_Mean]).reset_index(drop=True)
                    #Role_17_Mean_Charts = Role_17_Mean_Charts.append(League_Mean).reset_index()
                    #Role_17_Mean_Charts = Role_17_Mean_Charts.rename(columns={'Interceptações.1': 'Interceptações'})    

                    #Splitting Columns
                    Role_17_Mean_Charts_1 = Role_17_Mean_Charts.iloc[:, np.r_[0, 1:8]]
                    Role_17_Mean_Charts_2 = Role_17_Mean_Charts.iloc[:, np.r_[0, 8:14]]


                    # Preparing Graph 1
                    # Get Parameters

                    params = list(Role_17_Mean_Charts_1.columns)
                    params = params[1:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_y_Mean_Charts[params][x])
                        a = a
                        b = max(Role_y_Mean_Charts[params][x])
                        b = b
                        ranges.append((a, b))

                    for x in range(len(Role_17_Mean_Charts_1['Atleta'])):
                        if Role_17_Mean_Charts_1['Atleta'][x] == jogadores:
                            a_values = Role_17_Mean_Charts_1.iloc[x].values.tolist()
                        if Role_17_Mean_Charts_1['Atleta'][x] == 'Média da Liga':
                            b_values = Role_17_Mean_Charts_1.iloc[x].values.tolist()
                                
                    a_values = a_values[1:]
                    b_values = b_values[1:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        title_name_2 = 'Média da Liga',
                        title_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll features are per90'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    plt.savefig('Player&League_Comparison_1.png')
                    st.pyplot(fig)
                    fig.savefig('Player&League_Comparison_1.png', dpi=600, bbox_inches="tight")

                    # Preparing Graph 2
                    # Get Parameters

                    params = list(Role_17_Mean_Charts_2.columns)
                    params = params[1:]
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_y_Mean_Charts[params][x])
                        a = a
                        b = max(Role_y_Mean_Charts[params][x])
                        b = b
                        ranges.append((a, b))

                    for x in range(len(Role_17_Mean_Charts_2['Atleta'])):
                        if Role_17_Mean_Charts_2['Atleta'][x] == jogadores:
                            a_values = Role_17_Mean_Charts_2.iloc[x].values.tolist()
                        if Role_17_Mean_Charts_2['Atleta'][x] == 'Média da Liga':
                            b_values = Role_17_Mean_Charts_2.iloc[x].values.tolist()
                                
                    a_values = a_values[1:]
                    b_values = b_values[1:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        title_name_2 = 'Média da Liga',
                        title_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll features are per90'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    plt.savefig('Player&League_Comparison_2.png')
                    st.pyplot(fig)
                    fig.savefig('Player&League_Comparison_2.png', dpi=600, bbox_inches="tight")

                    ######################################################################################################################################
                    # Plotting KDE Comparison Graphs
                    mais_gráficos = st.button("Para gráficos adicionais por métrica, clique")
                    if mais_gráficos:
                        st.markdown("<h4 style='text-align: center;'><br>Posição Relativa do Jogador na Liga<br></h4>", unsafe_allow_html=True)
                        # Select columns from 4 to 10 (7 columns in total)
                        selected_columns = Role_y_Mean_Charts.iloc[:, 4:17]

                        # Plot KDE for each selected column in pairs
                        for i in range(0, len(selected_columns.columns), 2):
                            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 4))  # Always create two subplots

                            # Plot first column in the pair
                            density = sns.kdeplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i], ax=ax1, color='blue', bw_adjust=0.5)
                            sns.rugplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i], ax=ax1, color='red', height=0.05)  # Adding rug plot
                            x_vals = density.get_lines()[0].get_xdata()
                            y_vals = density.get_lines()[0].get_ydata()
                            ax1.fill_between(x_vals, y_vals, color='lightblue', alpha=0.5)
                            player_value = Role_y_Mean_Charts.loc[Role_y_Mean_Charts['Atleta'] == jogadores, selected_columns.columns[i]].values[0]
                            ax1.axvline(x=player_value, color='red', linewidth=2)
                            ax1.text(player_value + 0.01 * (ax1.get_xlim()[1] - ax1.get_xlim()[0]), ax1.get_ylim()[0] + (ax1.get_ylim()[1] - ax1.get_ylim()[0]) * 0.1, jogadores, color='red', fontsize=17, verticalalignment='bottom')
                            ax1.set_title(f'{selected_columns.columns[i]}', fontsize=18, fontweight='bold')
                            ax1.spines['top'].set_visible(False)
                            ax1.spines['right'].set_visible(False)
                            ax1.spines['left'].set_visible(False)
                            ax1.set_xlabel('')
                            ax1.set_ylabel('')
                            ax1.tick_params(axis='x', labelsize=14)
                            ax1.tick_params(axis='y', which='both', left=False, labelleft=False)


                            if i + 1 < len(selected_columns.columns):  # Check if there is a second plot to render
                                # Plot second column in the pair
                                density = sns.kdeplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i+1], ax=ax2, color='blue', bw_adjust=0.5)
                                sns.rugplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i+1], ax=ax2, color='red', height=0.05)  # Adding rug plot
                                x_vals = density.get_lines()[0].get_xdata()
                                y_vals = density.get_lines()[0].get_ydata()
                                ax2.fill_between(x_vals, y_vals, color='lightblue', alpha=0.5)                                
                                player_value = Role_y_Mean_Charts.loc[Role_y_Mean_Charts['Atleta'] == jogadores, selected_columns.columns[i+1]].values[0]
                                ax2.axvline(x=player_value, color='red', linewidth=2)
                                ax2.text(player_value + 0.01 * (ax2.get_xlim()[1] - ax2.get_xlim()[0]), ax2.get_ylim()[0] + (ax2.get_ylim()[1] - ax2.get_ylim()[0]) * 0.1, jogadores, color='red', fontsize=17, verticalalignment='bottom')
                                ax2.set_title(f'{selected_columns.columns[i+1]}', fontsize=18, fontweight='bold')
                                ax2.spines['top'].set_visible(False)
                                ax2.spines['right'].set_visible(False)
                                ax2.spines['left'].set_visible(False)
                                ax2.set_xlabel('')
                                ax2.set_ylabel('')
                                ax2.tick_params(axis='x', labelsize=14)
                                ax2.tick_params(axis='y', which='both', left=False, labelleft=False)

                            else:
                                # Instead of hiding the second axis, we simply clear it
                                ax2.clear()
                                ax2.axis('off')  # Turn off the axis if not used

                            plt.tight_layout()  # Adjust layout to prevent overlap
                            st.pyplot(fig)

                    ##################################################################################################################### 
                    #####################################################################################################################
                    # EXTREMO TÁTICO
                    # Elaborar Tabela de Abertura com Rating, Ranking, Percentil
                    tabela_1 = pd.read_csv('PlayerAnalysis_Role_18.csv')
                    tabela_1  = tabela_1.iloc[:, np.r_[9, 14, 26, 30:34, 28, 11]]
                    tabela_1 = tabela_1[(tabela_1['Atleta']==jogadores)&((tabela_1['Código_Posição_Wyscout']==10)|(tabela_1['Código_Posição_Wyscout']==11))&(tabela_1['Versão_Temporada']==temporada)&(tabela_1['Liga']==liga)]
                    clube = tabela_1.iat[0, 8]
                    rating = tabela_1.iat[0, 3]
                    ranking = tabela_1.iat[0,4]
                    percentil = tabela_1.iat[0,6]
                    size = tabela_1.iat[0,5]
                    fontsize = 20
                    # Texto de Abertura
                    st.markdown("<h3 style='text-align: center;'>EXTREMO TÁTICO</b></h3>", unsafe_allow_html=True)
                    # Rating/Ranking/Percentil
                    markdown_amount_3 = f"<div style='text-align:center; font-size:{fontsize}px'>{rating:}</div>"
                    markdown_amount_4 = f"<div style='text-align:center; font-size:{fontsize}px'>{ranking:}</div>"
                    markdown_amount_5 = f"<div style='text-align:center; font-size:{fontsize}px'>{percentil:}</div>"
                    markdown_amount_6 = f"<div style='text-align:center; font-size:{fontsize}px'>(Total de {size:} jogadores na Liga)</div>"
                    st.markdown("<h4 style='text-align: center;'>Rating/Ranking/Percentil do Jogador na Liga/Temporada</h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_6, unsafe_allow_html=True)
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.markdown("<h4 style='text-align: center;'>Rating</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_3, unsafe_allow_html=True)
                    with col2:
                        st.markdown("<h4 style='text-align: center;'>Ranking</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_4, unsafe_allow_html=True)
                    with col3:
                        st.markdown("<h4 style='text-align: center;'>Percentil</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_5, unsafe_allow_html=True)
                    st.markdown("---")
                    ##################################################################################################################### 
                    #####################################################################################################################
                    # #Elaborar Tabela com Métricas do Atleta
                    tabela_2 = pd.read_csv('18_Role_Extremo_Tático.csv')
                    tabela_2 = tabela_2.iloc[:, np.r_[1, 18:25, 6, 25, 27]]
                    tabela_2 = tabela_2[(tabela_2['Atleta']==jogadores)&((tabela_2['Código_Posição_Wyscout']==10)|(tabela_2['Código_Posição_Wyscout']==11))&(tabela_2['Versão_Temporada']==temporada)&(tabela_2['Liga']==liga)]
                    tabela_2 = tabela_2.iloc[:, np.r_[0:8]]
                    tabela_2  = pd.DataFrame(tabela_2)
                    tabela_2 = tabela_2.round(decimals=2)
                    # Média da Liga
                    tabela_b = pd.read_csv('18_Role_Extremo_Tático.csv')
                    tabela_b = tabela_b.iloc[:, np.r_[1, 18:25, 6, 25, 27]]
                    tabela_b = tabela_b[((tabela_b['Código_Posição_Wyscout']==10)|(tabela_b['Código_Posição_Wyscout']==11))&(tabela_b['Versão_Temporada']==temporada)&(tabela_b['Liga']==liga)]
                    tabela_b = tabela_b.iloc[:, np.r_[1:8, 9]]
                    tabela_b = tabela_b.round(decimals=2)
                    tabela_c = (tabela_b.groupby('Liga')[['Ações_Defensivas_BemSucedidas', 'Duelos_Defensivos_Ganhos', 'Passes_Frontais_Certos',
                                                            'Passes_Progressivos_Certos', 'Duelos_Ofensivos_Ganhos', 'xG', 'xA']].mean())
                    tabela_c = tabela_c.round(decimals=2)
                    Atleta = ['Média da Liga']
                    tabela_c['Atleta'] = Atleta 
                    tabela_c.insert(0, 'Atleta', tabela_c.pop('Atleta'))
                    # Percentil na Liga
                    tabela_d = pd.read_csv('PlayerAnalysis_Role_18.csv')
                    tabela_d = tabela_d.iloc[:, np.r_[48:55, 9, 14, 26, 28]]
                    tabela_d = tabela_d[(tabela_d['Atleta']==jogadores)&((tabela_d['Código_Posição_Wyscout']==10)|(tabela_d['Código_Posição_Wyscout']==11))&(tabela_d['Versão_Temporada']==temporada)&(tabela_d['Liga']==liga)]
                    tabela_d = tabela_d.iloc[:, np.r_[0:7]]
                    tabela_d = tabela_d.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 'Duelos_Defensivos_Ganhos_Percentil':'Duelos_Defensivos_Ganhos', 
                                                        'Passes_Frontais_Certos_Percentil':'Passes_Frontais_Certos', 'Passes_Progressivos_Certos_Percentil': 'Passes_Progressivos_Certos', 
                                                        'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos', 'xG_Percentil':'xG', 'xA_Percentil':'xA'})
                    Atleta = ['Percentil na Liga']
                    tabela_d['Atleta'] = Atleta 
                    tabela_d.insert(0, 'Atleta', tabela_d.pop('Atleta'))
                    tabela_2 = pd.concat([tabela_2, tabela_c, tabela_d]).reset_index(drop=True)
#                        tabela_2 = tabela_2.append(tabela_c).reset_index()
#                        tabela_2 = tabela_2.append(tabela_d).reset_index()
                    tabela_2 = tabela_2.transpose()
#                        tabela_2 = tabela_2.drop([tabela_2.index[0], tabela_2.index[1]])
                    st.markdown("<h4 style='text-align: center;'>Desempenho do Jogador na Liga/Temporada</h4>", unsafe_allow_html=True)
                    #st.dataframe(tabela_2, use_container_width=True)

                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index()  # If you want the index to be a visible column
                        new_header = df.iloc[0]  # Capture the first row to use as column headers
                        df = df[1:]  # Remove the first row from the data
                        df.columns = new_header  # Set the new column headers
                        first_column_name = df.columns[1]  # Adjusted for the added index column
                        # Ensure 'Rating' is rounded and formatted to 2 decimal places during styling
                        formatter = {first_column_name: "{:.2f}", "Média da Liga": "{:.2f}", "Percentil na Liga": "{:.0f}"}
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px', 'font-size': '15px', 'margin': 'auto'})  # Adjust this for centering

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML, ensure the index is shown and wrapped in a center-aligned div
                        styled_html = style_table(tabela_2).to_html(escape=False, index=False, hide_index=False)
                        center_html = f"<div style='margin-left: auto; margin-right: auto; width: fit-content;'>{styled_html}</div>"
                        st.markdown(center_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    ##################################################################################################################### 
                    #####################################################################################################################
                    #Plotar Gráfico Alternativo
                    # Player Comparison Data
                    st.markdown("<h4 style='text-align: center;'><br>Comparativo do Jogador com a Média da Liga</h4>", unsafe_allow_html=True)
                    Role_18_Mean_Charts = pd.read_csv('18_Role_Extremo_Tático.csv')
                    #PLOTTING COMPARISON BETWEEN 1 PLAYER AND LEAGUE MEAN
                    #Determining Club and League 
                    Role_x_Mean_Charts  = Role_18_Mean_Charts.iloc[:, np.r_[1, 3, 25, 27, 18:25]]
                    Role_x_Mean_Charts = Role_x_Mean_Charts[(Role_x_Mean_Charts['Versão_Temporada']==temporada)&(Role_x_Mean_Charts['Liga']==liga)]

                    Role_x_Mean_Charts['Ações_Defensivas_BemSucedidas_LM'] = Role_x_Mean_Charts['Ações_Defensivas_BemSucedidas'].mean()
                    Role_x_Mean_Charts['Duelos_Defensivos_Ganhos_LM'] = Role_x_Mean_Charts['Duelos_Defensivos_Ganhos'].mean()
                    Role_x_Mean_Charts['Passes_Frontais_Certos_LM'] = Role_x_Mean_Charts['Passes_Frontais_Certos'].mean()
                    Role_x_Mean_Charts['Passes_Progressivos_Certos_LM'] = Role_x_Mean_Charts['Passes_Progressivos_Certos'].mean()
                    Role_x_Mean_Charts['Duelos_Ofensivos_Ganhos_LM'] = Role_x_Mean_Charts['Duelos_Ofensivos_Ganhos'].mean()
                    Role_x_Mean_Charts['xG_LM'] = Role_x_Mean_Charts['xG'].mean()
                    Role_x_Mean_Charts['xA_LM'] = Role_x_Mean_Charts['xA'].mean()
                    
                    Role_x_Mean_Charts  = pd.DataFrame(Role_x_Mean_Charts)
                    Role_y_Mean_Charts  = pd.DataFrame(Role_x_Mean_Charts)
                    
                    Role_x_Mean_Charts = Role_x_Mean_Charts[(Role_x_Mean_Charts['Atleta']==jogadores)]
                    
                    #Selecting data to compare 1 player and league mean
                    Role_18_Mean_Charts  = Role_x_Mean_Charts.iloc[:, np.r_[0, 4:11]]

                    #Preparing League Mean Data
                    League_Mean = Role_x_Mean_Charts.iloc[:, np.r_[11:18]]
                    League_Mean['Atleta'] = 'Média da Liga' 
                    League_Mean.insert(0, 'Atleta', League_Mean.pop('Atleta'))
                    League_Mean = League_Mean.rename(columns={'Ações_Defensivas_BemSucedidas_LM':'Ações_Defensivas_BemSucedidas', 'Duelos_Defensivos_Ganhos_LM':'Duelos_Defensivos_Ganhos', 'Passes_Frontais_Certos_LM':'Passes_Frontais_Certos', 
                                                        'Passes_Progressivos_Certos_LM':'Passes_Progressivos_Certos', 'Duelos_Ofensivos_Ganhos_LM':'Duelos_Ofensivos_Ganhos', 'xG_LM':'xG', 'xA_LM':'xA'})
                    #Merging Dataframes
                    #Adjusting Player Dataframe
                    #Concatenating Dataframes
                    Role_18_Mean_Charts = pd.concat([Role_18_Mean_Charts, League_Mean]).reset_index(drop=True)
                    #Role_18_Mean_Charts = Role_18_Mean_Charts.append(League_Mean).reset_index()

                    #Splitting Columns
                    Role_18_Mean_Charts_1 = Role_18_Mean_Charts.iloc[:, np.r_[0, 1:8]]


                    # Preparing Graph 1
                    # Get Parameters

                    params = list(Role_18_Mean_Charts_1.columns)
                    params = params[1:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_y_Mean_Charts[params][x])
                        a = a
                        b = max(Role_y_Mean_Charts[params][x])
                        b = b
                        ranges.append((a, b))

                    for x in range(len(Role_18_Mean_Charts_1['Atleta'])):
                        if Role_18_Mean_Charts_1['Atleta'][x] == jogadores:
                            a_values = Role_18_Mean_Charts_1.iloc[x].values.tolist()
                        if Role_18_Mean_Charts_1['Atleta'][x] == 'Média da Liga':
                            b_values = Role_18_Mean_Charts_1.iloc[x].values.tolist()
                                
                    a_values = a_values[1:]
                    b_values = b_values[1:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        #subtitle_name = clube,
                        #subtitle_color = '#B6282F',
                        title_name_2 = 'Média da Liga',
                        title_color_2 = '#344D94',
                        #subtitle_name_2 = liga,
                        #subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                        #subtitle_fontsize = 15,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll features are per90'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    plt.savefig('Player&League_Comparison_1.png')
                    st.pyplot(fig)
                    fig.savefig('Player&League_Comparison_1.png', dpi=600, bbox_inches="tight")

                    #####################################################################################################################

                    # Plotting KDE Comparison Graphs
                    mais_gráficos = st.button("Para gráficos adicionais por métrica, clique", key="mais_graficos_key")
                    if mais_gráficos:
                        st.markdown("<h4 style='text-align: center;'><br>Posição Relativa do Jogador na Liga<br></h4>", unsafe_allow_html=True)
                        # Select columns from 4 to 10 (7 columns in total)
                        selected_columns = Role_y_Mean_Charts.iloc[:, 4:11]

                        # Plot KDE for each selected column in pairs
                        for i in range(0, len(selected_columns.columns), 2):
                            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 4))  # Always create two subplots

                            # Plot first column in the pair
                            density = sns.kdeplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i], ax=ax1, color='blue', bw_adjust=0.5)
                            sns.rugplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i], ax=ax1, color='red', height=0.05)  # Adding rug plot
                            x_vals = density.get_lines()[0].get_xdata()
                            y_vals = density.get_lines()[0].get_ydata()
                            ax1.fill_between(x_vals, y_vals, color='lightblue', alpha=0.5)
                            player_value = Role_y_Mean_Charts.loc[Role_y_Mean_Charts['Atleta'] == jogadores, selected_columns.columns[i]].values[0]
                            ax1.axvline(x=player_value, color='red', linewidth=2)
                            ax1.text(player_value + 0.01 * (ax1.get_xlim()[1] - ax1.get_xlim()[0]), ax1.get_ylim()[0] + (ax1.get_ylim()[1] - ax1.get_ylim()[0]) * 0.1, jogadores, color='red', fontsize=17, verticalalignment='bottom')
                            ax1.set_title(f'{selected_columns.columns[i]}', fontsize=18, fontweight='bold')
                            ax1.spines['top'].set_visible(False)
                            ax1.spines['right'].set_visible(False)
                            ax1.spines['left'].set_visible(False)
                            ax1.set_xlabel('')
                            ax1.set_ylabel('')
                            ax1.tick_params(axis='x', labelsize=14)
                            ax1.tick_params(axis='y', which='both', left=False, labelleft=False)


                            if i + 1 < len(selected_columns.columns):  # Check if there is a second plot to render
                                # Plot second column in the pair
                                density = sns.kdeplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i+1], ax=ax2, color='blue', bw_adjust=0.5)
                                sns.rugplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i+1], ax=ax2, color='red', height=0.05)  # Adding rug plot
                                x_vals = density.get_lines()[0].get_xdata()
                                y_vals = density.get_lines()[0].get_ydata()
                                ax2.fill_between(x_vals, y_vals, color='lightblue', alpha=0.5)                                
                                player_value = Role_y_Mean_Charts.loc[Role_y_Mean_Charts['Atleta'] == jogadores, selected_columns.columns[i+1]].values[0]
                                ax2.axvline(x=player_value, color='red', linewidth=2)
                                ax2.text(player_value + 0.01 * (ax2.get_xlim()[1] - ax2.get_xlim()[0]), ax2.get_ylim()[0] + (ax2.get_ylim()[1] - ax2.get_ylim()[0]) * 0.1, jogadores, color='red', fontsize=17, verticalalignment='bottom')
                                ax2.set_title(f'{selected_columns.columns[i+1]}', fontsize=18, fontweight='bold')
                                ax2.spines['top'].set_visible(False)
                                ax2.spines['right'].set_visible(False)
                                ax2.spines['left'].set_visible(False)
                                ax2.set_xlabel('')
                                ax2.set_ylabel('')
                                ax2.tick_params(axis='x', labelsize=14)
                                ax2.tick_params(axis='y', which='both', left=False, labelleft=False)

                            else:
                                # Instead of hiding the second axis, we simply clear it
                                ax2.clear()
                                ax2.axis('off')  # Turn off the axis if not used

                            plt.tight_layout()  # Adjust layout to prevent overlap
                            st.pyplot(fig)


                    #####################################################################################################################
                    #####################################################################################################################
                    # EXTREMO AGUDO
                    # Elaborar Tabela de Abertura com Rating, Ranking, Percentil
                    tabela_1 = pd.read_csv('PlayerAnalysis_Role_19.csv')
                    tabela_1  = tabela_1.iloc[:, np.r_[15, 20, 32, 36:40, 34, 17]]
                    tabela_1 = tabela_1[(tabela_1['Atleta']==jogadores)&((tabela_1['Código_Posição_Wyscout']==10)|(tabela_1['Código_Posição_Wyscout']==11))&(tabela_1['Versão_Temporada']==temporada)&(tabela_1['Liga']==liga)]
                    clube = tabela_1.iat[0, 8]
                    rating = tabela_1.iat[0, 3]
                    ranking = tabela_1.iat[0,4]
                    percentil = tabela_1.iat[0,6]
                    size = tabela_1.iat[0,5]
                    fontsize = 20
                    # Texto de Abertura
                    st.markdown("<h3 style='text-align: center;'>EXTREMO AGUDO</b></h3>", unsafe_allow_html=True)
                    # Rating/Ranking/Percentil
                    markdown_amount_3 = f"<div style='text-align:center; font-size:{fontsize}px'>{rating:}</div>"
                    markdown_amount_4 = f"<div style='text-align:center; font-size:{fontsize}px'>{ranking:}</div>"
                    markdown_amount_5 = f"<div style='text-align:center; font-size:{fontsize}px'>{percentil:}</div>"
                    markdown_amount_6 = f"<div style='text-align:center; font-size:{fontsize}px'>(Total de {size:} jogadores na Liga)</div>"
                    st.markdown("<h4 style='text-align: center;'>Rating/Ranking/Percentil do Jogador na Liga/Temporada</h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_6, unsafe_allow_html=True)
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.markdown("<h4 style='text-align: center;'>Rating</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_3, unsafe_allow_html=True)
                    with col2:
                        st.markdown("<h4 style='text-align: center;'>Ranking</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_4, unsafe_allow_html=True)
                    with col3:
                        st.markdown("<h4 style='text-align: center;'>Percentil</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_5, unsafe_allow_html=True)
                    st.markdown("---")
                    ##################################################################################################################### 
                    #####################################################################################################################
                    # #Elaborar Tabela com Métricas do Atleta
                    tabela_2 = pd.read_csv('19_Role_Extremo_Agudo.csv')
                    tabela_2 = tabela_2.iloc[:, np.r_[1, 18:31, 6, 31, 33]]
                    tabela_2 = tabela_2[(tabela_2['Atleta']==jogadores)&((tabela_2['Código_Posição_Wyscout']==10)|(tabela_2['Código_Posição_Wyscout']==11))&(tabela_2['Versão_Temporada']==temporada)&(tabela_2['Liga']==liga)]
                    tabela_2 = tabela_2.iloc[:, np.r_[0:14]]
                    tabela_2  = pd.DataFrame(tabela_2)
                    tabela_2 = tabela_2.round(decimals=2)
                    # Média da Liga
                    tabela_b = pd.read_csv('19_Role_Extremo_Agudo.csv')
                    tabela_b = tabela_b.iloc[:, np.r_[1, 18:31, 6, 31, 33]]
                    tabela_b = tabela_b[((tabela_b['Código_Posição_Wyscout']==10)|(tabela_b['Código_Posição_Wyscout']==11))&(tabela_b['Versão_Temporada']==temporada)&(tabela_b['Liga']==liga)]
                    tabela_b = tabela_b.iloc[:, np.r_[0:14, 15]]
                    tabela_b = tabela_b.round(decimals=2)
                    tabela_c = (tabela_b.groupby('Liga')[['Duelos_Ofensivos_Ganhos', 'Pisadas_Área', 'Dribles_BemSucedidos', 'Acelerações', 
                                                            'Passes_Longos_Recebidos', 'xG', 'Finalizações_NoAlvo', 'Conversão_Gols', 'xA', 
                                                            'Assistência_Finalização', 'Deep_Completions', 'Deep_Completed_Crosses', 'Passes_Chave']].mean())
                    tabela_c = tabela_c.round(decimals=2)
                    Atleta = ['Média da Liga']
                    tabela_c['Atleta'] = Atleta 
                    tabela_c.insert(0, 'Atleta', tabela_c.pop('Atleta'))
                    # Percentil na Liga
                    tabela_d = pd.read_csv('PlayerAnalysis_Role_19.csv')
                    tabela_d = tabela_d.iloc[:, np.r_[66:79, 15, 20, 32, 34]]
                    tabela_d = tabela_d[(tabela_d['Atleta']==jogadores)&((tabela_d['Código_Posição_Wyscout']==10)|(tabela_d['Código_Posição_Wyscout']==11))&(tabela_d['Versão_Temporada']==temporada)&(tabela_d['Liga']==liga)]
                    tabela_d = tabela_d.iloc[:, np.r_[0:13]]
                    tabela_d = tabela_d.rename(columns={'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos', 'Pisadas_Área_Percentil':'Pisadas_Área', 
                                                        'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos', 'Acelerações_Percentil':'Acelerações', 
                                                        'Passes_Longos_Recebidos_Percentil':'Passes_Longos_Recebidos', 'xG_Percentil':'xG', 'Finalizações_NoAlvo_Percentil':'Finalizações_NoAlvo', 
                                                        'Conversão_Gols_Percentil':'Conversão_Gols', 'xA_Percentil':'xA', 'Assistência_Finalização_Percentil':'Assistência_Finalização', 
                                                        'Deep_Completions_Percentil':'Deep_Completions', 'Deep_Completed_Crosses_Percentil':'Deep_Completed_Crosses', 
                                                        'Passes_Chave_Percentil':'Passes_Chave'})
                    Atleta = ['Percentil na Liga']
                    tabela_d['Atleta'] = Atleta 
                    tabela_d.insert(0, 'Atleta', tabela_d.pop('Atleta'))
                    tabela_2 = pd.concat([tabela_2, tabela_c, tabela_d]).reset_index(drop=True)
#                        tabela_2 = tabela_2.append(tabela_c).reset_index()
#                        tabela_2 = tabela_2.append(tabela_d).reset_index()
                    tabela_2 = tabela_2.transpose()
#                        tabela_2 = tabela_2.drop([tabela_2.index[0], tabela_2.index[1]])
                    st.markdown("<h4 style='text-align: center;'>Desempenho do Jogador na Liga/Temporada</h4>", unsafe_allow_html=True)
                    #st.dataframe(tabela_2, use_container_width=True)

                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index()  # If you want the index to be a visible column
                        new_header = df.iloc[0]  # Capture the first row to use as column headers
                        df = df[1:]  # Remove the first row from the data
                        df.columns = new_header  # Set the new column headers
                        first_column_name = df.columns[1]  # Adjusted for the added index column
                        # Ensure 'Rating' is rounded and formatted to 2 decimal places during styling
                        formatter = {first_column_name: "{:.2f}", "Média da Liga": "{:.2f}", "Percentil na Liga": "{:.0f}"}
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px', 'font-size': '15px', 'margin': 'auto'})  # Adjust this for centering

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML, ensure the index is shown and wrapped in a center-aligned div
                        styled_html = style_table(tabela_2).to_html(escape=False, index=False, hide_index=False)
                        center_html = f"<div style='margin-left: auto; margin-right: auto; width: fit-content;'>{styled_html}</div>"
                        st.markdown(center_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    #####################################################################################################################
                    #####################################################################################################################
                    #Plotar Gráfico Alternativo
                    # Player Comparison Data
                    st.markdown("<h4 style='text-align: center;'><br>Comparativo do Jogador com a Média da Liga</h4>", unsafe_allow_html=True)
                    Role_19_Mean_Charts = pd.read_csv('19_Role_Extremo_Agudo.csv')
                    #PLOTTING COMPARISON BETWEEN 1 PLAYER AND LEAGUE MEAN
                    #Determining Club and League 
                    Role_x_Mean_Charts  = Role_19_Mean_Charts.iloc[:, np.r_[1, 3, 31, 33, 18:31]]
                    Role_x_Mean_Charts = Role_x_Mean_Charts[(Role_x_Mean_Charts['Versão_Temporada']==temporada)&(Role_x_Mean_Charts['Liga']==liga)]

                    Role_x_Mean_Charts['Duelos_Ofensivos_Ganhos_LM'] = Role_x_Mean_Charts['Duelos_Ofensivos_Ganhos'].mean()
                    Role_x_Mean_Charts['Pisadas_Área_LM'] = Role_x_Mean_Charts['Pisadas_Área'].mean()
                    Role_x_Mean_Charts['Dribles_BemSucedidos_LM'] = Role_x_Mean_Charts['Dribles_BemSucedidos'].mean()
                    Role_x_Mean_Charts['Acelerações_LM'] = Role_x_Mean_Charts['Acelerações'].mean()
                    Role_x_Mean_Charts['Passes_Longos_Recebidos_LM'] = Role_x_Mean_Charts['Passes_Longos_Recebidos'].mean()
                    Role_x_Mean_Charts['xG_LM'] = Role_x_Mean_Charts['xG'].mean()
                    Role_x_Mean_Charts['Finalizações_NoAlvo_LM'] = Role_x_Mean_Charts['Finalizações_NoAlvo'].mean()
                    Role_x_Mean_Charts['Conversão_Gols_LM'] = Role_x_Mean_Charts['Conversão_Gols'].mean()
                    Role_x_Mean_Charts['xA_LM'] = Role_x_Mean_Charts['xA'].mean()
                    Role_x_Mean_Charts['Assistência_Finalização_LM'] = Role_x_Mean_Charts['Assistência_Finalização'].mean()
                    Role_x_Mean_Charts['Deep_Completions_LM'] = Role_x_Mean_Charts['Deep_Completions'].mean()
                    Role_x_Mean_Charts['Deep_Completed_Crosses_LM'] = Role_x_Mean_Charts['Deep_Completed_Crosses'].mean()
                    Role_x_Mean_Charts['Passes_Chave_LM'] = Role_x_Mean_Charts['Passes_Chave'].mean()
                    
                    Role_x_Mean_Charts  = pd.DataFrame(Role_x_Mean_Charts)
                    Role_y_Mean_Charts  = pd.DataFrame(Role_x_Mean_Charts)
                    
                    Role_x_Mean_Charts = Role_x_Mean_Charts[(Role_x_Mean_Charts['Atleta']==jogadores)]
                    
                    #Selecting data to compare 1 player and league mean
                    Role_19_Mean_Charts  = Role_x_Mean_Charts.iloc[:, np.r_[0, 4:17]]

                    #Preparing League Mean Data
                    League_Mean = Role_x_Mean_Charts.iloc[:, np.r_[17:30]]
                    League_Mean['Atleta'] = 'Média da Liga' 
                    League_Mean.insert(0, 'Atleta', League_Mean.pop('Atleta'))
                    League_Mean = League_Mean.rename(columns={'Duelos_Ofensivos_Ganhos_LM':'Duelos_Ofensivos_Ganhos', 'Pisadas_Área_LM':'Pisadas_Área', 'Dribles_BemSucedidos_LM':'Dribles_BemSucedidos', 
                                                            'Acelerações_LM':'Acelerações', 'Passes_Longos_Recebidos_LM':'Passes_Longos_Recebidos', 'xG_LM':'xG', 'Finalizações_NoAlvo_LM':'Finalizações_NoAlvo', 'Conversão_Gols_LM':'Conversão_Gols', 
                                                            'xA_LM':'xA', 'Assistência_Finalização_LM':'Assistência_Finalização', 'Deep_Completions_LM':'Deep_Completions', 'Deep_Completed_Crosses_LM':'Deep_Completed_Crosses', 
                                                            'Passes_Chave_LM':'Passes_Chave'})
                    #Merging Dataframes
                    #Adjusting Player Dataframe
                    #Concatenating Dataframes
                    Role_19_Mean_Charts = pd.concat([Role_19_Mean_Charts, League_Mean]).reset_index(drop=True)
                    #Role_19_Mean_Charts = Role_19_Mean_Charts.append(League_Mean).reset_index()
                    #Role_19_Mean_Charts = Role_19_Mean_Charts.rename(columns={'Interceptações.1': 'Interceptações'})    

                    #Splitting Columns
                    Role_19_Mean_Charts_1 = Role_19_Mean_Charts.iloc[:, np.r_[0, 1:8]]
                    Role_19_Mean_Charts_2 = Role_19_Mean_Charts.iloc[:, np.r_[0, 8:14]]


                    # Preparing Graph 1
                    # Get Parameters

                    params = list(Role_19_Mean_Charts_1.columns)
                    params = params[1:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_y_Mean_Charts[params][x])
                        a = a
                        b = max(Role_y_Mean_Charts[params][x])
                        b = b
                        ranges.append((a, b))

                    for x in range(len(Role_19_Mean_Charts_1['Atleta'])):
                        if Role_19_Mean_Charts_1['Atleta'][x] == jogadores:
                            a_values = Role_19_Mean_Charts_1.iloc[x].values.tolist()
                        if Role_19_Mean_Charts_1['Atleta'][x] == 'Média da Liga':
                            b_values = Role_19_Mean_Charts_1.iloc[x].values.tolist()
                                
                    a_values = a_values[1:]
                    b_values = b_values[1:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        title_name_2 = 'Média da Liga',
                        title_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll features are per90'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    plt.savefig('Player&League_Comparison_1.png')
                    st.pyplot(fig)
                    fig.savefig('Player&League_Comparison_1.png', dpi=600, bbox_inches="tight")

                    # Preparing Graph 2
                    # Get Parameters

                    params = list(Role_19_Mean_Charts_2.columns)
                    params = params[1:]
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_y_Mean_Charts[params][x])
                        a = a
                        b = max(Role_y_Mean_Charts[params][x])
                        b = b
                        ranges.append((a, b))

                    for x in range(len(Role_19_Mean_Charts_2['Atleta'])):
                        if Role_19_Mean_Charts_2['Atleta'][x] == jogadores:
                            a_values = Role_19_Mean_Charts_2.iloc[x].values.tolist()
                        if Role_19_Mean_Charts_2['Atleta'][x] == 'Média da Liga':
                            b_values = Role_19_Mean_Charts_2.iloc[x].values.tolist()
                                
                    a_values = a_values[1:]
                    b_values = b_values[1:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        title_name_2 = 'Média da Liga',
                        title_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll features are per90'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    plt.savefig('Player&League_Comparison_2.png')
                    st.pyplot(fig)
                    fig.savefig('Player&League_Comparison_2.png', dpi=600, bbox_inches="tight")

                    ##########################################################################################################################################

                    # Plotting KDE Comparison Graphs
                    mais_gráficos = st.button("Para gráficos adicionais por métrica, clique", key="2_mais_graficos_key")
                    if mais_gráficos:
                        st.markdown("<h4 style='text-align: center;'><br>Posição Relativa do Jogador na Liga<br></h4>", unsafe_allow_html=True)
                        # Select columns from 4 to 10 (7 columns in total)
                        selected_columns = Role_y_Mean_Charts.iloc[:, 4:17]

                        # Plot KDE for each selected column in pairs
                        for i in range(0, len(selected_columns.columns), 2):
                            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 4))  # Always create two subplots

                            # Plot first column in the pair
                            density = sns.kdeplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i], ax=ax1, color='blue', bw_adjust=0.5)
                            sns.rugplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i], ax=ax1, color='red', height=0.05)  # Adding rug plot
                            x_vals = density.get_lines()[0].get_xdata()
                            y_vals = density.get_lines()[0].get_ydata()
                            ax1.fill_between(x_vals, y_vals, color='lightblue', alpha=0.5)
                            player_value = Role_y_Mean_Charts.loc[Role_y_Mean_Charts['Atleta'] == jogadores, selected_columns.columns[i]].values[0]
                            ax1.axvline(x=player_value, color='red', linewidth=2)
                            ax1.text(player_value + 0.01 * (ax1.get_xlim()[1] - ax1.get_xlim()[0]), ax1.get_ylim()[0] + (ax1.get_ylim()[1] - ax1.get_ylim()[0]) * 0.1, jogadores, color='red', fontsize=17, verticalalignment='bottom')
                            ax1.set_title(f'{selected_columns.columns[i]}', fontsize=18, fontweight='bold')
                            ax1.spines['top'].set_visible(False)
                            ax1.spines['right'].set_visible(False)
                            ax1.spines['left'].set_visible(False)
                            ax1.set_xlabel('')
                            ax1.set_ylabel('')
                            ax1.tick_params(axis='x', labelsize=14)
                            ax1.tick_params(axis='y', which='both', left=False, labelleft=False)


                            if i + 1 < len(selected_columns.columns):  # Check if there is a second plot to render
                                # Plot second column in the pair
                                density = sns.kdeplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i+1], ax=ax2, color='blue', bw_adjust=0.5)
                                sns.rugplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i+1], ax=ax2, color='red', height=0.05)  # Adding rug plot
                                x_vals = density.get_lines()[0].get_xdata()
                                y_vals = density.get_lines()[0].get_ydata()
                                ax2.fill_between(x_vals, y_vals, color='lightblue', alpha=0.5)                                
                                player_value = Role_y_Mean_Charts.loc[Role_y_Mean_Charts['Atleta'] == jogadores, selected_columns.columns[i+1]].values[0]
                                ax2.axvline(x=player_value, color='red', linewidth=2)
                                ax2.text(player_value + 0.01 * (ax2.get_xlim()[1] - ax2.get_xlim()[0]), ax2.get_ylim()[0] + (ax2.get_ylim()[1] - ax2.get_ylim()[0]) * 0.1, jogadores, color='red', fontsize=17, verticalalignment='bottom')
                                ax2.set_title(f'{selected_columns.columns[i+1]}', fontsize=18, fontweight='bold')
                                ax2.spines['top'].set_visible(False)
                                ax2.spines['right'].set_visible(False)
                                ax2.spines['left'].set_visible(False)
                                ax2.set_xlabel('')
                                ax2.set_ylabel('')
                                ax2.tick_params(axis='x', labelsize=14)
                                ax2.tick_params(axis='y', which='both', left=False, labelleft=False)

                            else:
                                # Instead of hiding the second axis, we simply clear it
                                ax2.clear()
                                ax2.axis('off')  # Turn off the axis if not used

                            plt.tight_layout()  # Adjust layout to prevent overlap
                            st.pyplot(fig)



                        #####################################################################################################################
                        #####################################################################################################################
                        #####################################################################################################################
                        ##################################################################################################################### 
                elif posição == ("Atacante"):
                    ##################################################################################################################### 
                    #####################################################################################################################
                    # ATACANTE REFERÊNCIA
                    # Elaborar Tabela de Abertura com Rating, Ranking, Percentil
                    tabela_1 = pd.read_csv('PlayerAnalysis_Role_20.csv')
                    tabela_1  = tabela_1.iloc[:, np.r_[12, 17, 29, 33:37, 31, 14]]
                    tabela_1 = tabela_1[(tabela_1['Atleta']==jogadores)&(tabela_1['Código_Posição_Wyscout']==12)&(tabela_1['Versão_Temporada']==temporada)&(tabela_1['Liga']==liga)]
                    clube = tabela_1.iat[0, 8]
                    rating = tabela_1.iat[0, 3]
                    ranking = tabela_1.iat[0,4]
                    percentil = tabela_1.iat[0,6]
                    size = tabela_1.iat[0,5]
                    fontsize = 20
                    ##################################################################################################################### 
                    #####################################################################################################################
                    # Texto de Abertura
                    markdown_amount_1 = f"<div style='text-align:center; font-size:{fontsize}px'>{jogadores:}</div>"
                    markdown_amount_2 = f"<div style='text-align:center; font-size:{fontsize}px'>{clube:}</div>"
                    st.markdown("<h4 style='text-align: center;'>Jogador Selecionado</b></h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_1, unsafe_allow_html=True)
                    st.markdown(markdown_amount_2, unsafe_allow_html=True)
                    st.markdown("---")
                    ##################################################################################################################### 
                    #####################################################################################################################
                    # Dados Básicos do Jogador
                    tabela_a  = pd.read_csv("PlayerAnalysis_Role_20.csv")
                    tabela_a = tabela_a.iloc[:, np.r_[12, 14, 19:24, 25:28, 17, 29, 31]]
                    tabela_a = tabela_a[(tabela_a['Atleta']==jogadores)&(tabela_a['Código_Posição_Wyscout']==12)&(tabela_a['Versão_Temporada']==temporada)&(tabela_a['Liga']==liga)]
                    tabela_a  = tabela_a.iloc[:, np.r_[0:3, 4:10]]
                    st.markdown("<h4 style='text-align: center;'>Dados Básicos</b></h4>", unsafe_allow_html=True)
                    #st.dataframe(tabela_a, use_container_width=True, hide_index=True)

                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index(drop=True)
                        df = df.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Valor_Mercado': 'Valor', 'Nacionalidade': 'Nacional'})
                        formatter = {"Idade": "{:.0f}"}
                        # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px',
                                            'font-size': '15px'})

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML without the index and display it
                        styled_html = style_table(tabela_a).to_html(escape=False, index=False, hide_index=True)
                        st.markdown(styled_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    #####################################################################################################################
                    #####################################################################################################################
                    st.markdown("<h3 style='text-align: center;'><br>ATACANTE REFERÊNCIA</b></h3>", unsafe_allow_html=True)
                    # Rating/Ranking/Percentil
                    markdown_amount_3 = f"<div style='text-align:center; font-size:{fontsize}px'>{rating:}</div>"
                    markdown_amount_4 = f"<div style='text-align:center; font-size:{fontsize}px'>{ranking:}</div>"
                    markdown_amount_5 = f"<div style='text-align:center; font-size:{fontsize}px'>{percentil:}</div>"
                    markdown_amount_6 = f"<div style='text-align:center; font-size:{fontsize}px'>(Total de {size:} jogadores na Liga)</div>"
                    st.markdown("<h4 style='text-align: center;'>Rating/Ranking/Percentil do Jogador na Liga/Temporada</h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_6, unsafe_allow_html=True)
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.markdown("<h4 style='text-align: center;'>Rating</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_3, unsafe_allow_html=True)
                    with col2:
                        st.markdown("<h4 style='text-align: center;'>Ranking</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_4, unsafe_allow_html=True)
                    with col3:
                        st.markdown("<h4 style='text-align: center;'>Percentil</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_5, unsafe_allow_html=True)
                    st.markdown("---")
                    ##################################################################################################################### 
                    #####################################################################################################################
                    #Plotar Gráfico Alternativo
                    # Player Comparison Data
                    st.markdown("<h4 style='text-align: center;'><br>Comparativo do Jogador com a Média da Liga</h4>", unsafe_allow_html=True)
                    Role_20_Mean_Charts = pd.read_csv('20_Role_Atacante_Referência.csv')
                    #PLOTTING COMPARISON BETWEEN 1 PLAYER AND LEAGUE MEAN
                    #Determining Club and League 
                    Role_x_Mean_Charts  = Role_20_Mean_Charts.iloc[:, np.r_[1, 3, 28, 30, 18:28]]
                    Role_x_Mean_Charts = Role_x_Mean_Charts[(Role_x_Mean_Charts['Versão_Temporada']==temporada)&(Role_x_Mean_Charts['Liga']==liga)]

                    Role_x_Mean_Charts['Duelos_Aéreos_Ganhos_LM'] = Role_x_Mean_Charts['Duelos_Aéreos_Ganhos'].mean()
                    Role_x_Mean_Charts['Duelos_Ofensivos_Ganhos_LM'] = Role_x_Mean_Charts['Duelos_Ofensivos_Ganhos'].mean()
                    Role_x_Mean_Charts['xG_LM'] = Role_x_Mean_Charts['xG'].mean()
                    Role_x_Mean_Charts['Conversão_Gols_LM'] = Role_x_Mean_Charts['Conversão_Gols'].mean()
                    Role_x_Mean_Charts['Conversão_xG_LM'] = Role_x_Mean_Charts['Conversão_xG'].mean()
                    Role_x_Mean_Charts['Ameaça_Ofensiva_LM'] = Role_x_Mean_Charts['Ameaça_Ofensiva'].mean()
                    Role_x_Mean_Charts['xA_LM'] = Role_x_Mean_Charts['xA'].mean()
                    Role_x_Mean_Charts['Deep_Completions_LM'] = Role_x_Mean_Charts['Deep_Completions'].mean()
                    Role_x_Mean_Charts['Passes_Chave_LM'] = Role_x_Mean_Charts['Passes_Chave'].mean()
                    Role_x_Mean_Charts['Passes_ÁreaPênalti_Certos_LM'] = Role_x_Mean_Charts['Passes_ÁreaPênalti_Certos'].mean()
                    
                    Role_x_Mean_Charts  = pd.DataFrame(Role_x_Mean_Charts)
                    Role_y_Mean_Charts  = pd.DataFrame(Role_x_Mean_Charts)
                    
                    Role_x_Mean_Charts = Role_x_Mean_Charts[(Role_x_Mean_Charts['Atleta']==jogadores)]
                    
                    #Selecting data to compare 1 player and league mean
                    Role_20_Mean_Charts  = Role_x_Mean_Charts.iloc[:, np.r_[0, 4:14]]

                    #Preparing League Mean Data
                    League_Mean = Role_x_Mean_Charts.iloc[:, np.r_[14:24]]
                    League_Mean['Atleta'] = 'Média da Liga' 
                    League_Mean.insert(0, 'Atleta', League_Mean.pop('Atleta'))
                    League_Mean = League_Mean.rename(columns={'Duelos_Aéreos_Ganhos_LM':'Duelos_Aéreos_Ganhos', 'Duelos_Ofensivos_Ganhos_LM':'Duelos_Ofensivos_Ganhos', 'xG_LM':'xG', 'Conversão_Gols_LM':'Conversão_Gols', 
                                                            'Conversão_xG_LM':'Conversão_xG', 'Ameaça_Ofensiva_LM':'Ameaça_Ofensiva', 'xA_LM':'xA', 'Deep_Completions_LM':'Deep_Completions',  
                                                            'Passes_Chave_LM':'Passes_Chave', 'Passes_ÁreaPênalti_Certos_LM':'Passes_ÁreaPênalti_Certos'})
                    #Merging Dataframes
                    #Adjusting Player Dataframe
                    #Concatenating Dataframes
                    Role_20_Mean_Charts = pd.concat([Role_20_Mean_Charts, League_Mean]).reset_index(drop=True)
                    #Role_20_Mean_Charts = Role_20_Mean_Charts.append(League_Mean).reset_index()
                    #Role_20_Mean_Charts = Role_20_Mean_Charts.rename(columns={'Interceptações.1': 'Interceptações'})    

                    #Splitting Columns
                    Role_20_Mean_Charts_1 = Role_20_Mean_Charts.iloc[:, np.r_[0, 1:11]]
                    #Role_20_Mean_Charts_2 = Role_20_Mean_Charts.iloc[:, np.r_[1, 9:15]]


                    # Preparing Graph 1
                    # Get Parameters

                    params = list(Role_20_Mean_Charts_1.columns)
                    params = params[1:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_y_Mean_Charts[params][x])
                        a = a
                        b = max(Role_y_Mean_Charts[params][x])
                        b = b
                        ranges.append((a, b))

                    for x in range(len(Role_20_Mean_Charts_1['Atleta'])):
                        if Role_20_Mean_Charts_1['Atleta'][x] == jogadores:
                            a_values = Role_20_Mean_Charts_1.iloc[x].values.tolist()
                        if Role_20_Mean_Charts_1['Atleta'][x] == 'Média da Liga':
                            b_values = Role_20_Mean_Charts_1.iloc[x].values.tolist()
                                
                    a_values = a_values[1:]
                    b_values = b_values[1:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        title_name_2 = 'Média da Liga',
                        title_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll features are per90'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    plt.savefig('Player&League_Comparison_1.png')
                    st.pyplot(fig)
                    fig.savefig('Player&League_Comparison_1.png', dpi=600, bbox_inches="tight")

                    #####################################################################################################################

                    # Plotting KDE Comparison Graphs
                    mais_gráficos = st.button("Para gráficos adicionais por métrica, clique")
                    if mais_gráficos:
                        st.markdown("<h4 style='text-align: center;'><br>Posição Relativa do Jogador na Liga<br></h4>", unsafe_allow_html=True)
                        # Select columns from 4 to 10 (7 columns in total)
                        selected_columns = Role_y_Mean_Charts.iloc[:, 4:14]

                        # Plot KDE for each selected column in pairs
                        for i in range(0, len(selected_columns.columns), 2):
                            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 4))  # Always create two subplots

                            # Plot first column in the pair
                            density = sns.kdeplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i], ax=ax1, color='blue', bw_adjust=0.5)
                            sns.rugplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i], ax=ax1, color='red', height=0.05)  # Adding rug plot
                            x_vals = density.get_lines()[0].get_xdata()
                            y_vals = density.get_lines()[0].get_ydata()
                            ax1.fill_between(x_vals, y_vals, color='lightblue', alpha=0.5)
                            player_value = Role_y_Mean_Charts.loc[Role_y_Mean_Charts['Atleta'] == jogadores, selected_columns.columns[i]].values[0]
                            ax1.axvline(x=player_value, color='red', linewidth=2)
                            ax1.text(player_value + 0.01 * (ax1.get_xlim()[1] - ax1.get_xlim()[0]), ax1.get_ylim()[0] + (ax1.get_ylim()[1] - ax1.get_ylim()[0]) * 0.1, jogadores, color='red', fontsize=17, verticalalignment='bottom')
                            ax1.set_title(f'{selected_columns.columns[i]}', fontsize=18, fontweight='bold')
                            ax1.spines['top'].set_visible(False)
                            ax1.spines['right'].set_visible(False)
                            ax1.spines['left'].set_visible(False)
                            ax1.set_xlabel('')
                            ax1.set_ylabel('')
                            ax1.tick_params(axis='x', labelsize=14)
                            ax1.tick_params(axis='y', which='both', left=False, labelleft=False)


                            if i + 1 < len(selected_columns.columns):  # Check if there is a second plot to render
                                # Plot second column in the pair
                                density = sns.kdeplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i+1], ax=ax2, color='blue', bw_adjust=0.5)
                                sns.rugplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i+1], ax=ax2, color='red', height=0.05)  # Adding rug plot
                                x_vals = density.get_lines()[0].get_xdata()
                                y_vals = density.get_lines()[0].get_ydata()
                                ax2.fill_between(x_vals, y_vals, color='lightblue', alpha=0.5)                                
                                player_value = Role_y_Mean_Charts.loc[Role_y_Mean_Charts['Atleta'] == jogadores, selected_columns.columns[i+1]].values[0]
                                ax2.axvline(x=player_value, color='red', linewidth=2)
                                ax2.text(player_value + 0.01 * (ax2.get_xlim()[1] - ax2.get_xlim()[0]), ax2.get_ylim()[0] + (ax2.get_ylim()[1] - ax2.get_ylim()[0]) * 0.1, jogadores, color='red', fontsize=17, verticalalignment='bottom')
                                ax2.set_title(f'{selected_columns.columns[i+1]}', fontsize=18, fontweight='bold')
                                ax2.spines['top'].set_visible(False)
                                ax2.spines['right'].set_visible(False)
                                ax2.spines['left'].set_visible(False)
                                ax2.set_xlabel('')
                                ax2.set_ylabel('')
                                ax2.tick_params(axis='x', labelsize=14)
                                ax2.tick_params(axis='y', which='both', left=False, labelleft=False)

                            else:
                                # Instead of hiding the second axis, we simply clear it
                                ax2.clear()
                                ax2.axis('off')  # Turn off the axis if not used

                            plt.tight_layout()  # Adjust layout to prevent overlap
                            st.pyplot(fig)

                    ##################################################################################################################### 
                    #####################################################################################################################
                    ##################################################################################################################### 
                    #####################################################################################################################
                    # SEGUNDO ATACANTE
                    # Elaborar Tabela de Abertura com Rating, Ranking, Percentil
                    tabela_1 = pd.read_csv('PlayerAnalysis_Role_22.csv')
                    tabela_1  = tabela_1.iloc[:, np.r_[15, 20, 32, 36:40, 34, 17]]
                    tabela_1 = tabela_1[(tabela_1['Atleta']==jogadores)&(tabela_1['Código_Posição_Wyscout']==12)&(tabela_1['Versão_Temporada']==temporada)&(tabela_1['Liga']==liga)]
                    clube = tabela_1.iat[0, 8]
                    rating = tabela_1.iat[0, 3]
                    ranking = tabela_1.iat[0,4]
                    percentil = tabela_1.iat[0,6]
                    size = tabela_1.iat[0,5]
                    fontsize = 20
                    # Texto de Abertura
                    st.markdown("<h3 style='text-align: center;'>SEGUNDO ATACANTE</b></h3>", unsafe_allow_html=True)
                    # Rating/Ranking/Percentil
                    markdown_amount_3 = f"<div style='text-align:center; font-size:{fontsize}px'>{rating:}</div>"
                    markdown_amount_4 = f"<div style='text-align:center; font-size:{fontsize}px'>{ranking:}</div>"
                    markdown_amount_5 = f"<div style='text-align:center; font-size:{fontsize}px'>{percentil:}</div>"
                    markdown_amount_6 = f"<div style='text-align:center; font-size:{fontsize}px'>(Total de {size:} jogadores na Liga)</div>"
                    st.markdown("<h4 style='text-align: center;'>Rating/Ranking/Percentil do Jogador na Liga/Temporada</h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_6, unsafe_allow_html=True)
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.markdown("<h4 style='text-align: center;'>Rating</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_3, unsafe_allow_html=True)
                    with col2:
                        st.markdown("<h4 style='text-align: center;'>Ranking</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_4, unsafe_allow_html=True)
                    with col3:
                        st.markdown("<h4 style='text-align: center;'>Percentil</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_5, unsafe_allow_html=True)
                    st.markdown("---")
                    ##################################################################################################################### 
                    #####################################################################################################################
                    # #Elaborar Tabela com Métricas do Atleta
                    tabela_2 = pd.read_csv('22_Role_Segundo_Atacante.csv')
                    tabela_2 = tabela_2.iloc[:, np.r_[1, 18:31, 6, 31, 33]]
                    tabela_2 = tabela_2[(tabela_2['Atleta']==jogadores)&(tabela_2['Código_Posição_Wyscout']==12)&(tabela_2['Versão_Temporada']==temporada)&(tabela_2['Liga']==liga)]
                    tabela_2 = tabela_2.iloc[:, np.r_[0:14]]
                    tabela_2  = pd.DataFrame(tabela_2)
                    tabela_2 = tabela_2.round(decimals=2)
                    # Média da Liga
                    tabela_b = pd.read_csv('22_Role_Segundo_Atacante.csv')
                    tabela_b = tabela_b.iloc[:, np.r_[1, 18:31, 6, 31, 33]]
                    tabela_b = tabela_b[(tabela_b['Código_Posição_Wyscout']==12)&(tabela_b['Versão_Temporada']==temporada)&(tabela_b['Liga']==liga)]
                    tabela_b = tabela_b.iloc[:, np.r_[1:14, 15]]
                    tabela_b = tabela_b.round(decimals=2)
                    tabela_c = (tabela_b.groupby('Liga')[['Duelos_Ofensivos_Ganhos', 'Dribles_BemSucedidos', 'Acelerações', 'xG', 
                                                            'Finalizações_NoAlvo', 'Conversão_Gols', 'Conversão_xG', 'Ameaça_Ofensiva', 'xA', 
                                                            'Assistência_Finalização', 'Deep_Completions', 'Passes_Chave', 'Passes_ÁreaPênalti_Certos']].mean())
                    tabela_c = tabela_c.round(decimals=2)
                    Atleta = ['Média da Liga']
                    tabela_c['Atleta'] = Atleta 
                    tabela_c.insert(0, 'Atleta', tabela_c.pop('Atleta'))
                    # Percentil na Liga
                    tabela_d = pd.read_csv('PlayerAnalysis_Role_22.csv')
                    tabela_d = tabela_d.iloc[:, np.r_[66:79, 15, 20, 32, 34]]
                    tabela_d = tabela_d[(tabela_d['Atleta']==jogadores)&(tabela_d['Código_Posição_Wyscout']==12)&(tabela_d['Versão_Temporada']==temporada)&(tabela_d['Liga']==liga)]
                    tabela_d = tabela_d.iloc[:, np.r_[0:13]]
                    tabela_d = tabela_d.rename(columns={'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos', 'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos', 
                                                        'Acelerações_Percentil':'Acelerações', 'xG_Percentil':'xG', 'Finalizações_NoAlvo_Percentil':'Finalizações_NoAlvo', 
                                                        'Conversão_Gols_Percentil':'Conversão_Gols', 'Conversão_xG_Percentil':'Conversão_xG', 
                                                        'Ameaça_Ofensiva_Percentil':'Ameaça_Ofensiva', 'xA_Percentil':'xA', 'Assistência_Finalização_Percentil':'Assistência_Finalização', 
                                                        'Deep_Completions_Percentil':'Deep_Completions', 'Passes_Chave_Percentil':'Passes_Chave', 
                                                        'Passes_ÁreaPênalti_Certos_Percentil':'Passes_ÁreaPênalti_Certos'})
                    Atleta = ['Percentil na Liga']
                    tabela_d['Atleta'] = Atleta 
                    tabela_d.insert(0, 'Atleta', tabela_d.pop('Atleta'))
                    tabela_2 = pd.concat([tabela_2, tabela_c, tabela_d]).reset_index(drop=True)
#                        tabela_2 = tabela_2.append(tabela_c).reset_index()
#                        tabela_2 = tabela_2.append(tabela_d).reset_index()
                    tabela_2 = tabela_2.transpose()
#                        tabela_2 = tabela_2.drop([tabela_2.index[0], tabela_2.index[1]])
                    st.markdown("<h4 style='text-align: center;'>Desempenho do Jogador na Liga/Temporada</h4>", unsafe_allow_html=True)
                    #st.dataframe(tabela_2, use_container_width=True)

                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index()  # If you want the index to be a visible column
                        new_header = df.iloc[0]  # Capture the first row to use as column headers
                        df = df[1:]  # Remove the first row from the data
                        df.columns = new_header  # Set the new column headers
                        first_column_name = df.columns[1]  # Adjusted for the added index column
                        # Ensure 'Rating' is rounded and formatted to 2 decimal places during styling
                        formatter = {first_column_name: "{:.2f}", "Média da Liga": "{:.2f}", "Percentil na Liga": "{:.0f}"}
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px', 'font-size': '15px', 'margin': 'auto'})  # Adjust this for centering

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML, ensure the index is shown and wrapped in a center-aligned div
                        styled_html = style_table(tabela_2).to_html(escape=False, index=False, hide_index=False)
                        center_html = f"<div style='margin-left: auto; margin-right: auto; width: fit-content;'>{styled_html}</div>"
                        st.markdown(center_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    ##################################################################################################################### 
                    #####################################################################################################################
                    #Plotar Gráfico Alternativo
                    # Player Comparison Data
                    st.markdown("<h4 style='text-align: center;'><br>Comparativo do Jogador com a Média da Liga</h4>", unsafe_allow_html=True)
                    Role_22_Mean_Charts = pd.read_csv('22_Role_Segundo_Atacante.csv')
                    #PLOTTING COMPARISON BETWEEN 1 PLAYER AND LEAGUE MEAN
                    #Determining Club and League 
                    Role_x_Mean_Charts  = Role_22_Mean_Charts.iloc[:, np.r_[1, 3, 31, 33, 18:31]]
                    Role_x_Mean_Charts = Role_x_Mean_Charts[(Role_x_Mean_Charts['Versão_Temporada']==temporada)&(Role_x_Mean_Charts['Liga']==liga)]

                    Role_x_Mean_Charts['Duelos_Ofensivos_Ganhos_LM'] = Role_x_Mean_Charts['Duelos_Ofensivos_Ganhos'].mean()
                    Role_x_Mean_Charts['Dribles_BemSucedidos_LM'] = Role_x_Mean_Charts['Dribles_BemSucedidos'].mean()
                    Role_x_Mean_Charts['Acelerações_LM'] = Role_x_Mean_Charts['Acelerações'].mean()
                    Role_x_Mean_Charts['xG_LM'] = Role_x_Mean_Charts['xG'].mean()
                    Role_x_Mean_Charts['Finalizações_NoAlvo_LM'] = Role_x_Mean_Charts['Finalizações_NoAlvo'].mean()
                    Role_x_Mean_Charts['Conversão_Gols_LM'] = Role_x_Mean_Charts['Conversão_Gols'].mean()
                    Role_x_Mean_Charts['Conversão_xG_LM'] = Role_x_Mean_Charts['Conversão_xG'].mean()
                    Role_x_Mean_Charts['Ameaça_Ofensiva_LM'] = Role_x_Mean_Charts['Ameaça_Ofensiva'].mean()
                    Role_x_Mean_Charts['xA_LM'] = Role_x_Mean_Charts['xA'].mean()
                    Role_x_Mean_Charts['Assistência_Finalização_LM'] = Role_x_Mean_Charts['Assistência_Finalização'].mean()
                    Role_x_Mean_Charts['Deep_Completions_LM'] = Role_x_Mean_Charts['Deep_Completions'].mean()
                    Role_x_Mean_Charts['Passes_Chave_LM'] = Role_x_Mean_Charts['Passes_Chave'].mean()
                    Role_x_Mean_Charts['Passes_ÁreaPênalti_Certos_LM'] = Role_x_Mean_Charts['Passes_ÁreaPênalti_Certos'].mean()
                    
                    Role_x_Mean_Charts  = pd.DataFrame(Role_x_Mean_Charts)
                    Role_y_Mean_Charts  = pd.DataFrame(Role_x_Mean_Charts)
                    
                    Role_x_Mean_Charts = Role_x_Mean_Charts[(Role_x_Mean_Charts['Atleta']==jogadores)]
                    
                    #Selecting data to compare 1 player and league mean
                    Role_22_Mean_Charts  = Role_x_Mean_Charts.iloc[:, np.r_[0, 4:17]]

                    #Preparing League Mean Data
                    League_Mean = Role_x_Mean_Charts.iloc[:, np.r_[17:30]]
                    League_Mean['Atleta'] = 'Média da Liga' 
                    League_Mean.insert(0, 'Atleta', League_Mean.pop('Atleta'))
                    League_Mean = League_Mean.rename(columns={'Duelos_Ofensivos_Ganhos_LM':'Duelos_Ofensivos_Ganhos', 'Dribles_BemSucedidos_LM':'Dribles_BemSucedidos', 
                                                            'Acelerações_LM':'Acelerações', 'xG_LM':'xG', 'Finalizações_NoAlvo_LM':'Finalizações_NoAlvo', 'Conversão_Gols_LM':'Conversão_Gols', 
                                                            'Conversão_xG_LM':'Conversão_xG', 'Ameaça_Ofensiva_LM':'Ameaça_Ofensiva', 'xA_LM':'xA', 'Assistência_Finalização_LM':'Assistência_Finalização', 
                                                            'Deep_Completions_LM':'Deep_Completions', 'Passes_Chave_LM':'Passes_Chave', 'Passes_ÁreaPênalti_Certos_LM':'Passes_ÁreaPênalti_Certos'})
                    #Merging Dataframes
                    #Adjusting Player Dataframe
                    #Concatenating Dataframes
                    Role_22_Mean_Charts = pd.concat([Role_22_Mean_Charts, League_Mean]).reset_index(drop=True)
                    #Role_22_Mean_Charts = Role_22_Mean_Charts.append(League_Mean).reset_index()
                    #Role_22_Mean_Charts = Role_22_Mean_Charts.rename(columns={'Interceptações.1': 'Interceptações'})    

                    #Splitting Columns
                    Role_22_Mean_Charts_1 = Role_22_Mean_Charts.iloc[:, np.r_[0, 1:8]]
                    Role_22_Mean_Charts_2 = Role_22_Mean_Charts.iloc[:, np.r_[0, 8:14]]


                    # Preparing Graph 1
                    # Get Parameters

                    params = list(Role_22_Mean_Charts_1.columns)
                    params = params[1:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_y_Mean_Charts[params][x])
                        a = a
                        b = max(Role_y_Mean_Charts[params][x])
                        b = b
                        ranges.append((a, b))

                    for x in range(len(Role_22_Mean_Charts_1['Atleta'])):
                        if Role_22_Mean_Charts_1['Atleta'][x] == jogadores:
                            a_values = Role_22_Mean_Charts_1.iloc[x].values.tolist()
                        if Role_22_Mean_Charts_1['Atleta'][x] == 'Média da Liga':
                            b_values = Role_22_Mean_Charts_1.iloc[x].values.tolist()
                                
                    a_values = a_values[1:]
                    b_values = b_values[1:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        title_name_2 = 'Média da Liga',
                        title_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll features are per90'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    plt.savefig('Player&League_Comparison_1.png')
                    st.pyplot(fig)
                    fig.savefig('Player&League_Comparison_1.png', dpi=600, bbox_inches="tight")

                    # Preparing Graph 2
                    # Get Parameters

                    params = list(Role_22_Mean_Charts_2.columns)
                    params = params[1:]
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_y_Mean_Charts[params][x])
                        a = a
                        b = max(Role_y_Mean_Charts[params][x])
                        b = b
                        ranges.append((a, b))

                    for x in range(len(Role_22_Mean_Charts_2['Atleta'])):
                        if Role_22_Mean_Charts_2['Atleta'][x] == jogadores:
                            a_values = Role_22_Mean_Charts_2.iloc[x].values.tolist()
                        if Role_22_Mean_Charts_2['Atleta'][x] == 'Média da Liga':
                            b_values = Role_22_Mean_Charts_2.iloc[x].values.tolist()
                                
                    a_values = a_values[1:]
                    b_values = b_values[1:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        title_name_2 = 'Média da Liga',
                        title_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll features are per90'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    plt.savefig('Player&League_Comparison_2.png')
                    st.pyplot(fig)
                    fig.savefig('Player&League_Comparison_2.png', dpi=600, bbox_inches="tight")

                    #####################################################################################################################

                    # Plotting KDE Comparison Graphs
                    mais_gráficos = st.button("Para gráficos adicionais por métrica, clique", key="mais_graficos_key")
                    if mais_gráficos:
                        st.markdown("<h4 style='text-align: center;'><br>Posição Relativa do Jogador na Liga<br></h4>", unsafe_allow_html=True)
                        # Select columns from 4 to 10 (7 columns in total)
                        selected_columns = Role_y_Mean_Charts.iloc[:, 4:17]

                        # Plot KDE for each selected column in pairs
                        for i in range(0, len(selected_columns.columns), 2):
                            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 4))  # Always create two subplots

                            # Plot first column in the pair
                            density = sns.kdeplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i], ax=ax1, color='blue', bw_adjust=0.5)
                            sns.rugplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i], ax=ax1, color='red', height=0.05)  # Adding rug plot
                            x_vals = density.get_lines()[0].get_xdata()
                            y_vals = density.get_lines()[0].get_ydata()
                            ax1.fill_between(x_vals, y_vals, color='lightblue', alpha=0.5)
                            player_value = Role_y_Mean_Charts.loc[Role_y_Mean_Charts['Atleta'] == jogadores, selected_columns.columns[i]].values[0]
                            ax1.axvline(x=player_value, color='red', linewidth=2)
                            ax1.text(player_value + 0.01 * (ax1.get_xlim()[1] - ax1.get_xlim()[0]), ax1.get_ylim()[0] + (ax1.get_ylim()[1] - ax1.get_ylim()[0]) * 0.1, jogadores, color='red', fontsize=17, verticalalignment='bottom')
                            ax1.set_title(f'{selected_columns.columns[i]}', fontsize=18, fontweight='bold')
                            ax1.spines['top'].set_visible(False)
                            ax1.spines['right'].set_visible(False)
                            ax1.spines['left'].set_visible(False)
                            ax1.set_xlabel('')
                            ax1.set_ylabel('')
                            ax1.tick_params(axis='x', labelsize=14)
                            ax1.tick_params(axis='y', which='both', left=False, labelleft=False)


                            if i + 1 < len(selected_columns.columns):  # Check if there is a second plot to render
                                # Plot second column in the pair
                                density = sns.kdeplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i+1], ax=ax2, color='blue', bw_adjust=0.5)
                                sns.rugplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i+1], ax=ax2, color='red', height=0.05)  # Adding rug plot
                                x_vals = density.get_lines()[0].get_xdata()
                                y_vals = density.get_lines()[0].get_ydata()
                                ax2.fill_between(x_vals, y_vals, color='lightblue', alpha=0.5)                                
                                player_value = Role_y_Mean_Charts.loc[Role_y_Mean_Charts['Atleta'] == jogadores, selected_columns.columns[i+1]].values[0]
                                ax2.axvline(x=player_value, color='red', linewidth=2)
                                ax2.text(player_value + 0.01 * (ax2.get_xlim()[1] - ax2.get_xlim()[0]), ax2.get_ylim()[0] + (ax2.get_ylim()[1] - ax2.get_ylim()[0]) * 0.1, jogadores, color='red', fontsize=17, verticalalignment='bottom')
                                ax2.set_title(f'{selected_columns.columns[i+1]}', fontsize=18, fontweight='bold')
                                ax2.spines['top'].set_visible(False)
                                ax2.spines['right'].set_visible(False)
                                ax2.spines['left'].set_visible(False)
                                ax2.set_xlabel('')
                                ax2.set_ylabel('')
                                ax2.tick_params(axis='x', labelsize=14)
                                ax2.tick_params(axis='y', which='both', left=False, labelleft=False)

                            else:
                                # Instead of hiding the second axis, we simply clear it
                                ax2.clear()
                                ax2.axis('off')  # Turn off the axis if not used

                            plt.tight_layout()  # Adjust layout to prevent overlap
                            st.pyplot(fig)


                    ##################################################################################################################### 
                    #####################################################################################################################

                    # ATACANTE MÓVEL
                    # Elaborar Tabela de Abertura com Rating, Ranking, Percentil
                    tabela_1 = pd.read_csv('PlayerAnalysis_Role_21.csv')
                    tabela_1  = tabela_1.iloc[:, np.r_[11, 16, 28, 32:36, 30, 13]]
                    tabela_1 = tabela_1[(tabela_1['Atleta']==jogadores)&(tabela_1['Código_Posição_Wyscout']==12)&(tabela_1['Versão_Temporada']==temporada)&(tabela_1['Liga']==liga)]
                    clube = tabela_1.iat[0, 8]
                    rating = tabela_1.iat[0, 3]
                    ranking = tabela_1.iat[0,4]
                    percentil = tabela_1.iat[0,6]
                    size = tabela_1.iat[0,5]
                    fontsize = 20
                    # Texto de Abertura
                    st.markdown("<h3 style='text-align: center;'>ATACANTE MÓVEL</b></h3>", unsafe_allow_html=True)
                    # Rating/Ranking/Percentil
                    markdown_amount_3 = f"<div style='text-align:center; font-size:{fontsize}px'>{rating:}</div>"
                    markdown_amount_4 = f"<div style='text-align:center; font-size:{fontsize}px'>{ranking:}</div>"
                    markdown_amount_5 = f"<div style='text-align:center; font-size:{fontsize}px'>{percentil:}</div>"
                    markdown_amount_6 = f"<div style='text-align:center; font-size:{fontsize}px'>(Total de {size:} jogadores na Liga)</div>"
                    st.markdown("<h4 style='text-align: center;'>Rating/Ranking/Percentil do Jogador na Liga/Temporada</h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_6, unsafe_allow_html=True)
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.markdown("<h4 style='text-align: center;'>Rating</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_3, unsafe_allow_html=True)
                    with col2:
                        st.markdown("<h4 style='text-align: center;'>Ranking</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_4, unsafe_allow_html=True)
                    with col3:
                        st.markdown("<h4 style='text-align: center;'>Percentil</b></h4>", unsafe_allow_html=True)
                        st.markdown(markdown_amount_5, unsafe_allow_html=True)
                    st.markdown("---")
                    ##################################################################################################################### 
                    #####################################################################################################################
                    # #Elaborar Tabela com Métricas do Atleta
                    tabela_2 = pd.read_csv('21_Role_Atacante_Móvel.csv')
                    tabela_2 = tabela_2.iloc[:, np.r_[1, 18:27, 6, 27, 29]]
                    tabela_2 = tabela_2[(tabela_2['Atleta']==jogadores)&(tabela_2['Código_Posição_Wyscout']==12)&(tabela_2['Versão_Temporada']==temporada)&(tabela_2['Liga']==liga)]
                    tabela_2 = tabela_2.iloc[:, np.r_[0:10]]
                    tabela_2  = pd.DataFrame(tabela_2)
                    tabela_2 = tabela_2.round(decimals=2)
                    # Média da Liga
                    tabela_b = pd.read_csv('21_Role_Atacante_Móvel.csv')
                    tabela_b = tabela_b.iloc[:, np.r_[1, 18:27, 6, 27, 29]]
                    tabela_b = tabela_b[(tabela_b['Código_Posição_Wyscout']==12)&(tabela_b['Versão_Temporada']==temporada)&(tabela_b['Liga']==liga)]
                    tabela_b = tabela_b.iloc[:, np.r_[1:10, 11]]
                    tabela_b = tabela_b.round(decimals=2)
                    tabela_c = (tabela_b.groupby('Liga')[['Duelos_Ofensivos_Ganhos', 'Dribles_BemSucedidos', 'Acelerações', 'xG', 
                                                            'Conversão_Gols', 'Conversão_xG', 'Ameaça_Ofensiva', 'xA', 
                                                            'Assistência_Finalização']].mean())
                    tabela_c = tabela_c.round(decimals=2)
                    Atleta = ['Média da Liga']
                    tabela_c['Atleta'] = Atleta 
                    tabela_c.insert(0, 'Atleta', tabela_c.pop('Atleta'))
                    # Percentil na Liga
                    tabela_d = pd.read_csv('PlayerAnalysis_Role_21.csv')
                    tabela_d = tabela_d.iloc[:, np.r_[54:63, 11, 16, 28, 30]]
                    tabela_d = tabela_d[(tabela_d['Atleta']==jogadores)&(tabela_d['Código_Posição_Wyscout']==12)&(tabela_d['Versão_Temporada']==temporada)&(tabela_d['Liga']==liga)]
                    tabela_d = tabela_d.iloc[:, np.r_[0:9]]
                    tabela_d = tabela_d.rename(columns={'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos', 'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos', 
                                                        'Acelerações_Percentil':'Acelerações', 'xG_Percentil':'xG', 'Conversão_Gols_Percentil':'Conversão_Gols', 
                                                        'Conversão_xG_Percentil':'Conversão_xG', 'Ameaça_Ofensiva_Percentil':'Ameaça_Ofensiva', 'xA_Percentil':'xA', 
                                                        'Assistência_Finalização_Percentil':'Assistência_Finalização'})
                    Atleta = ['Percentil na Liga']
                    tabela_d['Atleta'] = Atleta 
                    tabela_d.insert(0, 'Atleta', tabela_d.pop('Atleta'))
                    tabela_2 = pd.concat([tabela_2, tabela_c, tabela_d]).reset_index(drop=True)
#                        tabela_2 = tabela_2.append(tabela_c).reset_index()
#                        tabela_2 = tabela_2.append(tabela_d).reset_index()
                    tabela_2 = tabela_2.transpose()
#                        tabela_2 = tabela_2.drop([tabela_2.index[0], tabela_2.index[1]])
                    st.markdown("<h4 style='text-align: center;'>Desempenho do Jogador na Liga/Temporada</h4>", unsafe_allow_html=True)
                    #st.dataframe(tabela_2, use_container_width=True)

                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index()  # If you want the index to be a visible column
                        new_header = df.iloc[0]  # Capture the first row to use as column headers
                        df = df[1:]  # Remove the first row from the data
                        df.columns = new_header  # Set the new column headers
                        first_column_name = df.columns[1]  # Adjusted for the added index column
                        # Ensure 'Rating' is rounded and formatted to 2 decimal places during styling
                        formatter = {first_column_name: "{:.2f}", "Média da Liga": "{:.2f}", "Percentil na Liga": "{:.0f}"}
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px', 'font-size': '15px', 'margin': 'auto'})  # Adjust this for centering

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML, ensure the index is shown and wrapped in a center-aligned div
                        styled_html = style_table(tabela_2).to_html(escape=False, index=False)
                        center_html = f"<div style='margin-left: auto; margin-right: auto; width: fit-content;'>{styled_html}</div>"
                        st.markdown(center_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    ##################################################################################################################### 
                    #####################################################################################################################
                    #Plotar Gráfico Alternativo
                    # Player Comparison Data
                    st.markdown("<h4 style='text-align: center;'><br>Comparativo do Jogador com a Média da Liga</h4>", unsafe_allow_html=True)
                    Role_21_Mean_Charts = pd.read_csv('21_Role_Atacante_Móvel.csv')
                    #PLOTTING COMPARISON BETWEEN 1 PLAYER AND LEAGUE MEAN
                    #Determining Club and League 
                    Role_x_Mean_Charts  = Role_21_Mean_Charts.iloc[:, np.r_[1, 3, 27, 29, 18:27]]
                    Role_x_Mean_Charts = Role_x_Mean_Charts[(Role_x_Mean_Charts['Versão_Temporada']==temporada)&(Role_x_Mean_Charts['Liga']==liga)]

                    Role_x_Mean_Charts['Duelos_Ofensivos_Ganhos_LM'] = Role_x_Mean_Charts['Duelos_Ofensivos_Ganhos'].mean()
                    Role_x_Mean_Charts['Dribles_BemSucedidos_LM'] = Role_x_Mean_Charts['Dribles_BemSucedidos'].mean()
                    Role_x_Mean_Charts['Acelerações_LM'] = Role_x_Mean_Charts['Acelerações'].mean()
                    Role_x_Mean_Charts['xG_LM'] = Role_x_Mean_Charts['xG'].mean()
                    Role_x_Mean_Charts['Conversão_Gols_LM'] = Role_x_Mean_Charts['Conversão_Gols'].mean()
                    Role_x_Mean_Charts['Conversão_xG_LM'] = Role_x_Mean_Charts['Conversão_xG'].mean()
                    Role_x_Mean_Charts['Ameaça_Ofensiva_LM'] = Role_x_Mean_Charts['Ameaça_Ofensiva'].mean()
                    Role_x_Mean_Charts['xA_LM'] = Role_x_Mean_Charts['xA'].mean()
                    Role_x_Mean_Charts['Assistência_Finalização_LM'] = Role_x_Mean_Charts['Assistência_Finalização'].mean()
                    
                    Role_x_Mean_Charts  = pd.DataFrame(Role_x_Mean_Charts)
                    Role_y_Mean_Charts  = pd.DataFrame(Role_x_Mean_Charts)
                    
                    Role_x_Mean_Charts = Role_x_Mean_Charts[(Role_x_Mean_Charts['Atleta']==jogadores)]
                    
                    #Selecting data to compare 1 player and league mean
                    Role_21_Mean_Charts  = Role_x_Mean_Charts.iloc[:, np.r_[0, 4:13]]

                    #Preparing League Mean Data
                    League_Mean = Role_x_Mean_Charts.iloc[:, np.r_[13:22]]
                    League_Mean['Atleta'] = 'Média da Liga' 
                    League_Mean.insert(0, 'Atleta', League_Mean.pop('Atleta'))
                    League_Mean = League_Mean.rename(columns={'Duelos_Ofensivos_Ganhos_LM':'Duelos_Ofensivos_Ganhos', 'Dribles_BemSucedidos_LM':'Dribles_BemSucedidos', 
                                                            'Acelerações_LM':'Acelerações', 'xG_LM':'xG', 'Conversão_Gols_LM':'Conversão_Gols', 
                                                            'Conversão_xG_LM':'Conversão_xG', 'Ameaça_Ofensiva_LM':'Ameaça_Ofensiva', 'xA_LM':'xA', 'Assistência_Finalização_LM':'Assistência_Finalização'})
                    #Merging Dataframes
                    #Adjusting Player Dataframe
                    #Concatenating Dataframes
                    Role_21_Mean_Charts = pd.concat([Role_21_Mean_Charts, League_Mean]).reset_index(drop=True)
                    #Role_21_Mean_Charts = Role_21_Mean_Charts.append(League_Mean).reset_index()
                    #Role_21_Mean_Charts = Role_21_Mean_Charts.rename(columns={'Interceptações.1': 'Interceptações'})    

                    #Splitting Columns
                    Role_21_Mean_Charts_1 = Role_21_Mean_Charts.iloc[:, np.r_[0, 1:10]]
                    #Role_21_Mean_Charts_2 = Role_21_Mean_Charts.iloc[:, np.r_[1, 9:15]]


                    # Preparing Graph 1
                    # Get Parameters

                    params = list(Role_21_Mean_Charts_1.columns)
                    params = params[1:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_y_Mean_Charts[params][x])
                        a = a
                        b = max(Role_y_Mean_Charts[params][x])
                        b = b
                        ranges.append((a, b))

                    for x in range(len(Role_21_Mean_Charts_1['Atleta'])):
                        if Role_21_Mean_Charts_1['Atleta'][x] == jogadores:
                            a_values = Role_21_Mean_Charts_1.iloc[x].values.tolist()
                        if Role_21_Mean_Charts_1['Atleta'][x] == 'Média da Liga':
                            b_values = Role_21_Mean_Charts_1.iloc[x].values.tolist()
                                
                    a_values = a_values[1:]
                    b_values = b_values[1:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        title_name_2 = 'Média da Liga',
                        title_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll features are per90'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    plt.savefig('Player&League_Comparison_1.png')
                    st.pyplot(fig)
                    fig.savefig('Player&League_Comparison_1.png', dpi=600, bbox_inches="tight")

                    #####################################################################################################################

                    # Plotting KDE Comparison Graphs
                    mais_gráficos = st.button("Para gráficos adicionais por métrica, clique", key="2_mais_graficos_key")
                    if mais_gráficos:
                        st.markdown("<h4 style='text-align: center;'><br>Posição Relativa do Jogador na Liga<br></h4>", unsafe_allow_html=True)
                        # Select columns from 4 to 10 (7 columns in total)
                        selected_columns = Role_y_Mean_Charts.iloc[:, 4:13]

                        # Plot KDE for each selected column in pairs
                        for i in range(0, len(selected_columns.columns), 2):
                            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 4))  # Always create two subplots

                            # Plot first column in the pair
                            density = sns.kdeplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i], ax=ax1, color='blue', bw_adjust=0.5)
                            sns.rugplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i], ax=ax1, color='red', height=0.05)  # Adding rug plot
                            x_vals = density.get_lines()[0].get_xdata()
                            y_vals = density.get_lines()[0].get_ydata()
                            ax1.fill_between(x_vals, y_vals, color='lightblue', alpha=0.5)
                            player_value = Role_y_Mean_Charts.loc[Role_y_Mean_Charts['Atleta'] == jogadores, selected_columns.columns[i]].values[0]
                            ax1.axvline(x=player_value, color='red', linewidth=2)
                            ax1.text(player_value + 0.01 * (ax1.get_xlim()[1] - ax1.get_xlim()[0]), ax1.get_ylim()[0] + (ax1.get_ylim()[1] - ax1.get_ylim()[0]) * 0.1, jogadores, color='red', fontsize=17, verticalalignment='bottom')
                            ax1.set_title(f'{selected_columns.columns[i]}', fontsize=18, fontweight='bold')
                            ax1.spines['top'].set_visible(False)
                            ax1.spines['right'].set_visible(False)
                            ax1.spines['left'].set_visible(False)
                            ax1.set_xlabel('')
                            ax1.set_ylabel('')
                            ax1.tick_params(axis='x', labelsize=14)
                            ax1.tick_params(axis='y', which='both', left=False, labelleft=False)


                            if i + 1 < len(selected_columns.columns):  # Check if there is a second plot to render
                                # Plot second column in the pair
                                density = sns.kdeplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i+1], ax=ax2, color='blue', bw_adjust=0.5)
                                sns.rugplot(data=Role_y_Mean_Charts, x=selected_columns.columns[i+1], ax=ax2, color='red', height=0.05)  # Adding rug plot
                                x_vals = density.get_lines()[0].get_xdata()
                                y_vals = density.get_lines()[0].get_ydata()
                                ax2.fill_between(x_vals, y_vals, color='lightblue', alpha=0.5)                                
                                player_value = Role_y_Mean_Charts.loc[Role_y_Mean_Charts['Atleta'] == jogadores, selected_columns.columns[i+1]].values[0]
                                ax2.axvline(x=player_value, color='red', linewidth=2)
                                ax2.text(player_value + 0.01 * (ax2.get_xlim()[1] - ax2.get_xlim()[0]), ax2.get_ylim()[0] + (ax2.get_ylim()[1] - ax2.get_ylim()[0]) * 0.1, jogadores, color='red', fontsize=17, verticalalignment='bottom')
                                ax2.set_title(f'{selected_columns.columns[i+1]}', fontsize=18, fontweight='bold')
                                ax2.spines['top'].set_visible(False)
                                ax2.spines['right'].set_visible(False)
                                ax2.spines['left'].set_visible(False)
                                ax2.set_xlabel('')
                                ax2.set_ylabel('')
                                ax2.tick_params(axis='x', labelsize=14)
                                ax2.tick_params(axis='y', which='both', left=False, labelleft=False)

                            else:
                                # Instead of hiding the second axis, we simply clear it
                                ax2.clear()
                                ax2.axis('off')  # Turn off the axis if not used

                            plt.tight_layout()  # Adjust layout to prevent overlap
                            st.pyplot(fig)



                        #####################################################################################################################
                        #####################################################################################################################
                        #####################################################################################################################
                        #####################################################################################################################

jogadores_similares = df10["Atleta"].unique()
fontsize = 20
if choose == "Jogadores Similares":
    st.markdown("<h2 style='text-align: center;'>Jogadores Similares</h2>", unsafe_allow_html=True)
    st.markdown("<h3 style='text-align: center;'>Ligas Selecionadas - 2024</h3>", unsafe_allow_html=True)
    jogador_similar = st.selectbox("Digite o nome de seu jogador. A grafia deve ser exata!", options=jogadores_similares, index=None, placeholder="Jogador")
    if jogador_similar:
        #Determinar a Liga (pode haver duplicidades)
        dfliga = df10.loc[(df10['Atleta'] == jogador_similar)]
        ligas = dfliga['Liga'].unique()
        liga_similar = st.selectbox("Escolha a Liga", options=ligas)
        if liga_similar:
            #Determinar Posição
            df11 = df10.loc[(df10['Atleta']==jogador_similar) & (df10['Liga']==liga_similar)]
            posições = df11['Posição'].unique()
            posição_similar = st.selectbox("Escolha a Posição", options=posições)
            dfequipe = df11['Equipe_Janela_Análise']
            if posição_similar:
                #Determinar Perfil
                df12 = df2.loc[(df2["Posição"]==posição_similar)]
                perfis = df12["Função"].unique()
                perfil_similar = st.selectbox("Escolha o Perfil em Campo", options=perfis)
            
                if perfil_similar == ("Goleiro"):
                #####################################################################################################################
                #####################################################################################################################
                    # GOLEIRO CLÁSSICO
                    # Texto de Abertura>
                    markdown_amount_1 = f"<div style='text-align:center; font-size:{fontsize}px'>{jogador_similar:}</div>"
                    st.markdown("<h4 style='text-align: center;'>Jogador Selecionado</b></h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_1, unsafe_allow_html=True)
                    st.markdown("---")

                    #Carregando arquivo de dados
                    Role_1_data = pd.read_csv('1_Role_Goleiro_Similarity.csv')
                    Role_1_data = Role_1_data.drop(Role_1_data.columns[0:4], axis=1)
                    Role_1_data.reset_index(drop=True, inplace=True)

                    # Step : Defina o atleta-alvo
                    target = Role_1_data.loc[(Role_1_data['Atleta'] == jogador_similar)]

                    #Step : Definindo "ID-alvo"
                    given_ID = target.iat[0, -1]

                    # Definição da Base de Trabalho
                    selected = Role_1_data

                    # Step 9: Add columns "1", "2", "3" to Role_1_data
                    selected['1'] = given_ID[0]
                    selected['2'] = given_ID[1]
                    selected['3'] = given_ID[2]

                    # Assigning correct columns to 1, 2, 3

                    if given_ID[0] == "A":
                        selected['1'] = selected["A1"]
                    elif given_ID[0] == "B":
                        selected['1'] = selected["B1"]
                    elif given_ID[0] == "C":
                        selected['1'] = selected["C1"]
                    elif given_ID[0] == "D":
                        selected['1'] = selected["D1"]
                    elif given_ID[0] == "E":
                        selected['1'] = selected["E1"]
                    elif given_ID[0] == "F":
                        selected['1'] = selected["F1"]
                    elif given_ID[0] == "G":
                        selected['1'] = selected["G1"]

                    if given_ID[1] == "A":
                        selected['2'] = selected["A1"]
                    elif given_ID[1] == "B":
                        selected['2'] = selected["B1"]
                    elif given_ID[1] == "C":
                        selected['2'] = selected["C1"]
                    elif given_ID[1] == "D":
                        selected['2'] = selected["D1"]
                    elif given_ID[1] == "E":
                        selected['2'] = selected["E1"]
                    elif given_ID[1] == "F":
                        selected['2'] = selected["F1"]
                    elif given_ID[1] == "G":
                        selected['2'] = selected["G1"]

                    if given_ID[2] == "A":
                        selected['3'] = selected["A1"]
                    elif given_ID[2] == "B":
                        selected['3'] = selected["B1"]
                    elif given_ID[2] == "C":
                        selected['3'] = selected["C1"]
                    elif given_ID[2] == "D":
                        selected['3'] = selected["D1"]
                    elif given_ID[2] == "E":
                        selected['3'] = selected["E1"]
                    elif given_ID[2] == "F":
                        selected['3'] = selected["F1"]
                    elif given_ID[2] == "G":
                        selected['3'] = selected["G1"]

                    #############################################################

                    # Applying PCA for Scaled Selected Columns

                    leagues = ["ARG1", "AUT", "BEL1", "BRA1", "BRA2", "BUL", "CHN", 
                            "COL", "DEN", "ENG1", "ENG2", "FRA1", "FRA2", "GER1", 
                            "GER2", "GRE", "HOL", "ITA1", "ITA2", "JAP", "MEX", "PAR", 
                            "POR1", "QAT", "RUS", "SAUD", "SCT", "SER", "SPA1", 
                            "SPA2", "SWZ", "TUR", "UAE", "UKR", "URU", "USA"]

                    # Iterate over each league
                    for league in leagues:

                        # Extract columns 46 through 50
                        Goleiro = selected.iloc[:, np.r_[-3:0]]

                        # Defining Columns
                        Goleiro_columns = Goleiro.columns

                        # Applying PCA
                        pca = PCA(n_components=2)
                        principalComponents = pca.fit_transform(Goleiro)

                        # Create a DataFrame with loadings
                        LoadingsGoleiro = pd.DataFrame(pca.components_.T**2, index=Goleiro_columns, columns=['loading factor 1', 'loading factor 2'])

                        # Multiplying Matrices to obtain Pre_Variables
                        Similarity = pd.DataFrame(np.matmul(Goleiro, LoadingsGoleiro['loading factor 1']) + np.matmul(Goleiro, LoadingsGoleiro['loading factor 2']),
                                                columns=["Similarity"])

                    # Rebuilding Full Training Set
                    selected = selected.join(Similarity)
                    ##############################################################

                    # Lista de Similares
                    # Initialize an empty list to store DataFrames
                    target = selected.loc[(Role_1_data['Atleta'] == jogador_similar) & (Role_1_data['Liga'] == liga_similar)]
                    target_similarity = target.iat[0, -1]

                    selected["Índice de Similaridade"] = (selected['Similarity']/target_similarity)*100
                    selected["Índice de Similaridade"] = round(selected["Índice de Similaridade"], 2)

                    target = selected.loc[(selected['Atleta'] == jogador_similar) & (selected['Liga'] == liga_similar)]
                    selected['Dif_Similarity'] = abs(selected["Índice de Similaridade"] - 100)

                    selected = selected.sort_values(by='Dif_Similarity')

                    lista_similares = selected.iloc[1:31, np.r_[0, 2, 24, 29, -2:0]]
                    lista_similares = lista_similares.sort_values(by='Rating', ascending=False)
                    lista_similares = lista_similares.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Dif_Similarity':'Diferença de Similaridade'})

                    # Lista de Jogadores Similares Ordenados segundo o Rating
                    st.markdown("<h4 style='text-align: center;'>30 Jogadores + Similares</b></h4>", unsafe_allow_html=True)
                    #st.dataframe(lista_similares, use_container_width=True, hide_index=True)

                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index(drop=True)
                        # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                        formatter = {"Rating": "{:.3f}", "Índice de Similaridade": "{:.2f}", "Diferença de Similaridade": "{:.2f}"}  # Format the 'Rating' column to 3 decimal places
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px',
                                            'font-size': '15px'})

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML without the index and display it
                        styled_html = style_table(lista_similares).to_html(escape=False, index=False, hide_index=True)
                        st.markdown(styled_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    st.markdown("---")    

                    # Lista de Latinos
                    selected_latam = selected.iloc[1:31, :]
                    selected_latam = selected_latam[(selected_latam["Nacionalidade"] == "Argentina")|(selected_latam["Nacionalidade"] == "Brazil")
                                        |(selected_latam["Nacionalidade"] == "Bolivia")|(selected_latam["Nacionalidade"] == "Chile")
                                        |(selected_latam["Nacionalidade"] == "Colombia")|(selected_latam["Nacionalidade"] == "Costa Rica")
                                        |(selected_latam["Nacionalidade"] == "Ecuador")|(selected_latam["Nacionalidade"] == "Mexico")
                                        |(selected_latam["Nacionalidade"] == "Panama")|(selected_latam["Nacionalidade"] == "Paraguay")
                                        |(selected_latam["Nacionalidade"] == "Peru")|(selected_latam["Nacionalidade"] == "Uruguay")
                                        |(selected_latam["Nacionalidade"] == "Venezuela")]
                    lista_similares_latam = selected_latam.iloc[0:30, :]
                    lista_similares_latam = lista_similares_latam.sort_values(by="Rating", ascending = False)
                    
                    #Texto para os Gráficos
                    st.markdown("<h4 style='text-align: center;'><br>5 Jogadores Latinos Similares Melhor Ranquedos</b></h4>", unsafe_allow_html=True)
                    st.markdown("---")    


                    # Gerar Gráficos com os 5 melhores
                    # Arquivo para o Gráfico
                    Role_1_Mean_Charts = lista_similares_latam.iloc[:, np.r_[0, 2, 24, 30:37]]
                    target = target.iloc[:, np.r_[0, 2, 24, 30:37]]
                    # Renomeando Colunas
                    Role_1_Mean_Charts = Role_1_Mean_Charts.rename(columns={'Duelos_Aéreos_Ganhos_Percentil':'Duelos_Aéreos_Ganhos', 'Defesas_Percentil': 'Defesas', 
                                                                                'Gols_Evitados_Percentil':'Gols_Evitados', 'Saídas_Percentil': 'Saídas', 
                                                                                'Interceptações.1_Percentil': 'Interceptações', 'xG_Evitado_Percentil': 'xG_Evitado', 
                                                                                'Finalizações_por_Gol_Sofrido_Percentil': 'Finalizações_por_Gol_Sofrido'})
                    
                    target = target.rename(columns={'Duelos_Aéreos_Ganhos_Percentil':'Duelos_Aéreos_Ganhos', 'Defesas_Percentil': 'Defesas', 
                                                                                'Gols_Evitados_Percentil':'Gols_Evitados', 'Saídas_Percentil': 'Saídas', 
                                                                                'Interceptações.1_Percentil': 'Interceptações', 'xG_Evitado_Percentil': 'xG_Evitado', 
                                                                                'Finalizações_por_Gol_Sofrido_Percentil': 'Finalizações_por_Gol_Sofrido'})
                    
                    #Dropping Atleta-alvo
                    Role_1_Mean_Charts = Role_1_Mean_Charts[Role_1_Mean_Charts['Atleta'] != jogador_similar] 
                    #Extraindo 5 melhores
                    Role_1_Mean_Charts = Role_1_Mean_Charts.iloc[0:5, :]

                    #Primeiro Gráfico
                    Role_1_first = Role_1_Mean_Charts.iloc[0:1, :]
                    Role_1_first = pd.concat([Role_1_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_1_first.iat[0, 1]
                    jogadores_clube = Role_1_first.iat[0, 2]
                    jogadores_liga = Role_1_first.iat[0, 3]
                    alvo = Role_1_first.iat[1, 1]
                    alvo_clube = Role_1_first.iat[1, 2]
                    alvo_liga = Role_1_first.iat[1, 3]

                    # Preparing the Graph
                    params = list(Role_1_first.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_1_first[params][x])
                        a = 0
                        b = max(Role_1_first[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_1_first['Atleta'])):
                        if Role_1_first['Atleta'][x] == jogadores:
                            a_values = Role_1_first.iloc[x].values.tolist()
                        if Role_1_first['Atleta'][x] == alvo:
                            b_values = Role_1_first.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    ############################################################################
                    #Segundo Gráfico
                    Role_1_second = Role_1_Mean_Charts.iloc[1:2, :]
                    Role_1_second = pd.concat([Role_1_second, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_1_second.iat[0, 1]
                    jogadores_clube = Role_1_second.iat[0, 2]
                    jogadores_liga = Role_1_second.iat[0, 3]
                    #alvo = Role_1_second.iat[1, 1]
                    #alvo_clube = Role_1_second.iat[1, 2]

                    # Preparing the Graph
                    params = list(Role_1_second.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_1_second[params][x])
                        a = 0
                        b = max(Role_1_second[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_1_second['Atleta'])):
                        if Role_1_second['Atleta'][x] == jogadores:
                            a_values = Role_1_second.iloc[x].values.tolist()
                        if Role_1_second['Atleta'][x] == alvo:
                            b_values = Role_1_second.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    ############################################################################
                    #Terceiro Gráfico
                    Role_1_third = Role_1_Mean_Charts.iloc[2:3, :]
                    Role_1_third = pd.concat([Role_1_third, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_1_third.iat[0, 1]
                    jogadores_clube = Role_1_third.iat[0, 2]
                    jogadores_liga = Role_1_third.iat[0, 3]
                    #alvo = Role_1_fifth.iat[1, 1]
                    #alvo_clube = Role_1_fifth.iat[1, 2]

                    # Preparing the Graph
                    params = list(Role_1_third.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_1_third[params][x])
                        a = 0
                        b = max(Role_1_third[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_1_third['Atleta'])):
                        if Role_1_third['Atleta'][x] == jogadores:
                            a_values = Role_1_third.iloc[x].values.tolist()
                        if Role_1_third['Atleta'][x] == alvo:
                            b_values = Role_1_third.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    ############################################################################
                    #Quarto Gráfico
                    Role_1_fourth = Role_1_Mean_Charts.iloc[3:4, :]
                    Role_1_fourth = pd.concat([Role_1_fourth, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_1_fourth.iat[0, 1]
                    jogadores_clube = Role_1_fourth.iat[0, 2]
                    jogadores_liga = Role_1_fourth.iat[0, 3]
                    #alvo = Role_1_fourth.iat[1, 1]
                    #alvo_clube = Role_1_fourth.iat[1, 2]

                    # Preparing the Graph
                    params = list(Role_1_fourth.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_1_fourth[params][x])
                        a = 0
                        b = max(Role_1_fourth[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_1_fourth['Atleta'])):
                        if Role_1_fourth['Atleta'][x] == jogadores:
                            a_values = Role_1_fourth.iloc[x].values.tolist()
                        if Role_1_fourth['Atleta'][x] == alvo:
                            b_values = Role_1_fourth.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    ############################################################################
                    #Quinto Gráfico
                    Role_1_fifth = Role_1_Mean_Charts.iloc[4:5, :]
                    Role_1_fifth = pd.concat([Role_1_fifth, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_1_fifth.iat[0, 1]
                    jogadores_clube = Role_1_fifth.iat[0, 2]
                    jogadores_liga = Role_1_fifth.iat[0, 3]
                    #alvo = Role_1_fifth.iat[1, 1]
                    #alvo_clube = Role_1_fifth.iat[1, 2]

                    # Preparing the Graph
                    params = list(Role_1_fifth.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_1_fifth[params][x])
                        a = 0
                        b = max(Role_1_fifth[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_1_fifth['Atleta'])):
                        if Role_1_fifth['Atleta'][x] == jogadores:
                            a_values = Role_1_fifth.iloc[x].values.tolist()
                        if Role_1_fifth['Atleta'][x] == alvo:
                            b_values = Role_1_fifth.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ####################################################################################################
                    ####################################################################################################
                    ####################################################################################################
                    ####################################################################################################
                elif perfil_similar == ("Goleiro-Líbero"):
                #####################################################################################################################
                #####################################################################################################################
                    # GOLEIRO LÍBERO
                    # Texto de Abertura>
                    markdown_amount_1 = f"<div style='text-align:center; font-size:{fontsize}px'>{jogador_similar:}</div>"
                    st.markdown("<h4 style='text-align: center;'>Jogador Selecionado</b></h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_1, unsafe_allow_html=True)
                    st.markdown("---")

                    #Carregando arquivo de dados
                    Role_2_data = pd.read_csv('2_Role_Goleiro_Líbero_Similarity.csv')
                    Role_2_data = Role_2_data.drop(Role_2_data.columns[0:4], axis=1)
                    Role_2_data.reset_index(drop=True, inplace=True)

                    # Step : Defina o atleta-alvo
                    #base_bruta_similaridade = pd.read_csv("base_bruta_similaridade.csv")
                    target = Role_2_data.loc[(Role_2_data['Atleta'] == jogador_similar)]

                    #Step : Definindo "ID-alvo"
                    given_ID = target.iat[0, -1]

                    # Definição da Base de Trabalho
                    selected = Role_2_data

                    # Step 9: Add columns "1", "2", "3" to Role_2_data
                    selected['1'] = given_ID[0]
                    selected['2'] = given_ID[1]
                    selected['3'] = given_ID[2]
                    selected['4'] = given_ID[3]

                    # Assigning correct columns to 1, 2, 3

                    if given_ID[0] == "A":
                        selected['1'] = selected["A1"]
                    elif given_ID[0] == "B":
                        selected['1'] = selected["B1"]
                    elif given_ID[0] == "C":
                        selected['1'] = selected["C1"]
                    elif given_ID[0] == "D":
                        selected['1'] = selected["D1"]
                    elif given_ID[0] == "E":
                        selected['1'] = selected["E1"]
                    elif given_ID[0] == "F":
                        selected['1'] = selected["F1"]
                    elif given_ID[0] == "G":
                        selected['1'] = selected["G1"]
                    elif given_ID[0] == "H":
                        selected['1'] = selected["H1"]
                    elif given_ID[0] == "I":
                        selected['1'] = selected["I1"]
                    elif given_ID[0] == "J":
                        selected['1'] = selected["J1"]
                    

                    if given_ID[1] == "A":
                        selected['2'] = selected["A1"]
                    elif given_ID[1] == "B":
                        selected['2'] = selected["B1"]
                    elif given_ID[1] == "C":
                        selected['2'] = selected["C1"]
                    elif given_ID[1] == "D":
                        selected['2'] = selected["D1"]
                    elif given_ID[1] == "E":
                        selected['2'] = selected["E1"]
                    elif given_ID[1] == "F":
                        selected['2'] = selected["F1"]
                    elif given_ID[1] == "G":
                        selected['2'] = selected["G1"]
                    elif given_ID[1] == "H":
                        selected['2'] = selected["H1"]
                    elif given_ID[1] == "I":
                        selected['2'] = selected["I1"]
                    elif given_ID[1] == "J":
                        selected['2'] = selected["J1"]

                    if given_ID[2] == "A":
                        selected['3'] = selected["A1"]
                    elif given_ID[2] == "B":
                        selected['3'] = selected["B1"]
                    elif given_ID[2] == "C":
                        selected['3'] = selected["C1"]
                    elif given_ID[2] == "D":
                        selected['3'] = selected["D1"]
                    elif given_ID[2] == "E":
                        selected['3'] = selected["E1"]
                    elif given_ID[2] == "F":
                        selected['3'] = selected["F1"]
                    elif given_ID[2] == "G":
                        selected['3'] = selected["G1"]
                    elif given_ID[2] == "H":
                        selected['3'] = selected["H1"]
                    elif given_ID[2] == "I":
                        selected['3'] = selected["I1"]
                    elif given_ID[2] == "J":
                        selected['3'] = selected["J1"]

                    if given_ID[3] == "A":
                        selected['4'] = selected["A1"]
                    elif given_ID[3] == "B":
                        selected['4'] = selected["B1"]
                    elif given_ID[3] == "C":
                        selected['4'] = selected["C1"]
                    elif given_ID[3] == "D":
                        selected['4'] = selected["D1"]
                    elif given_ID[3] == "E":
                        selected['4'] = selected["E1"]
                    elif given_ID[3] == "F":
                        selected['4'] = selected["F1"]
                    elif given_ID[3] == "G":
                        selected['4'] = selected["G1"]
                    elif given_ID[3] == "H":
                        selected['4'] = selected["H1"]
                    elif given_ID[3] == "I":
                        selected['4'] = selected["I1"]
                    elif given_ID[3] == "J":
                        selected['4'] = selected["J1"]

                    #############################################################

                    # Applying PCA for Scaled Selected Columns

                    leagues = ["ARG1", "AUT", "BEL1", "BRA1", "BRA2", "BUL", "CHN", 
                            "COL", "DEN", "ENG1", "ENG2", "FRA1", "FRA2", "GER1", 
                            "GER2", "GRE", "HOL", "ITA1", "ITA2", "JAP", "MEX", "PAR", 
                            "POR1", "QAT", "RUS", "SAUD", "SCT", "SER", "SPA1", 
                            "SPA2", "SWZ", "TUR", "UAE", "UKR", "URU", "USA"]

                    # Iterate over each league
                    for league in leagues:

                        # Extract columns 46 through 50
                        GoleiroLíbero = selected.iloc[:, np.r_[-4:0]]

                        # Defining Columns
                        GoleiroLíbero_columns = GoleiroLíbero.columns

                        # Applying PCA
                        pca = PCA(n_components=2)
                        principalComponents = pca.fit_transform(GoleiroLíbero)

                        # Create a DataFrame with loadings
                        LoadingsGoleiroLíbero = pd.DataFrame(pca.components_.T**2, index=GoleiroLíbero_columns, columns=['loading factor 1', 'loading factor 2'])

                        # Multiplying Matrices to obtain Pre_Variables
                        Similarity = pd.DataFrame(np.matmul(GoleiroLíbero, LoadingsGoleiroLíbero['loading factor 1']) + np.matmul(GoleiroLíbero, LoadingsGoleiroLíbero['loading factor 2']),
                                                columns=["Similarity"])

                    # Rebuilding Full Training Set
                    selected = selected.join(Similarity)
                    ##############################################################

                    # Lista de Similares
                    # Initialize an empty list to store DataFrames
                    target = selected.loc[(Role_2_data['Atleta'] == jogador_similar) & (Role_2_data['Liga'] == liga_similar)]
                    target_similarity = target.iat[0, -1]

                    selected["Índice de Similaridade"] = (selected['Similarity']/target_similarity)*100
                    selected["Índice de Similaridade"] = round(selected["Índice de Similaridade"], 2)

                    target = selected.loc[(selected['Atleta'] == jogador_similar) & (selected['Liga'] == liga_similar)]
                    selected['Dif_Similarity'] = abs(selected["Índice de Similaridade"] - 100)

                    selected = selected.sort_values(by='Dif_Similarity')

                    lista_similares = selected.iloc[1:31, np.r_[0, 2, 27, 32, -2:0]]
                    lista_similares = lista_similares.sort_values(by='Rating', ascending=False)
                    lista_similares = lista_similares.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Dif_Similarity':'Diferença de Similaridade'})
                    

                    # Lista de Jogadores Similares Ordenados segundo o Rating
                    st.markdown("<h4 style='text-align: center;'>30 Jogadores + Similares</b></h4>", unsafe_allow_html=True)
                    #st.dataframe(lista_similares, use_container_width=True, hide_index=True)
                    st.markdown("---")    

                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index(drop=True)
                        # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                        formatter = {"Rating": "{:.3f}", "Índice de Similaridade": "{:.2f}", "Diferença de Similaridade": "{:.2f}"}  # Format the 'Rating' column to 3 decimal places
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px',
                                            'font-size': '15px'})

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML without the index and display it
                        styled_html = style_table(lista_similares).to_html(escape=False, index=False, hide_index=True)
                        st.markdown(styled_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    # Lista de Latinos
                    selected_latam = selected.iloc[1:31, :]
                    selected_latam = selected_latam[(selected_latam["Nacionalidade"] == "Argentina")|(selected_latam["Nacionalidade"] == "Brazil")
                                        |(selected_latam["Nacionalidade"] == "Bolivia")|(selected_latam["Nacionalidade"] == "Chile")
                                        |(selected_latam["Nacionalidade"] == "Colombia")|(selected_latam["Nacionalidade"] == "Costa Rica")
                                        |(selected_latam["Nacionalidade"] == "Ecuador")|(selected_latam["Nacionalidade"] == "Mexico")
                                        |(selected_latam["Nacionalidade"] == "Panama")|(selected_latam["Nacionalidade"] == "Paraguay")
                                        |(selected_latam["Nacionalidade"] == "Peru")|(selected_latam["Nacionalidade"] == "Uruguay")
                                        |(selected_latam["Nacionalidade"] == "Venezuela")]
                    lista_similares_latam = selected_latam.iloc[0:30, :]
                    lista_similares_latam = lista_similares_latam.sort_values(by="Rating", ascending = False)
                    
                    #Texto para os Gráficos
                    st.markdown("<h4 style='text-align: center;'><br>5 Jogadores Latinos Similares Melhor Ranquedos</b></h4>", unsafe_allow_html=True)
                    st.markdown("---")    


                    # Gerar Gráficos com os 5 melhores
                    # Arquivo para o Gráfico
                    Role_2_Mean_Charts = lista_similares_latam.iloc[:, np.r_[0, 2, 27, 33:43]]
                    target = target.iloc[:, np.r_[0, 2, 27, 33:43]]
                    # Renomeando Colunas
                    Role_2_Mean_Charts = Role_2_Mean_Charts.rename(columns={'Duelos_Aéreos_Ganhos_Percentil':'Duelos_Aéreos_Ganhos', 
                                                                            'Passes_Curtos_Médios_Certos_Percentil':'Passes_Curtos_Médios_Certos',
                                                                            'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 
                                                                            'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos',
                                                                            'Defesas_Percentil': 'Defesas', 
                                                                            'Gols_Evitados_Percentil':'Gols_Evitados', 
                                                                            'Saídas_Percentil':'Saídas',
                                                                            'Interceptações.1_Percentil': 'Interceptações', 
                                                                            'xG_Evitado_Percentil': 'xG_Evitado', 
                                                                            'Finalizações_por_Gol_Sofrido_Percentil': 'Finalizações_por_Gol_Sofrido'})
                    
                    target = target.rename(columns={'Duelos_Aéreos_Ganhos_Percentil':'Duelos_Aéreos_Ganhos', 
                                                                            'Passes_Curtos_Médios_Certos_Percentil':'Passes_Curtos_Médios_Certos',
                                                                            'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 
                                                                            'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos',
                                                                            'Defesas_Percentil': 'Defesas', 
                                                                            'Gols_Evitados_Percentil':'Gols_Evitados', 
                                                                            'Saídas_Percentil':'Saídas',
                                                                            'Interceptações.1_Percentil': 'Interceptações', 
                                                                            'xG_Evitado_Percentil': 'xG_Evitado', 
                                                                            'Finalizações_por_Gol_Sofrido_Percentil': 'Finalizações_por_Gol_Sofrido'})
                    
                    #Dropping Atleta-alvo
                    Role_2_Mean_Charts = Role_2_Mean_Charts[Role_2_Mean_Charts['Atleta'] != jogador_similar] 
                    #Extraindo 5 melhores
                    Role_2_Mean_Charts = Role_2_Mean_Charts.iloc[0:5, :]

                    #Primeiro Gráfico
                    Role_2_first = Role_2_Mean_Charts.iloc[0:1, :]
                    Role_2_first = pd.concat([Role_2_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_2_first.iat[0, 1]
                    jogadores_clube = Role_2_first.iat[0, 2]
                    jogadores_liga = Role_2_first.iat[0, 3]
                    alvo = Role_2_first.iat[1, 1]
                    alvo_clube = Role_2_first.iat[1, 2]
                    alvo_liga = Role_2_first.iat[1, 3]

                    # Preparing the Graph
                    params = list(Role_2_first.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_2_first[params][x])
                        a = 0
                        b = max(Role_2_first[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_2_first['Atleta'])):
                        if Role_2_first['Atleta'][x] == jogadores:
                            a_values = Role_2_first.iloc[x].values.tolist()
                        if Role_2_first['Atleta'][x] == alvo:
                            b_values = Role_2_first.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    ############################################################################
                    #Segundo Gráfico
                    Role_2_second = Role_2_Mean_Charts.iloc[1:2, :]
                    Role_2_second = pd.concat([Role_2_second, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_2_second.iat[0, 1]
                    jogadores_clube = Role_2_second.iat[0, 2]
                    jogadores_liga = Role_2_second.iat[0, 3]

                    # Preparing the Graph
                    params = list(Role_2_second.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_2_second[params][x])
                        a = 0
                        b = max(Role_2_second[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_2_second['Atleta'])):
                        if Role_2_second['Atleta'][x] == jogadores:
                            a_values = Role_2_second.iloc[x].values.tolist()
                        if Role_2_second['Atleta'][x] == alvo:
                            b_values = Role_2_second.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    ############################################################################
                    #Terceiro Gráfico
                    Role_2_third = Role_2_Mean_Charts.iloc[2:3, :]
                    Role_2_third = pd.concat([Role_2_third, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_2_third.iat[0, 1]
                    jogadores_clube = Role_2_third.iat[0, 2]
                    jogadores_liga = Role_2_third.iat[0, 3]

                    # Preparing the Graph
                    params = list(Role_2_third.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_2_third[params][x])
                        a = 0
                        b = max(Role_2_third[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_2_third['Atleta'])):
                        if Role_2_third['Atleta'][x] == jogadores:
                            a_values = Role_2_third.iloc[x].values.tolist()
                        if Role_2_third['Atleta'][x] == alvo:
                            b_values = Role_2_third.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    ############################################################################
                    #Quarto Gráfico
                    Role_2_fourth = Role_2_Mean_Charts.iloc[3:4, :]
                    Role_2_fourth = pd.concat([Role_2_fourth, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_2_fourth.iat[0, 1]
                    jogadores_clube = Role_2_fourth.iat[0, 2]
                    jogadores_liga = Role_2_fourth.iat[0, 3]
                    #alvo = Role_2_fourth.iat[1, 1]
                    #alvo_clube = Role_2_fourth.iat[1, 2]

                    # Preparing the Graph
                    params = list(Role_2_fourth.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_2_fourth[params][x])
                        a = 0
                        b = max(Role_2_fourth[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_2_fourth['Atleta'])):
                        if Role_2_fourth['Atleta'][x] == jogadores:
                            a_values = Role_2_fourth.iloc[x].values.tolist()
                        if Role_2_fourth['Atleta'][x] == alvo:
                            b_values = Role_2_fourth.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    ############################################################################
                    #Quinto Gráfico
                    Role_2_fifth = Role_2_Mean_Charts.iloc[4:5, :]
                    Role_2_fifth = pd.concat([Role_2_fifth, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_2_fifth.iat[0, 1]
                    jogadores_clube = Role_2_fifth.iat[0, 2]
                    jogadores_liga = Role_2_fifth.iat[0, 3]
                    #alvo = Role_2_fifth.iat[1, 1]
                    #alvo_clube = Role_2_fifth.iat[1, 2]

                    # Preparing the Graph
                    params = list(Role_2_fifth.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_2_fifth[params][x])
                        a = 0
                        b = max(Role_2_fifth[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_2_fifth['Atleta'])):
                        if Role_2_fifth['Atleta'][x] == jogadores:
                            a_values = Role_2_fifth.iloc[x].values.tolist()
                        if Role_2_fifth['Atleta'][x] == alvo:
                            b_values = Role_2_fifth.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ####################################################################################################
                    ####################################################################################################
                    ####################################################################################################
                    ####################################################################################################

                elif perfil_similar == ("Lateral Defensivo"):
                    #####################################################################################################################
                    #####################################################################################################################
                    # LATERAL EQUILIBRADO
                    # Texto de Abertura>
                    markdown_amount_1 = f"<div style='text-align:center; font-size:{fontsize}px'>{jogador_similar:}</div>"
                    st.markdown("<h4 style='text-align: center;'>Jogador Selecionado</b></h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_1, unsafe_allow_html=True)
                    st.markdown("---")

                    #Carregando arquivo de dados
                    Role_3_data = pd.read_csv('3_Role_Lateral_Defensivo_Similarity.csv')
                    Role_3_data = Role_3_data.drop(Role_3_data.columns[0:4], axis=1)
                    Role_3_data.reset_index(drop=True, inplace=True)

                    # Step : Defina o atleta-alvo
                    #base_bruta_similaridade = pd.read_csv("base_bruta_similaridade.csv")
                    target = Role_3_data.loc[(Role_3_data['Atleta'] == jogador_similar)]

                    #Step : Definindo "ID-alvo"
                    given_ID = target.iat[0, -1]

                    # Definição da Base de Trabalho
                    selected = Role_3_data

                    # Step 9: Add columns "1", "2", "3" to Role_3_data

                    selected['1'] = given_ID[0]
                    selected['2'] = given_ID[1]
                    selected['3'] = given_ID[2]


                    # Assigning correct columns to 1, 2, 3

                    if given_ID[0] == "A":
                        selected['1'] = selected["A1"]
                    elif given_ID[0] == "B":
                        selected['1'] = selected["B1"]
                    elif given_ID[0] == "C":
                        selected['1'] = selected["C1"]
                    elif given_ID[0] == "D":
                        selected['1'] = selected["D1"]
                    elif given_ID[0] == "E":
                        selected['1'] = selected["E1"]
                    elif given_ID[0] == "F":
                        selected['1'] = selected["F1"]

                    if given_ID[1] == "A":
                        selected['2'] = selected["A1"]
                    elif given_ID[1] == "B":
                        selected['2'] = selected["B1"]
                    elif given_ID[1] == "C":
                        selected['2'] = selected["C1"]
                    elif given_ID[1] == "D":
                        selected['2'] = selected["D1"]
                    elif given_ID[1] == "E":
                        selected['2'] = selected["E1"]
                    elif given_ID[1] == "F":
                        selected['2'] = selected["F1"]
                    
                    if given_ID[2] == "A":
                        selected['3'] = selected["A1"]
                    elif given_ID[2] == "B":
                        selected['3'] = selected["B1"]
                    elif given_ID[2] == "C":
                        selected['3'] = selected["C1"]
                    elif given_ID[2] == "D":
                        selected['3'] = selected["D1"]
                    elif given_ID[2] == "E":
                        selected['3'] = selected["E1"]
                    elif given_ID[2] == "F":
                        selected['3'] = selected["F1"]

                    #############################################################
                    #############################################################

                    # Applying PCA for Scaled Selected Columns

                    leagues = ["ARG1", "AUT", "BEL1", "BRA1", "BRA2", "BUL", "CHN", 
                            "COL", "DEN", "ENG1", "ENG2", "FRA1", "FRA2", "GER1", 
                            "GER2", "GRE", "HOL", "ITA1", "ITA2", "JAP", "MEX", "PAR", 
                            "POR1", "QAT", "RUS", "SAUD", "SCT", "SER", "SPA1", 
                            "SPA2", "SWZ", "TUR", "UAE", "UKR", "URU", "USA"]

                    # Iterate over each league
                    for league in leagues:

                        # Extract columns 46 through 50
                        LateralDefensivo = selected.iloc[:, np.r_[-3:0]]

                        # Defining Columns
                        LateralDefensivo_columns = LateralDefensivo.columns

                        # Applying PCA
                        pca = PCA(n_components=2)
                        principalComponents = pca.fit_transform(LateralDefensivo)

                        # Create a DataFrame with loadings
                        LoadingsLateralDefensivo = pd.DataFrame(pca.components_.T**2, index=LateralDefensivo_columns, columns=['loading factor 1', 'loading factor 2'])

                        # Multiplying Matrices to obtain Pre_Variables
                        Similarity = pd.DataFrame(np.matmul(LateralDefensivo, LoadingsLateralDefensivo['loading factor 1']) + np.matmul(LateralDefensivo, LoadingsLateralDefensivo['loading factor 2']),
                                                columns=["Similarity"])

                    # Rebuilding Full Training Set
                    selected = selected.join(Similarity)

                    ##############################################################
                    ##############################################################

                    # Lista de Similares
                    # Initialize an empty list to store DataFrames
                    target = selected.loc[(Role_3_data['Atleta'] == jogador_similar) & (Role_3_data['Liga'] == liga_similar)]
                    target_similarity = target.iat[0, -1]

                    selected["Índice de Similaridade"] = (selected['Similarity']/target_similarity)*100
                    selected["Índice de Similaridade"] = round(selected["Índice de Similaridade"], 2)

                    target = selected.loc[(selected['Atleta'] == jogador_similar) & (selected['Liga'] == liga_similar)]
                    selected['Dif_Similarity'] = abs(selected["Índice de Similaridade"] - 100)

                    selected = selected.sort_values(by='Dif_Similarity')

                    lista_similares = selected.iloc[1:31, np.r_[0, 2, 23, 28, -2:0]]
                    lista_similares = lista_similares.sort_values(by='Rating', ascending=False)
                    lista_similares = lista_similares.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Dif_Similarity':'Diferença de Similaridade'})

                    # Lista de Jogadores Similares Ordenados segundo o Rating
                    st.markdown("<h4 style='text-align: center;'>30 Jogadores + Similares</b></h4>", unsafe_allow_html=True)
                    #st.dataframe(lista_similares, use_container_width=True, hide_index=True)
                    st.markdown("---")    

                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index(drop=True)
                        # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                        formatter = {"Rating": "{:.3f}", "Índice de Similaridade": "{:.2f}", "Diferença de Similaridade": "{:.2f}"}  # Format the 'Rating' column to 3 decimal places
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px',
                                            'font-size': '15px'})

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML without the index and display it
                        styled_html = style_table(lista_similares).to_html(escape=False, index=False, hide_index=True)
                        st.markdown(styled_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    # Lista de Latinos
                    selected_latam = selected.iloc[1:31, :]
                    selected_latam = selected_latam[(selected_latam["Nacionalidade"] == "Argentina")|(selected_latam["Nacionalidade"] == "Brazil")
                                        |(selected_latam["Nacionalidade"] == "Bolivia")|(selected_latam["Nacionalidade"] == "Chile")
                                        |(selected_latam["Nacionalidade"] == "Colombia")|(selected_latam["Nacionalidade"] == "Costa Rica")
                                        |(selected_latam["Nacionalidade"] == "Ecuador")|(selected_latam["Nacionalidade"] == "Mexico")
                                        |(selected_latam["Nacionalidade"] == "Panama")|(selected_latam["Nacionalidade"] == "Paraguay")
                                        |(selected_latam["Nacionalidade"] == "Peru")|(selected_latam["Nacionalidade"] == "Uruguay")
                                        |(selected_latam["Nacionalidade"] == "Venezuela")]
                    lista_similares_latam = selected_latam.iloc[0:30, :]
                    lista_similares_latam = lista_similares_latam.sort_values(by="Rating", ascending = False)

                    #Texto para os Gráficos
                    st.markdown("<h4 style='text-align: center;'><br>5 Jogadores Latinos Similares Melhor Ranquedos</b></h4>", unsafe_allow_html=True)
                    st.markdown("---")    

                    ########################################################################################################
                    # Gerar Gráficos com os 5 melhores
                    # Arquivo para o Gráfico
                    Role_3_Mean_Charts = lista_similares_latam.iloc[:, np.r_[0, 2, 23, 29:35]]
                    target = target.iloc[:, np.r_[0, 2, 23, 29:35]]
                    # Renomeando Colunas
                    Role_3_Mean_Charts = Role_3_Mean_Charts.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 
                                                        'Duelos_Defensivos_Ganhos_Percentil':'Duelos_Defensivos_Ganhos', 
                                                        'Duelos_Aéreos_Ganhos_Percentil':'Duelos_Aéreos_Ganhos', 
                                                        'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 
                                                        'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos',
                                                        'Passes_Laterais_Certos_Percentil':'Passes_Laterais_Certos'})
                    
                    target = target.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 
                                                        'Duelos_Defensivos_Ganhos_Percentil':'Duelos_Defensivos_Ganhos', 
                                                        'Duelos_Aéreos_Ganhos_Percentil':'Duelos_Aéreos_Ganhos', 
                                                        'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 
                                                        'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos',
                                                        'Passes_Laterais_Certos_Percentil':'Passes_Laterais_Certos'})
                                            
                    #Dropping Atleta-alvo
                    Role_3_Mean_Charts = Role_3_Mean_Charts[Role_3_Mean_Charts['Atleta'] != jogador_similar] 
                    #Extraindo 5 melhores
                    Role_3_Mean_Charts = Role_3_Mean_Charts.iloc[0:5, :]

                    ############################################################################################
                    #Primeiro Gráfico
                    Role_3_first = Role_3_Mean_Charts.iloc[0:1, :]
                    Role_3_first = pd.concat([Role_3_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_3_first.iat[0, 1]
                    jogadores_clube = Role_3_first.iat[0, 2]
                    jogadores_liga = Role_3_first.iat[0, 3]
                    alvo = Role_3_first.iat[1, 1]
                    alvo_clube = Role_3_first.iat[1, 2]
                    alvo_liga = Role_3_first.iat[1, 3]

                    #Splitting Data
                    Role_3_first_1 = Role_3_first.iloc[:, np.r_[0:3, 3:10]]

                    # Preparing Graph 1
                    params = list(Role_3_first_1.columns)
                    params = params[4:]


                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_3_first_1[params][x])
                        a = 0
                        b = max(Role_3_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_3_first_1['Atleta'])):
                        if Role_3_first_1['Atleta'][x] == jogadores:
                            a_values = Role_3_first_1.iloc[x].values.tolist()
                        if Role_3_first_1['Atleta'][x] == alvo:
                            b_values = Role_3_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    ############################################################################
                    #Segundo Gráfico
                    Role_3_first = Role_3_Mean_Charts.iloc[1:2, :]
                    Role_3_first = pd.concat([Role_3_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_3_first.iat[0, 1]
                    jogadores_clube = Role_3_first.iat[0, 2]
                    jogadores_liga = Role_3_first.iat[0, 3]
                    alvo = Role_3_first.iat[1, 1]
                    alvo_clube = Role_3_first.iat[1, 2]
                    alvo_liga = Role_3_first.iat[1, 3]

                    #Splitting Data
                    Role_3_first_1 = Role_3_first.iloc[:, np.r_[0:3, 3:10]]

                    # Preparing Graph 1
                    params = list(Role_3_first_1.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_3_first_1[params][x])
                        a = 0
                        b = max(Role_3_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_3_first_1['Atleta'])):
                        if Role_3_first_1['Atleta'][x] == jogadores:
                            a_values = Role_3_first_1.iloc[x].values.tolist()
                        if Role_3_first_1['Atleta'][x] == alvo:
                            b_values = Role_3_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    ############################################################################

                    #Terceiro Gráfico
                    Role_3_first = Role_3_Mean_Charts.iloc[2:3, :]
                    Role_3_first = pd.concat([Role_3_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_3_first.iat[0, 1]
                    jogadores_clube = Role_3_first.iat[0, 2]
                    jogadores_liga = Role_3_first.iat[0, 3]
                    #alvo = Role_3_first.iat[1, 1]
                    #alvo_clube = Role_3_first.iat[1, 2]
                    #alvo_liga = Role_3_first.iat[1, 3]

                    #Splitting Data
                    Role_3_first_1 = Role_3_first.iloc[:, np.r_[0:3, 3:10]]

                    # Preparing Graph 1
                    params = list(Role_3_first_1.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_3_first_1[params][x])
                        a = 0
                        b = max(Role_3_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_3_first_1['Atleta'])):
                        if Role_3_first_1['Atleta'][x] == jogadores:
                            a_values = Role_3_first_1.iloc[x].values.tolist()
                        if Role_3_first_1['Atleta'][x] == alvo:
                            b_values = Role_3_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    ############################################################################

                    #Quarto Gráfico
                    Role_3_first = Role_3_Mean_Charts.iloc[3:4, :]
                    Role_3_first = pd.concat([Role_3_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_3_first.iat[0, 1]
                    jogadores_clube = Role_3_first.iat[0, 2]
                    jogadores_liga = Role_3_first.iat[0, 3]
                    #alvo = Role_3_first.iat[1, 1]
                    #alvo_clube = Role_3_first.iat[1, 2]
                    #alvo_liga = Role_3_first.iat[1, 3]

                    #Splitting Data
                    Role_3_first_1 = Role_3_first.iloc[:, np.r_[0:3, 3:10]]

                    # Preparing Graph 1
                    params = list(Role_3_first_1.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_3_first_1[params][x])
                        a = 0
                        b = max(Role_3_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_3_first_1['Atleta'])):
                        if Role_3_first_1['Atleta'][x] == jogadores:
                            a_values = Role_3_first_1.iloc[x].values.tolist()
                        if Role_3_first_1['Atleta'][x] == alvo:
                            b_values = Role_3_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Quinto Gráfico
                    Role_3_first = Role_3_Mean_Charts.iloc[4:5, :]
                    Role_3_first = pd.concat([Role_3_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_3_first.iat[0, 1]
                    jogadores_clube = Role_3_first.iat[0, 2]
                    jogadores_liga = Role_3_first.iat[0, 3]

                    #Splitting Data
                    Role_3_first_1 = Role_3_first.iloc[:, np.r_[0:3, 3:10]]

                    # Preparing Graph 1
                    params = list(Role_3_first_1.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_3_first_1[params][x])
                        a = 0
                        b = max(Role_3_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_3_first_1['Atleta'])):
                        if Role_3_first_1['Atleta'][x] == jogadores:
                            a_values = Role_3_first_1.iloc[x].values.tolist()
                        if Role_3_first_1['Atleta'][x] == alvo:
                            b_values = Role_3_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

########################################################################################################################
########################################################################################################################
########################################################################################################################
########################################################################################################################

                elif perfil_similar == ("Lateral Ofensivo"):
                    #####################################################################################################################
                    #####################################################################################################################
                    # LATERAL EQUILIBRADO
                    # Texto de Abertura>
                    markdown_amount_1 = f"<div style='text-align:center; font-size:{fontsize}px'>{jogador_similar:}</div>"
                    st.markdown("<h4 style='text-align: center;'>Jogador Selecionado</b></h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_1, unsafe_allow_html=True)
                    st.markdown("---")

                    #Carregando arquivo de dados
                    Role_4_data = pd.read_csv('4_Role_Lateral_Ofensivo_Similarity.csv')
                    Role_4_data = Role_4_data.drop(Role_4_data.columns[0:4], axis=1)
                    Role_4_data.reset_index(drop=True, inplace=True)

                    # Step : Defina o atleta-alvo
                    #base_bruta_similaridade = pd.read_csv("base_bruta_similaridade.csv")
                    target = Role_4_data.loc[(Role_4_data['Atleta'] == jogador_similar)]

                    #Step : Definindo "ID-alvo"
                    given_ID = target.iat[0, -1]

                    # Definição da Base de Trabalho
                    selected = Role_4_data

                    # Step 9: Add columns "1", "2", "3" to Role_4_data

                    selected['1'] = given_ID[0]
                    selected['2'] = given_ID[1]
                    selected['3'] = given_ID[2]
                    selected['4'] = given_ID[3]


                    # Assigning correct columns to 1, 2, 3

                    if given_ID[0] == "A":
                        selected['1'] = selected["A1"]
                    elif given_ID[0] == "B":
                        selected['1'] = selected["B1"]
                    elif given_ID[0] == "C":
                        selected['1'] = selected["C1"]
                    elif given_ID[0] == "D":
                        selected['1'] = selected["D1"]
                    elif given_ID[0] == "E":
                        selected['1'] = selected["E1"]
                    elif given_ID[0] == "F":
                        selected['1'] = selected["F1"]
                    elif given_ID[0] == "G":
                        selected['1'] = selected["G1"]
                    elif given_ID[0] == "H":
                        selected['1'] = selected["H1"]
                    elif given_ID[0] == "I":
                        selected['1'] = selected["I1"]
                    elif given_ID[0] == "J":
                        selected['1'] = selected["J1"]
                    elif given_ID[0] == "K":
                        selected['1'] = selected["K1"]
                    elif given_ID[0] == "L":
                        selected['1'] = selected["L1"]
                    elif given_ID[0] == "M":
                        selected['1'] = selected["M1"]
                    elif given_ID[0] == "N":
                        selected['1'] = selected["N1"]
                    elif given_ID[0] == "O":
                        selected['1'] = selected["O1"]
 

                    if given_ID[1] == "A":
                        selected['2'] = selected["A1"]
                    elif given_ID[1] == "B":
                        selected['2'] = selected["B1"]
                    elif given_ID[1] == "C":
                        selected['2'] = selected["C1"]
                    elif given_ID[1] == "D":
                        selected['2'] = selected["D1"]
                    elif given_ID[1] == "E":
                        selected['2'] = selected["E1"]
                    elif given_ID[1] == "F":
                        selected['2'] = selected["F1"]
                    elif given_ID[1] == "G":
                        selected['2'] = selected["G1"]
                    elif given_ID[1] == "H":
                        selected['2'] = selected["H1"]
                    elif given_ID[1] == "I":
                        selected['2'] = selected["I1"]
                    elif given_ID[1] == "J":
                        selected['2'] = selected["J1"]
                    elif given_ID[1] == "K":
                        selected['2'] = selected["K1"]
                    elif given_ID[1] == "L":
                        selected['2'] = selected["L1"]
                    elif given_ID[1] == "M":
                        selected['2'] = selected["M1"]
                    elif given_ID[1] == "N":
                        selected['2'] = selected["N1"]
                    elif given_ID[1] == "O":
                        selected['2'] = selected["O1"]
                    
                    
                    if given_ID[2] == "A":
                        selected['3'] = selected["A1"]
                    elif given_ID[2] == "B":
                        selected['3'] = selected["B1"]
                    elif given_ID[2] == "C":
                        selected['3'] = selected["C1"]
                    elif given_ID[2] == "D":
                        selected['3'] = selected["D1"]
                    elif given_ID[2] == "E":
                        selected['3'] = selected["E1"]
                    elif given_ID[2] == "F":
                        selected['3'] = selected["F1"]
                    elif given_ID[2] == "G":
                        selected['3'] = selected["G1"]
                    elif given_ID[2] == "H":
                        selected['3'] = selected["H1"]
                    elif given_ID[2] == "I":
                        selected['3'] = selected["I1"]
                    elif given_ID[2] == "J":
                        selected['3'] = selected["J1"]
                    elif given_ID[2] == "K":
                        selected['3'] = selected["K1"]
                    elif given_ID[2] == "L":
                        selected['3'] = selected["L1"]
                    elif given_ID[2] == "M":
                        selected['3'] = selected["M1"]
                    elif given_ID[2] == "N":
                        selected['3'] = selected["N1"]
                    elif given_ID[2] == "O":
                        selected['3'] = selected["O1"]

                    if given_ID[3] == "A":
                        selected['4'] = selected["A1"]
                    elif given_ID[3] == "B":
                        selected['4'] = selected["B1"]
                    elif given_ID[3] == "C":
                        selected['4'] = selected["C1"]
                    elif given_ID[3] == "D":
                        selected['4'] = selected["D1"]
                    elif given_ID[3] == "E":
                        selected['4'] = selected["E1"]
                    elif given_ID[3] == "F":
                        selected['4'] = selected["F1"]
                    elif given_ID[3] == "G":
                        selected['4'] = selected["G1"]
                    elif given_ID[3] == "H":
                        selected['4'] = selected["H1"]
                    elif given_ID[3] == "I":
                        selected['4'] = selected["I1"]
                    elif given_ID[3] == "J":
                        selected['4'] = selected["J1"]
                    elif given_ID[3] == "K":
                        selected['4'] = selected["K1"]
                    elif given_ID[3] == "L":
                        selected['4'] = selected["L1"]
                    elif given_ID[3] == "M":
                        selected['4'] = selected["M1"]
                    elif given_ID[3] == "N":
                        selected['4'] = selected["N1"]
                    elif given_ID[3] == "O":
                        selected['4'] = selected["O1"]


                    #############################################################
                    #############################################################

                    # Applying PCA for Scaled Selected Columns

                    leagues = ["ARG1", "AUT", "BEL1", "BRA1", "BRA2", "BUL", "CHN", 
                            "COL", "DEN", "ENG1", "ENG2", "FRA1", "FRA2", "GER1", 
                            "GER2", "GRE", "HOL", "ITA1", "ITA2", "JAP", "MEX", "PAR", 
                            "POR1", "QAT", "RUS", "SAUD", "SCT", "SER", "SPA1", 
                            "SPA2", "SWZ", "TUR", "UAE", "UKR", "URU", "USA"]

                    # Iterate over each league
                    for league in leagues:

                        # Extract columns 46 through 50
                        LateralOfensivo = selected.iloc[:, np.r_[-4:0]]

                        # Defining Columns
                        LateralOfensivo_columns = LateralOfensivo.columns

                        # Applying PCA
                        pca = PCA(n_components=2)
                        principalComponents = pca.fit_transform(LateralOfensivo)

                        # Create a DataFrame with loadings
                        LoadingsLateralOfensivo = pd.DataFrame(pca.components_.T**2, index=LateralOfensivo_columns, columns=['loading factor 1', 'loading factor 2'])

                        # Multiplying Matrices to obtain Pre_Variables
                        Similarity = pd.DataFrame(np.matmul(LateralOfensivo, LoadingsLateralOfensivo['loading factor 1']) + np.matmul(LateralOfensivo, LoadingsLateralOfensivo['loading factor 2']),
                                                columns=["Similarity"])

                    # Rebuilding Full Training Set
                    selected = selected.join(Similarity)

                    ##############################################################
                    ##############################################################

                    # Lista de Similares
                    # Initialize an empty list to store DataFrames
                    target = selected.loc[(Role_4_data['Atleta'] == jogador_similar) & (Role_4_data['Liga'] == liga_similar)]
                    target_similarity = target.iat[0, -1]

                    selected["Índice de Similaridade"] = (selected['Similarity']/target_similarity)*100
                    selected["Índice de Similaridade"] = round(selected["Índice de Similaridade"], 2)

                    target = selected.loc[(selected['Atleta'] == jogador_similar) & (selected['Liga'] == liga_similar)]
                    selected['Dif_Similarity'] = abs(selected["Índice de Similaridade"] - 100)

                    selected = selected.sort_values(by='Dif_Similarity')

                    lista_similares = selected.iloc[1:31, np.r_[0, 2, 32, 37, -2:0]]
                    lista_similares = lista_similares.sort_values(by='Rating', ascending=False)
                    lista_similares = lista_similares.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Dif_Similarity':'Diferença de Similaridade'})

                    # Lista de Jogadores Similares Ordenados segundo o Rating
                    st.markdown("<h4 style='text-align: center;'>30 Jogadores + Similares</b></h4>", unsafe_allow_html=True)
                    #st.dataframe(lista_similares, use_container_width=True, hide_index=True)
                    st.markdown("---")    

                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index(drop=True)
                        # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                        formatter = {"Rating": "{:.3f}", "Índice de Similaridade": "{:.2f}", "Diferença de Similaridade": "{:.2f}"}  # Format the 'Rating' column to 3 decimal places
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px',
                                            'font-size': '15px'})

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML without the index and display it
                        styled_html = style_table(lista_similares).to_html(escape=False, index=False, hide_index=True)
                        st.markdown(styled_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    # Lista de Latinos
                    selected_latam = selected.iloc[1:31, :]
                    selected_latam = selected_latam[(selected_latam["Nacionalidade"] == "Argentina")|(selected_latam["Nacionalidade"] == "Brazil")
                                        |(selected_latam["Nacionalidade"] == "Bolivia")|(selected_latam["Nacionalidade"] == "Chile")
                                        |(selected_latam["Nacionalidade"] == "Colombia")|(selected_latam["Nacionalidade"] == "Costa Rica")
                                        |(selected_latam["Nacionalidade"] == "Ecuador")|(selected_latam["Nacionalidade"] == "Mexico")
                                        |(selected_latam["Nacionalidade"] == "Panama")|(selected_latam["Nacionalidade"] == "Paraguay")
                                        |(selected_latam["Nacionalidade"] == "Peru")|(selected_latam["Nacionalidade"] == "Uruguay")
                                        |(selected_latam["Nacionalidade"] == "Venezuela")]
                    lista_similares_latam = selected_latam.iloc[0:30, :]
                    lista_similares_latam = lista_similares_latam.sort_values(by="Rating", ascending = False)

                    #Texto para os Gráficos
                    st.markdown("<h4 style='text-align: center;'><br>5 Jogadores Latinos Similares Melhor Ranquedos</b></h4>", unsafe_allow_html=True)
                    st.markdown("---")    

                    ########################################################################################################
                    # Gerar Gráficos com os 5 melhores
                    # Arquivo para o Gráfico
                    Role_4_Mean_Charts = lista_similares_latam.iloc[:, np.r_[0, 2, 32, 38:52]]
                    target = target.iloc[:, np.r_[0, 2, 32, 38:52]]
                    # Renomeando Colunas
                    Role_4_Mean_Charts = Role_4_Mean_Charts.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos',
                                                             'Ações_Ofensivas_BemSucedidas_Percentil':'Ações_Ofensivas_BemSucedidas', 'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos', 
                                                              'Pisadas_Área_Percentil':'Pisadas_Área', 'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos', 'Corridas_Progressivas_Percentil':'Corridas_Progressivas', 'Acelerações_Percentil':'Acelerações', 
                                                              'xA_Percentil':'xA', 'Assistência_Finalização_Percentil':'Assistência_Finalização', 'Passes_TerçoFinal_Certos_Percentil':'Passes_TerçoFinal_Certos', 'Deep_Completions_Percentil':'Deep_Completions',
                                                                'Deep_Completed_Crosses_Percentil':'Deep_Completed_Crosses'})
                    
                    target = target.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos',
                                                             'Ações_Ofensivas_BemSucedidas_Percentil':'Ações_Ofensivas_BemSucedidas', 'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos', 
                                                              'Pisadas_Área_Percentil':'Pisadas_Área', 'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos', 'Corridas_Progressivas_Percentil':'Corridas_Progressivas', 'Acelerações_Percentil':'Acelerações', 
                                                              'xA_Percentil':'xA', 'Assistência_Finalização_Percentil':'Assistência_Finalização', 'Passes_TerçoFinal_Certos_Percentil':'Passes_TerçoFinal_Certos', 'Deep_Completions_Percentil':'Deep_Completions',
                                                                'Deep_Completed_Crosses_Percentil':'Deep_Completed_Crosses'})
                                            
                    #Dropping Atleta-alvo
                    Role_4_Mean_Charts = Role_4_Mean_Charts[Role_4_Mean_Charts['Atleta'] != jogador_similar] 
                    #Extraindo 5 melhores
                    Role_4_Mean_Charts = Role_4_Mean_Charts.iloc[0:5, :]

                    ############################################################################################
                    #Primeiro Gráfico
                    Role_4_first = Role_4_Mean_Charts.iloc[0:1, :]
                    Role_4_first = pd.concat([Role_4_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_4_first.iat[0, 1]
                    jogadores_clube = Role_4_first.iat[0, 2]
                    jogadores_liga = Role_4_first.iat[0, 3]
                    alvo = Role_4_first.iat[1, 1]
                    alvo_clube = Role_4_first.iat[1, 2]
                    alvo_liga = Role_4_first.iat[1, 3]

                    #Splitting Data
                    Role_4_first_1 = Role_4_first.iloc[:, np.r_[0:3, 3:11]]
                    Role_4_first_2 = Role_4_first.iloc[:, np.r_[0:3, 11:18]]

                    # Preparing Graph 1
                    params = list(Role_4_first_1.columns)
                    params = params[4:]


                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_4_first_1[params][x])
                        a = 0
                        b = max(Role_4_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_4_first_1['Atleta'])):
                        if Role_4_first_1['Atleta'][x] == jogadores:
                            a_values = Role_4_first_1.iloc[x].values.tolist()
                        if Role_4_first_1['Atleta'][x] == alvo:
                            b_values = Role_4_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_4_first_2.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_4_first_2[params][x])
                        a = 0
                        b = max(Role_4_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_4_first_2['Atleta'])):
                        if Role_4_first_2['Atleta'][x] == jogadores:
                            a_values = Role_4_first_2.iloc[x].values.tolist()
                        if Role_4_first_2['Atleta'][x] == alvo:
                            b_values = Role_4_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)
                    ############################################################################

                    #Segundo Gráfico
                    Role_4_first = Role_4_Mean_Charts.iloc[1:2, :]
                    Role_4_first = pd.concat([Role_4_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_4_first.iat[0, 1]
                    jogadores_clube = Role_4_first.iat[0, 2]
                    jogadores_liga = Role_4_first.iat[0, 3]
                    alvo = Role_4_first.iat[1, 1]
                    alvo_clube = Role_4_first.iat[1, 2]
                    alvo_liga = Role_4_first.iat[1, 3]

                    #Splitting Data
                    Role_4_first_1 = Role_4_first.iloc[:, np.r_[0:3, 3:11]]
                    Role_4_first_2 = Role_4_first.iloc[:, np.r_[0:3, 11:18]]

                    # Preparing Graph 1
                    params = list(Role_4_first_1.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_4_first_1[params][x])
                        a = 0
                        b = max(Role_4_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_4_first_1['Atleta'])):
                        if Role_4_first_1['Atleta'][x] == jogadores:
                            a_values = Role_4_first_1.iloc[x].values.tolist()
                        if Role_4_first_1['Atleta'][x] == alvo:
                            b_values = Role_4_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_4_first_2.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_4_first_2[params][x])
                        a = 0
                        b = max(Role_4_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_4_first_2['Atleta'])):
                        if Role_4_first_2['Atleta'][x] == jogadores:
                            a_values = Role_4_first_2.iloc[x].values.tolist()
                        if Role_4_first_2['Atleta'][x] == alvo:
                            b_values = Role_4_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Terceiro Gráfico
                    Role_4_first = Role_4_Mean_Charts.iloc[2:3, :]
                    Role_4_first = pd.concat([Role_4_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_4_first.iat[0, 1]
                    jogadores_clube = Role_4_first.iat[0, 2]
                    jogadores_liga = Role_4_first.iat[0, 3]
                    #alvo = Role_4_first.iat[1, 1]
                    #alvo_clube = Role_4_first.iat[1, 2]
                    #alvo_liga = Role_4_first.iat[1, 3]

                    #Splitting Data
                    Role_4_first_1 = Role_4_first.iloc[:, np.r_[0:3, 3:11]]
                    Role_4_first_2 = Role_4_first.iloc[:, np.r_[0:3, 11:18]]

                    # Preparing Graph 1
                    params = list(Role_4_first_1.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_4_first_1[params][x])
                        a = 0
                        b = max(Role_4_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_4_first_1['Atleta'])):
                        if Role_4_first_1['Atleta'][x] == jogadores:
                            a_values = Role_4_first_1.iloc[x].values.tolist()
                        if Role_4_first_1['Atleta'][x] == alvo:
                            b_values = Role_4_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_4_first_2.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_4_first_2[params][x])
                        a = 0
                        b = max(Role_4_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_4_first_2['Atleta'])):
                        if Role_4_first_2['Atleta'][x] == jogadores:
                            a_values = Role_4_first_2.iloc[x].values.tolist()
                        if Role_4_first_2['Atleta'][x] == alvo:
                            b_values = Role_4_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Quarto Gráfico
                    Role_4_first = Role_4_Mean_Charts.iloc[3:4, :]
                    Role_4_first = pd.concat([Role_4_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_4_first.iat[0, 1]
                    jogadores_clube = Role_4_first.iat[0, 2]
                    jogadores_liga = Role_4_first.iat[0, 3]
                    #alvo = Role_4_first.iat[1, 1]
                    #alvo_clube = Role_4_first.iat[1, 2]
                    #alvo_liga = Role_4_first.iat[1, 3]

                    #Splitting Data
                    Role_4_first_1 = Role_4_first.iloc[:, np.r_[0:3, 3:11]]
                    Role_4_first_2 = Role_4_first.iloc[:, np.r_[0:3, 11:18]]

                    # Preparing Graph 1
                    params = list(Role_4_first_1.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_4_first_1[params][x])
                        a = 0
                        b = max(Role_4_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_4_first_1['Atleta'])):
                        if Role_4_first_1['Atleta'][x] == jogadores:
                            a_values = Role_4_first_1.iloc[x].values.tolist()
                        if Role_4_first_1['Atleta'][x] == alvo:
                            b_values = Role_4_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_4_first_2.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_4_first_2[params][x])
                        a = 0
                        b = max(Role_4_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_4_first_2['Atleta'])):
                        if Role_4_first_2['Atleta'][x] == jogadores:
                            a_values = Role_4_first_2.iloc[x].values.tolist()
                        if Role_4_first_2['Atleta'][x] == alvo:
                            b_values = Role_4_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Quinto Gráfico
                    Role_4_first = Role_4_Mean_Charts.iloc[4:5, :]
                    Role_4_first = pd.concat([Role_4_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_4_first.iat[0, 1]
                    jogadores_clube = Role_4_first.iat[0, 2]
                    jogadores_liga = Role_4_first.iat[0, 3]
                    #alvo = Role_4_first.iat[1, 1]
                    #alvo_clube = Role_4_first.iat[1, 2]
                    #alvo_liga = Role_4_first.iat[1, 3]

                    #Splitting Data
                    Role_4_first_1 = Role_4_first.iloc[:, np.r_[0:3, 3:11]]
                    Role_4_first_2 = Role_4_first.iloc[:, np.r_[0:3, 11:18]]

                    # Preparing Graph 1
                    params = list(Role_4_first_1.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_4_first_1[params][x])
                        a = 0
                        b = max(Role_4_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_4_first_1['Atleta'])):
                        if Role_4_first_1['Atleta'][x] == jogadores:
                            a_values = Role_4_first_1.iloc[x].values.tolist()
                        if Role_4_first_1['Atleta'][x] == alvo:
                            b_values = Role_4_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_4_first_2.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_4_first_2[params][x])
                        a = 0
                        b = max(Role_4_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_4_first_2['Atleta'])):
                        if Role_4_first_2['Atleta'][x] == jogadores:
                            a_values = Role_4_first_2.iloc[x].values.tolist()
                        if Role_4_first_2['Atleta'][x] == alvo:
                            b_values = Role_4_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

########################################################################################################################
########################################################################################################################
########################################################################################################################
########################################################################################################################

                elif perfil_similar == ("Lateral Equilibrado"):
                    #####################################################################################################################
                    #####################################################################################################################
                    # LATERAL EQUILIBRADO
                    # Texto de Abertura>
                    markdown_amount_1 = f"<div style='text-align:center; font-size:{fontsize}px'>{jogador_similar:}</div>"
                    st.markdown("<h4 style='text-align: center;'>Jogador Selecionado</b></h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_1, unsafe_allow_html=True)
                    st.markdown("---")

                    #Carregando arquivo de dados
                    Role_5_data = pd.read_csv('5_Role_Lateral_Equilibrado_Similarity.csv')
                    Role_5_data = Role_5_data.drop(Role_5_data.columns[0:4], axis=1)
                    Role_5_data.reset_index(drop=True, inplace=True)

                    # Step : Defina o atleta-alvo
                    #base_bruta_similaridade = pd.read_csv("base_bruta_similaridade.csv")
                    target = Role_5_data.loc[(Role_5_data['Atleta'] == jogador_similar)]

                    #Step : Definindo "ID-alvo"
                    given_ID = target.iat[0, -1]

                    # Definição da Base de Trabalho
                    selected = Role_5_data

                    # Step 9: Add columns "1", "2", "3" to Role_5_data

                    selected['1'] = given_ID[0]
                    selected['2'] = given_ID[1]
                    selected['3'] = given_ID[2]
                    selected['4'] = given_ID[3]
                    selected['5'] = given_ID[4]


                    # Assigning correct columns to 1, 2, 3

                    if given_ID[0] == "A":
                        selected['1'] = selected["A1"]
                    elif given_ID[0] == "B":
                        selected['1'] = selected["B1"]
                    elif given_ID[0] == "C":
                        selected['1'] = selected["C1"]
                    elif given_ID[0] == "D":
                        selected['1'] = selected["D1"]
                    elif given_ID[0] == "E":
                        selected['1'] = selected["E1"]
                    elif given_ID[0] == "F":
                        selected['1'] = selected["F1"]
                    elif given_ID[0] == "G":
                        selected['1'] = selected["G1"]
                    elif given_ID[0] == "H":
                        selected['1'] = selected["H1"]
                    elif given_ID[0] == "I":
                        selected['1'] = selected["I1"]
                    elif given_ID[0] == "J":
                        selected['1'] = selected["J1"]
                    elif given_ID[0] == "K":
                        selected['1'] = selected["K1"]
                    elif given_ID[0] == "L":
                        selected['1'] = selected["L1"]
                    elif given_ID[0] == "M":
                        selected['1'] = selected["M1"]
                    elif given_ID[0] == "N":
                        selected['1'] = selected["N1"]
                    elif given_ID[0] == "O":
                        selected['1'] = selected["O1"]
                    elif given_ID[0] == "P":
                        selected['1'] = selected["P1"]
                    elif given_ID[0] == "Q":
                        selected['1'] = selected["Q1"]
                    elif given_ID[0] == "R":
                        selected['1'] = selected["R1"]


                    if given_ID[1] == "A":
                        selected['2'] = selected["A1"]
                    elif given_ID[1] == "B":
                        selected['2'] = selected["B1"]
                    elif given_ID[1] == "C":
                        selected['2'] = selected["C1"]
                    elif given_ID[1] == "D":
                        selected['2'] = selected["D1"]
                    elif given_ID[1] == "E":
                        selected['2'] = selected["E1"]
                    elif given_ID[1] == "F":
                        selected['2'] = selected["F1"]
                    elif given_ID[1] == "G":
                        selected['2'] = selected["G1"]
                    elif given_ID[1] == "H":
                        selected['2'] = selected["H1"]
                    elif given_ID[1] == "I":
                        selected['2'] = selected["I1"]
                    elif given_ID[1] == "J":
                        selected['2'] = selected["J1"]
                    elif given_ID[1] == "K":
                        selected['2'] = selected["K1"]
                    elif given_ID[1] == "L":
                        selected['2'] = selected["L1"]
                    elif given_ID[1] == "M":
                        selected['2'] = selected["M1"]
                    elif given_ID[1] == "N":
                        selected['2'] = selected["N1"]
                    elif given_ID[1] == "O":
                        selected['2'] = selected["O1"]
                    elif given_ID[1] == "P":
                        selected['2'] = selected["P1"]
                    elif given_ID[1] == "Q":
                        selected['2'] = selected["Q1"]
                    elif given_ID[1] == "R":
                        selected['2'] = selected["R1"]
                    
                    
                    if given_ID[2] == "A":
                        selected['3'] = selected["A1"]
                    elif given_ID[2] == "B":
                        selected['3'] = selected["B1"]
                    elif given_ID[2] == "C":
                        selected['3'] = selected["C1"]
                    elif given_ID[2] == "D":
                        selected['3'] = selected["D1"]
                    elif given_ID[2] == "E":
                        selected['3'] = selected["E1"]
                    elif given_ID[2] == "F":
                        selected['3'] = selected["F1"]
                    elif given_ID[2] == "G":
                        selected['3'] = selected["G1"]
                    elif given_ID[2] == "H":
                        selected['3'] = selected["H1"]
                    elif given_ID[2] == "I":
                        selected['3'] = selected["I1"]
                    elif given_ID[2] == "J":
                        selected['3'] = selected["J1"]
                    elif given_ID[2] == "K":
                        selected['3'] = selected["K1"]
                    elif given_ID[2] == "L":
                        selected['3'] = selected["L1"]
                    elif given_ID[2] == "M":
                        selected['3'] = selected["M1"]
                    elif given_ID[2] == "N":
                        selected['3'] = selected["N1"]
                    elif given_ID[2] == "O":
                        selected['3'] = selected["O1"]
                    elif given_ID[2] == "P":
                        selected['3'] = selected["P1"]
                    elif given_ID[2] == "Q":
                        selected['3'] = selected["Q1"]
                    elif given_ID[2] == "R":
                        selected['3'] = selected["R1"]

                    if given_ID[3] == "A":
                        selected['4'] = selected["A1"]
                    elif given_ID[3] == "B":
                        selected['4'] = selected["B1"]
                    elif given_ID[3] == "C":
                        selected['4'] = selected["C1"]
                    elif given_ID[3] == "D":
                        selected['4'] = selected["D1"]
                    elif given_ID[3] == "E":
                        selected['4'] = selected["E1"]
                    elif given_ID[3] == "F":
                        selected['4'] = selected["F1"]
                    elif given_ID[3] == "G":
                        selected['4'] = selected["G1"]
                    elif given_ID[3] == "H":
                        selected['4'] = selected["H1"]
                    elif given_ID[3] == "I":
                        selected['4'] = selected["I1"]
                    elif given_ID[3] == "J":
                        selected['4'] = selected["J1"]
                    elif given_ID[3] == "K":
                        selected['4'] = selected["K1"]
                    elif given_ID[3] == "L":
                        selected['4'] = selected["L1"]
                    elif given_ID[3] == "M":
                        selected['4'] = selected["M1"]
                    elif given_ID[3] == "N":
                        selected['4'] = selected["N1"]
                    elif given_ID[3] == "O":
                        selected['4'] = selected["O1"]
                    elif given_ID[3] == "P":
                        selected['4'] = selected["P1"]
                    elif given_ID[3] == "Q":
                        selected['4'] = selected["Q1"]
                    elif given_ID[3] == "R":
                        selected['4'] = selected["R1"]


                    if given_ID[4] == "A":
                        selected['5'] = selected["A1"]
                    elif given_ID[4] == "B":
                        selected['5'] = selected["B1"]
                    elif given_ID[4] == "C":
                        selected['5'] = selected["C1"]
                    elif given_ID[4] == "D":
                        selected['5'] = selected["D1"]
                    elif given_ID[4] == "E":
                        selected['5'] = selected["E1"]
                    elif given_ID[4] == "F":
                        selected['5'] = selected["F1"]
                    elif given_ID[4] == "G":
                        selected['5'] = selected["G1"]
                    elif given_ID[4] == "H":
                        selected['5'] = selected["H1"]
                    elif given_ID[4] == "I":
                        selected['5'] = selected["I1"]
                    elif given_ID[4] == "J":
                        selected['5'] = selected["J1"]
                    elif given_ID[4] == "K":
                        selected['5'] = selected["K1"]
                    elif given_ID[4] == "L":
                        selected['5'] = selected["L1"]
                    elif given_ID[4] == "M":
                        selected['5'] = selected["M1"]
                    elif given_ID[4] == "N":
                        selected['5'] = selected["N1"]
                    elif given_ID[4] == "O":
                        selected['5'] = selected["O1"]
                    elif given_ID[4] == "P":
                        selected['5'] = selected["P1"]
                    elif given_ID[4] == "Q":
                        selected['5'] = selected["Q1"]
                    elif given_ID[4] == "R":
                        selected['5'] = selected["R1"]

                    #############################################################
                    #############################################################

                    # Applying PCA for Scaled Selected Columns

                    leagues = ["ARG1", "AUT", "BEL1", "BRA1", "BRA2", "BUL", "CHN", 
                            "COL", "DEN", "ENG1", "ENG2", "FRA1", "FRA2", "GER1", 
                            "GER2", "GRE", "HOL", "ITA1", "ITA2", "JAP", "MEX", "PAR", 
                            "POR1", "QAT", "RUS", "SAUD", "SCT", "SER", "SPA1", 
                            "SPA2", "SWZ", "TUR", "UAE", "UKR", "URU", "USA"]

                    # Iterate over each league
                    for league in leagues:

                        # Extract columns 46 through 50
                        Lateral = selected.iloc[:, np.r_[-5:0]]

                        # Defining Columns
                        Lateral_columns = Lateral.columns

                        # Applying PCA
                        pca = PCA(n_components=2)
                        principalComponents = pca.fit_transform(Lateral)

                        # Create a DataFrame with loadings
                        LoadingsLateral = pd.DataFrame(pca.components_.T**2, index=Lateral_columns, columns=['loading factor 1', 'loading factor 2'])

                        # Multiplying Matrices to obtain Pre_Variables
                        Similarity = pd.DataFrame(np.matmul(Lateral, LoadingsLateral['loading factor 1']) + np.matmul(Lateral, LoadingsLateral['loading factor 2']),
                                                columns=["Similarity"])

                    # Rebuilding Full Training Set
                    #Lateral = Lateral.join(Similarity)
                    selected = selected.join(Similarity)

                    ##############################################################
                    ##############################################################

                    # Lista de Similares
                    # Initialize an empty list to store DataFrames
                    target = selected.loc[(Role_5_data['Atleta'] == jogador_similar) & (Role_5_data['Liga'] == liga_similar)]
                    target_similarity = target.iat[0, -1]

                    selected["Índice de Similaridade"] = (selected['Similarity']/target_similarity)*100
                    selected["Índice de Similaridade"] = round(selected["Índice de Similaridade"], 2)

                    target = selected.loc[(selected['Atleta'] == jogador_similar) & (selected['Liga'] == liga_similar)]
                    selected['Dif_Similarity'] = abs(selected["Índice de Similaridade"] - 100)

                    selected = selected.sort_values(by='Dif_Similarity')

                    lista_similares = selected.iloc[1:31, np.r_[0, 2, 35, 40, -2:0]]
                    lista_similares = lista_similares.sort_values(by='Rating', ascending=False)
                    lista_similares = lista_similares.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Dif_Similarity':'Diferença de Similaridade'})

                    # Lista de Jogadores Similares Ordenados segundo o Rating
                    st.markdown("<h4 style='text-align: center;'>30 Jogadores + Similares</b></h4>", unsafe_allow_html=True)
                    #st.dataframe(lista_similares, use_container_width=True, hide_index=True)
                    st.markdown("---")    

                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index(drop=True)
                        # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                        formatter = {"Rating": "{:.3f}", "Índice de Similaridade": "{:.2f}", "Diferença de Similaridade": "{:.2f}"}  # Format the 'Rating' column to 3 decimal places
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px',
                                            'font-size': '15px'})

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML without the index and display it
                        styled_html = style_table(lista_similares).to_html(escape=False, index=False, hide_index=True)
                        st.markdown(styled_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    # Lista de Latinos
                    selected_latam = selected.iloc[1:31, :]
                    selected_latam = selected_latam[(selected_latam["Nacionalidade"] == "Argentina")|(selected_latam["Nacionalidade"] == "Brazil")
                                        |(selected_latam["Nacionalidade"] == "Bolivia")|(selected_latam["Nacionalidade"] == "Chile")
                                        |(selected_latam["Nacionalidade"] == "Colombia")|(selected_latam["Nacionalidade"] == "Costa Rica")
                                        |(selected_latam["Nacionalidade"] == "Ecuador")|(selected_latam["Nacionalidade"] == "Mexico")
                                        |(selected_latam["Nacionalidade"] == "Panama")|(selected_latam["Nacionalidade"] == "Paraguay")
                                        |(selected_latam["Nacionalidade"] == "Peru")|(selected_latam["Nacionalidade"] == "Uruguay")
                                        |(selected_latam["Nacionalidade"] == "Venezuela")]
                    lista_similares_latam = selected_latam.iloc[0:30, :]
                    lista_similares_latam = lista_similares_latam.sort_values(by="Rating", ascending = False)

                    #Texto para os Gráficos
                    st.markdown("<h4 style='text-align: center;'><br>5 Jogadores Latinos Similares Melhor Ranquedos</b></h4>", unsafe_allow_html=True)
                    st.markdown("---")    

                    ########################################################################################################
                    # Gerar Gráficos com os 5 melhores
                    # Arquivo para o Gráfico
                    Role_5_Mean_Charts = lista_similares_latam.iloc[:, np.r_[0, 2, 35, 41:59]]
                    target = target.iloc[:, np.r_[0, 2, 35, 41:59]]
                    # Renomeando Colunas
                    Role_5_Mean_Charts = Role_5_Mean_Charts.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 'Duelos_Defensivos_Ganhos_Percentil':'Duelos_Defensivos_Ganhos', 'Duelos_Aéreos_Ganhos_Percentil':'Duelos_Aéreos_Ganhos', 'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos',
                                                                                'Passes_Laterais_Certos_Percentil':'Passes_Laterais_Certos', 'Ações_Ofensivas_BemSucedidas_Percentil':'Ações_Ofensivas_BemSucedidas', 'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos', 
                                                                                'Pisadas_Área_Percentil':'Pisadas_Área', 'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos', 'Corridas_Progressivas_Percentil':'Corridas_Progressivas', 'Acelerações_Percentil':'Acelerações', 
                                                                                'xA_Percentil':'xA', 'Assistência_Finalização_Percentil':'Assistência_Finalização', 'Passes_TerçoFinal_Certos_Percentil':'Passes_TerçoFinal_Certos', 'Deep_Completions_Percentil':'Deep_Completions',
                                                                                    'Deep_Completed_Crosses_Percentil':'Deep_Completed_Crosses', 'Passes_ÁreaPênalti_Certos_Percentil':'Passes_ÁreaPênalti_Certos'})
                    
                    target = target.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 'Duelos_Defensivos_Ganhos_Percentil':'Duelos_Defensivos_Ganhos', 'Duelos_Aéreos_Ganhos_Percentil':'Duelos_Aéreos_Ganhos', 'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos',
                                                                                'Passes_Laterais_Certos_Percentil':'Passes_Laterais_Certos', 'Ações_Ofensivas_BemSucedidas_Percentil':'Ações_Ofensivas_BemSucedidas', 'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos', 
                                                                                'Pisadas_Área_Percentil':'Pisadas_Área', 'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos', 'Corridas_Progressivas_Percentil':'Corridas_Progressivas', 'Acelerações_Percentil':'Acelerações', 
                                                                                'xA_Percentil':'xA', 'Assistência_Finalização_Percentil':'Assistência_Finalização', 'Passes_TerçoFinal_Certos_Percentil':'Passes_TerçoFinal_Certos', 'Deep_Completions_Percentil':'Deep_Completions',
                                                                                    'Deep_Completed_Crosses_Percentil':'Deep_Completed_Crosses', 'Passes_ÁreaPênalti_Certos_Percentil':'Passes_ÁreaPênalti_Certos'})
                                            
                    #Dropping Atleta-alvo
                    Role_5_Mean_Charts = Role_5_Mean_Charts[Role_5_Mean_Charts['Atleta'] != jogador_similar] 
                    #Extraindo 5 melhores
                    Role_5_Mean_Charts = Role_5_Mean_Charts.iloc[0:5, :]

                    ############################################################################################
                    #Primeiro Gráfico
                    Role_5_first = Role_5_Mean_Charts.iloc[0:1, :]
                    Role_5_first = pd.concat([Role_5_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_5_first.iat[0, 1]
                    jogadores_clube = Role_5_first.iat[0, 2]
                    jogadores_liga = Role_5_first.iat[0, 3]
                    alvo = Role_5_first.iat[1, 1]
                    alvo_clube = Role_5_first.iat[1, 2]
                    alvo_liga = Role_5_first.iat[1, 3]

                    #Splitting Data
                    Role_5_first_1 = Role_5_first.iloc[:, np.r_[0:3, 3:12]]
                    Role_5_first_2 = Role_5_first.iloc[:, np.r_[0:3, 12:22]]

                    # Preparing Graph 1
                    params = list(Role_5_first_1.columns)
                    params = params[4:]


                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_5_first_1[params][x])
                        a = 0
                        b = max(Role_5_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_5_first_1['Atleta'])):
                        if Role_5_first_1['Atleta'][x] == jogadores:
                            a_values = Role_5_first_1.iloc[x].values.tolist()
                        if Role_5_first_1['Atleta'][x] == alvo:
                            b_values = Role_5_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_5_first_2.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_5_first_2[params][x])
                        a = 0
                        b = max(Role_5_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_5_first_2['Atleta'])):
                        if Role_5_first_2['Atleta'][x] == jogadores:
                            a_values = Role_5_first_2.iloc[x].values.tolist()
                        if Role_5_first_2['Atleta'][x] == alvo:
                            b_values = Role_5_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)
                    ############################################################################

                    #Segundo Gráfico
                    Role_5_first = Role_5_Mean_Charts.iloc[1:2, :]
                    Role_5_first = pd.concat([Role_5_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_5_first.iat[0, 1]
                    jogadores_clube = Role_5_first.iat[0, 2]
                    jogadores_liga = Role_5_first.iat[0, 3]
                    alvo = Role_5_first.iat[1, 1]
                    alvo_clube = Role_5_first.iat[1, 2]
                    alvo_liga = Role_5_first.iat[1, 3]

                    #Splitting Data
                    Role_5_first_1 = Role_5_first.iloc[:, np.r_[0:3, 3:12]]
                    Role_5_first_2 = Role_5_first.iloc[:, np.r_[0:3, 12:22]]

                    # Preparing Graph 1
                    params = list(Role_5_first_1.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_5_first_1[params][x])
                        a = 0
                        b = max(Role_5_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_5_first_1['Atleta'])):
                        if Role_5_first_1['Atleta'][x] == jogadores:
                            a_values = Role_5_first_1.iloc[x].values.tolist()
                        if Role_5_first_1['Atleta'][x] == alvo:
                            b_values = Role_5_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_5_first_2.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_5_first_2[params][x])
                        a = 0
                        b = max(Role_5_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_5_first_2['Atleta'])):
                        if Role_5_first_2['Atleta'][x] == jogadores:
                            a_values = Role_5_first_2.iloc[x].values.tolist()
                        if Role_5_first_2['Atleta'][x] == alvo:
                            b_values = Role_5_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Terceiro Gráfico
                    Role_5_first = Role_5_Mean_Charts.iloc[2:3, :]
                    Role_5_first = pd.concat([Role_5_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_5_first.iat[0, 1]
                    jogadores_clube = Role_5_first.iat[0, 2]
                    jogadores_liga = Role_5_first.iat[0, 3]
                    #alvo = Role_5_first.iat[1, 1]
                    #alvo_clube = Role_5_first.iat[1, 2]
                    #alvo_liga = Role_5_first.iat[1, 3]

                    #Splitting Data
                    Role_5_first_1 = Role_5_first.iloc[:, np.r_[0:3, 3:12]]
                    Role_5_first_2 = Role_5_first.iloc[:, np.r_[0:3, 12:22]]

                    # Preparing Graph 1
                    params = list(Role_5_first_1.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_5_first_1[params][x])
                        a = 0
                        b = max(Role_5_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_5_first_1['Atleta'])):
                        if Role_5_first_1['Atleta'][x] == jogadores:
                            a_values = Role_5_first_1.iloc[x].values.tolist()
                        if Role_5_first_1['Atleta'][x] == alvo:
                            b_values = Role_5_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_5_first_2.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_5_first_2[params][x])
                        a = 0
                        b = max(Role_5_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_5_first_2['Atleta'])):
                        if Role_5_first_2['Atleta'][x] == jogadores:
                            a_values = Role_5_first_2.iloc[x].values.tolist()
                        if Role_5_first_2['Atleta'][x] == alvo:
                            b_values = Role_5_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Quarto Gráfico
                    Role_5_first = Role_5_Mean_Charts.iloc[3:4, :]
                    Role_5_first = pd.concat([Role_5_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_5_first.iat[0, 1]
                    jogadores_clube = Role_5_first.iat[0, 2]
                    jogadores_liga = Role_5_first.iat[0, 3]
                    #alvo = Role_5_first.iat[1, 1]
                    #alvo_clube = Role_5_first.iat[1, 2]
                    #alvo_liga = Role_5_first.iat[1, 3]

                    #Splitting Data
                    Role_5_first_1 = Role_5_first.iloc[:, np.r_[0:3, 3:12]]
                    Role_5_first_2 = Role_5_first.iloc[:, np.r_[0:3, 12:22]]

                    # Preparing Graph 1
                    params = list(Role_5_first_1.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_5_first_1[params][x])
                        a = 0
                        b = max(Role_5_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_5_first_1['Atleta'])):
                        if Role_5_first_1['Atleta'][x] == jogadores:
                            a_values = Role_5_first_1.iloc[x].values.tolist()
                        if Role_5_first_1['Atleta'][x] == alvo:
                            b_values = Role_5_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_5_first_2.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_5_first_2[params][x])
                        a = 0
                        b = max(Role_5_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_5_first_2['Atleta'])):
                        if Role_5_first_2['Atleta'][x] == jogadores:
                            a_values = Role_5_first_2.iloc[x].values.tolist()
                        if Role_5_first_2['Atleta'][x] == alvo:
                            b_values = Role_5_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Quinto Gráfico
                    Role_5_first = Role_5_Mean_Charts.iloc[4:5, :]
                    Role_5_first = pd.concat([Role_5_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_5_first.iat[0, 1]
                    jogadores_clube = Role_5_first.iat[0, 2]
                    jogadores_liga = Role_5_first.iat[0, 3]
                    #alvo = Role_5_first.iat[1, 1]
                    #alvo_clube = Role_5_first.iat[1, 2]
                    #alvo_liga = Role_5_first.iat[1, 3]

                    #Splitting Data
                    Role_5_first_1 = Role_5_first.iloc[:, np.r_[0:3, 3:12]]
                    Role_5_first_2 = Role_5_first.iloc[:, np.r_[0:3, 12:22]]

                    # Preparing Graph 1
                    params = list(Role_5_first_1.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_5_first_1[params][x])
                        a = 0
                        b = max(Role_5_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_5_first_1['Atleta'])):
                        if Role_5_first_1['Atleta'][x] == jogadores:
                            a_values = Role_5_first_1.iloc[x].values.tolist()
                        if Role_5_first_1['Atleta'][x] == alvo:
                            b_values = Role_5_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_5_first_2.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_5_first_2[params][x])
                        a = 0
                        b = max(Role_5_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_5_first_2['Atleta'])):
                        if Role_5_first_2['Atleta'][x] == jogadores:
                            a_values = Role_5_first_2.iloc[x].values.tolist()
                        if Role_5_first_2['Atleta'][x] == alvo:
                            b_values = Role_5_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

########################################################################################################################
########################################################################################################################
########################################################################################################################
########################################################################################################################

                if perfil_similar == ("Zagueiro Defensivo"):
                ###############################################################################
                ###########################################################################
                    # ZAGUEIRO EQUILIBRADO
                    # Texto de Abertura>
                    markdown_amount_1 = f"<div style='text-align:center; font-size:{fontsize}px'>{jogador_similar:}</div>"
                    st.markdown("<h4 style='text-align: center;'>Jogador Selecionado</b></h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_1, unsafe_allow_html=True)
                    st.markdown("---")

                    #Carregando arquivo de dados
                    Role_6_data = pd.read_csv('6_Role_Zagueiro_Defensivo_Similarity.csv')
                    Role_6_data = Role_6_data.drop(Role_6_data.columns[0:4], axis=1)
                    Role_6_data.reset_index(drop=True, inplace=True)

                    # Step : Defina o atleta-alvo
                    #base_bruta_similaridade = pd.read_csv("base_bruta_similaridade.csv")
                    target = Role_6_data.loc[(Role_6_data['Atleta'] == jogador_similar)]

                    #Step : Definindo "ID-alvo"
                    given_ID = target.iat[0, -1]
                    
                    selected = Role_6_data

                    # Step 9: Add columns "1", "2", "3" to Role_6_data

                    selected['1'] = given_ID[0]
                    selected['2'] = given_ID[1]
                    selected['3'] = given_ID[2]

                    # Assigning correct columns to 1, 2, 3

                    if given_ID[0] == "A":
                        selected['1'] = selected["A1"]
                    elif given_ID[0] == "B":
                        selected['1'] = selected["B1"]
                    elif given_ID[0] == "C":
                        selected['1'] = selected["C1"]
                    elif given_ID[0] == "D":
                        selected['1'] = selected["D1"]
                    elif given_ID[0] == "E":
                        selected['1'] = selected["E1"]
                    elif given_ID[0] == "F":
                        selected['1'] = selected["F1"]

                    if given_ID[1] == "A":
                        selected['2'] = selected["A1"]
                    elif given_ID[1] == "B":
                        selected['2'] = selected["B1"]
                    elif given_ID[1] == "C":
                        selected['2'] = selected["C1"]
                    elif given_ID[1] == "D":
                        selected['2'] = selected["D1"]
                    elif given_ID[1] == "E":
                        selected['2'] = selected["E1"]
                    elif given_ID[1] == "F":
                        selected['2'] = selected["F1"]
                    
                    if given_ID[2] == "A":
                        selected['3'] = selected["A1"]
                    elif given_ID[2] == "B":
                        selected['3'] = selected["B1"]
                    elif given_ID[2] == "C":
                        selected['3'] = selected["C1"]
                    elif given_ID[2] == "D":
                        selected['3'] = selected["D1"]
                    elif given_ID[2] == "E":
                        selected['3'] = selected["E1"]
                    elif given_ID[2] == "F":
                        selected['3'] = selected["F1"]

                    # Applying PCA for Scaled Selected Columns

                    leagues = ["ARG1", "AUT", "BEL1", "BRA1", "BRA2", "BUL", "CHN", 
                            "COL", "DEN", "ENG1", "ENG2", "FRA1", "FRA2", "GER1", 
                            "GER2", "GRE", "HOL", "ITA1", "ITA2", "JAP", "MEX", "PAR", 
                            "POR1", "QAT", "RUS", "SAUD", "SCT", "SER", "SPA1", 
                            "SPA2", "SWZ", "TUR", "UAE", "UKR", "URU", "USA"]

                    # Iterate over each league
                    for league in leagues:

                        # Extract columns 46 through 50
                        ZagueiroDefensivo = selected.iloc[:, np.r_[-3:0]]

                        # Defining Columns
                        ZagueiroDefensivo_columns = ZagueiroDefensivo.columns

                        # Applying PCA
                        pca = PCA(n_components=2)
                        principalComponents = pca.fit_transform(ZagueiroDefensivo)

                        # Create a DataFrame with loadings
                        LoadingsZagueiroDefensivo = pd.DataFrame(pca.components_.T**2, index=ZagueiroDefensivo_columns, columns=['loading factor 1', 'loading factor 2'])

                        # Multiplying Matrices to obtain Pre_Variables
                        Similarity = pd.DataFrame(np.matmul(ZagueiroDefensivo, LoadingsZagueiroDefensivo['loading factor 1']) + np.matmul(ZagueiroDefensivo, LoadingsZagueiroDefensivo['loading factor 2']),
                                                columns=["Similarity"])

                    # Rebuilding Full Training Set
                    selected = selected.join(Similarity)

                    ##############################################################
                    ##############################################################

                    # Lista de Similares
                    # Initialize an empty list to store DataFrames
                    target = selected.loc[(Role_6_data['Atleta'] == jogador_similar) & (Role_6_data['Liga'] == liga_similar)]
                    target_similarity = target.iat[0, -1]

                    selected["Índice de Similaridade"] = (selected['Similarity']/target_similarity)*100
                    selected["Índice de Similaridade"] = round(selected["Índice de Similaridade"], 2)

                    target = selected.loc[(selected['Atleta'] == jogador_similar) & (selected['Liga'] == liga_similar)]
                    selected['Dif_Similarity'] = abs(selected["Índice de Similaridade"] - 100)

                    selected = selected.sort_values(by='Dif_Similarity')

                    lista_similares = selected.iloc[1:31, np.r_[0, 2, 23, 28, -2:0]]
                    lista_similares = lista_similares.sort_values(by='Rating', ascending=False)
                    lista_similares = lista_similares.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Dif_Similarity':'Diferença de Similaridade'})

                    # Lista de Jogadores Similares Ordenados segundo o Rating
                    st.markdown("<h4 style='text-align: center;'>30 Jogadores + Similares</b></h4>", unsafe_allow_html=True)
                    #st.dataframe(lista_similares, use_container_width=True, hide_index=True)
                    st.markdown("---")

                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index(drop=True)
                        # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                        formatter = {"Rating": "{:.3f}", "Índice de Similaridade": "{:.2f}", "Diferença de Similaridade": "{:.2f}"}  # Format the 'Rating' column to 3 decimal places
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px',
                                            'font-size': '15px'})

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML without the index and display it
                        styled_html = style_table(lista_similares).to_html(escape=False, index=False, hide_index=True)
                        st.markdown(styled_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    # Lista de Latinos
                    selected_latam = selected.iloc[1:31, :]
                    selected_latam = selected_latam[(selected_latam["Nacionalidade"] == "Argentina")|(selected_latam["Nacionalidade"] == "Brazil")
                                        |(selected_latam["Nacionalidade"] == "Bolivia")|(selected_latam["Nacionalidade"] == "Chile")
                                        |(selected_latam["Nacionalidade"] == "Colombia")|(selected_latam["Nacionalidade"] == "Costa Rica")
                                        |(selected_latam["Nacionalidade"] == "Ecuador")|(selected_latam["Nacionalidade"] == "Mexico")
                                        |(selected_latam["Nacionalidade"] == "Panama")|(selected_latam["Nacionalidade"] == "Paraguay")
                                        |(selected_latam["Nacionalidade"] == "Peru")|(selected_latam["Nacionalidade"] == "Uruguay")
                                        |(selected_latam["Nacionalidade"] == "Venezuela")]
                    lista_similares_latam = selected_latam.iloc[0:30, :]
                    lista_similares_latam = lista_similares_latam.sort_values(by="Rating", ascending = False)

                    #Texto para os Gráficos
                    st.markdown("<h4 style='text-align: center;'><br>5 Jogadores Latinos Similares Melhor Ranquedos</b></h4>", unsafe_allow_html=True)
                    st.markdown("---")    


                    # Gerar Gráficos com os 5 melhores
                    # Arquivo para o Gráfico
                    Role_6_Mean_Charts = lista_similares_latam.iloc[:, np.r_[0, 2, 23, 29:35]]
                    target = target.iloc[:, np.r_[0, 2, 23, 29:35]]
                    # Renomeando Colunas
                    Role_6_Mean_Charts = Role_6_Mean_Charts.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 'Duelos_Defensivos_Ganhos_Percentil':'Duelos_Defensivos_Ganhos', 'Duelos_Aéreos_Ganhos_Percentil':'Duelos_Aéreos_Ganhos',
                                                            'Finalizações_Bloqueadas_Percentil':'Finalizações_Bloqueadas', 'Interceptações_Ajustadas_a_Posse_Percentil':'Interceptações_Ajustadas_a_Posse', 'Passes_Laterais_Certos_Percentil':'Passes_Laterais_Certos'})
                    
                    target = target.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 'Duelos_Defensivos_Ganhos_Percentil':'Duelos_Defensivos_Ganhos', 'Duelos_Aéreos_Ganhos_Percentil':'Duelos_Aéreos_Ganhos',
                                                            'Finalizações_Bloqueadas_Percentil':'Finalizações_Bloqueadas', 'Interceptações_Ajustadas_a_Posse_Percentil':'Interceptações_Ajustadas_a_Posse', 'Passes_Laterais_Certos_Percentil':'Passes_Laterais_Certos'})
                    
                    #Dropping Atleta-alvo
                    Role_6_Mean_Charts = Role_6_Mean_Charts[Role_6_Mean_Charts['Atleta'] != jogador_similar] 
                    #Extraindo 5 melhores
                    Role_6_Mean_Charts = Role_6_Mean_Charts.iloc[0:5, :]


                    #Primeiro Gráfico
                    Role_6_first = Role_6_Mean_Charts.iloc[0:1, :]
                    Role_6_first = pd.concat([Role_6_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_6_first.iat[0, 1]
                    jogadores_clube = Role_6_first.iat[0, 2]
                    jogadores_liga = Role_6_first.iat[0, 3]
                    alvo = Role_6_first.iat[1, 1]
                    alvo_clube = Role_6_first.iat[1, 2]
                    alvo_liga = Role_6_first.iat[1, 3]

                    #Splitting Data
                    Role_6_first_1 = Role_6_first.iloc[:, np.r_[0:3, 3:10]]

                    # Preparing Graph 1
                    params = list(Role_6_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_6_first_1[params][x])
                        a = 0
                        b = max(Role_6_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_6_first_1['Atleta'])):
                        if Role_6_first_1['Atleta'][x] == jogadores:
                            a_values = Role_6_first_1.iloc[x].values.tolist()
                        if Role_6_first_1['Atleta'][x] == alvo:
                            b_values = Role_6_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    ############################################################################

                    #Segundo Gráfico
                    Role_6_first = Role_6_Mean_Charts.iloc[1:2, :]
                    Role_6_first = pd.concat([Role_6_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_6_first.iat[0, 1]
                    jogadores_clube = Role_6_first.iat[0, 2]
                    jogadores_liga = Role_6_first.iat[0, 3]

                    #Splitting Data
                    Role_6_first_1 = Role_6_first.iloc[:, np.r_[0:3, 3:10]]

                    # Preparing Graph 1
                    params = list(Role_6_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_6_first_1[params][x])
                        a = 0
                        b = max(Role_6_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_6_first_1['Atleta'])):
                        if Role_6_first_1['Atleta'][x] == jogadores:
                            a_values = Role_6_first_1.iloc[x].values.tolist()
                        if Role_6_first_1['Atleta'][x] == alvo:
                            b_values = Role_6_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    ############################################################################

                    #Terceiro Gráfico
                    Role_6_first = Role_6_Mean_Charts.iloc[2:3, :]
                    Role_6_first = pd.concat([Role_6_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_6_first.iat[0, 1]
                    jogadores_clube = Role_6_first.iat[0, 2]
                    jogadores_liga = Role_6_first.iat[0, 3]

                    #Splitting Data
                    Role_6_first_1 = Role_6_first.iloc[:, np.r_[0:3, 3:10]]

                    # Preparing Graph 1
                    params = list(Role_6_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_6_first_1[params][x])
                        a = 0
                        b = max(Role_6_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_6_first_1['Atleta'])):
                        if Role_6_first_1['Atleta'][x] == jogadores:
                            a_values = Role_6_first_1.iloc[x].values.tolist()
                        if Role_6_first_1['Atleta'][x] == alvo:
                            b_values = Role_6_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    ############################################################################

                    #Quarto Gráfico
                    Role_6_first = Role_6_Mean_Charts.iloc[3:4, :]
                    Role_6_first = pd.concat([Role_6_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_6_first.iat[0, 1]
                    jogadores_clube = Role_6_first.iat[0, 2]
                    jogadores_liga = Role_6_first.iat[0, 3]

                    #Splitting Data
                    Role_6_first_1 = Role_6_first.iloc[:, np.r_[0:3, 3:10]]

                    # Preparing Graph 1
                    params = list(Role_6_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_6_first_1[params][x])
                        a = 0
                        b = max(Role_6_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_6_first_1['Atleta'])):
                        if Role_6_first_1['Atleta'][x] == jogadores:
                            a_values = Role_6_first_1.iloc[x].values.tolist()
                        if Role_6_first_1['Atleta'][x] == alvo:
                            b_values = Role_6_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Quinto Gráfico
                    Role_6_first = Role_6_Mean_Charts.iloc[4:5, :]
                    Role_6_first = pd.concat([Role_6_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_6_first.iat[0, 1]
                    jogadores_clube = Role_6_first.iat[0, 2]
                    jogadores_liga = Role_6_first.iat[0, 3]

                    #Splitting Data
                    Role_6_first_1 = Role_6_first.iloc[:, np.r_[0:3, 3:10]]

                    # Preparing Graph 1
                    params = list(Role_6_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_6_first_1[params][x])
                        a = 0
                        b = max(Role_6_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_6_first_1['Atleta'])):
                        if Role_6_first_1['Atleta'][x] == jogadores:
                            a_values = Role_6_first_1.iloc[x].values.tolist()
                        if Role_6_first_1['Atleta'][x] == alvo:
                            b_values = Role_6_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ########################################################################################################
                    ########################################################################################################
                    ########################################################################################################
                    ########################################################################################################

                if perfil_similar == ("Zagueiro Construtor"):
                ###############################################################################
                ###########################################################################
                    # ZAGUEIRO EQUILIBRADO
                    # Texto de Abertura>
                    markdown_amount_1 = f"<div style='text-align:center; font-size:{fontsize}px'>{jogador_similar:}</div>"
                    st.markdown("<h4 style='text-align: center;'>Jogador Selecionado</b></h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_1, unsafe_allow_html=True)
                    st.markdown("---")

                    #Carregando arquivo de dados
                    Role_7_data = pd.read_csv('7_Role_Zagueiro_Construtor_Similarity.csv')
                    Role_7_data = Role_7_data.drop(Role_7_data.columns[0:4], axis=1)
                    Role_7_data.reset_index(drop=True, inplace=True)

                    # Step : Defina o atleta-alvo
                    #base_bruta_similaridade = pd.read_csv("base_bruta_similaridade.csv")
                    target = Role_7_data.loc[(Role_7_data['Atleta'] == jogador_similar)]

                    #Step : Definindo "ID-alvo"
                    given_ID = target.iat[0, -1]
                    
                    selected = Role_7_data

                    # Step 9: Add columns "1", "2", "3" to Role_7_data

                    selected['1'] = given_ID[0]
                    selected['2'] = given_ID[1]
                    selected['3'] = given_ID[2]
                    selected['4'] = given_ID[3]

                    # Assigning correct columns to 1, 2, 3

                    if given_ID[0] == "A":
                        selected['1'] = selected["A1"]
                    elif given_ID[0] == "B":
                        selected['1'] = selected["B1"]
                    elif given_ID[0] == "C":
                        selected['1'] = selected["C1"]
                    elif given_ID[0] == "D":
                        selected['1'] = selected["D1"]
                    elif given_ID[0] == "E":
                        selected['1'] = selected["E1"]
                    elif given_ID[0] == "F":
                        selected['1'] = selected["F1"]
                    elif given_ID[0] == "G":
                        selected['1'] = selected["G1"]
                    elif given_ID[0] == "H":
                        selected['1'] = selected["H1"]
                    elif given_ID[0] == "I":
                        selected['1'] = selected["I1"]
                    elif given_ID[0] == "J":
                        selected['1'] = selected["J1"]

                    if given_ID[1] == "A":
                        selected['2'] = selected["A1"]
                    elif given_ID[1] == "B":
                        selected['2'] = selected["B1"]
                    elif given_ID[1] == "C":
                        selected['2'] = selected["C1"]
                    elif given_ID[1] == "D":
                        selected['2'] = selected["D1"]
                    elif given_ID[1] == "E":
                        selected['2'] = selected["E1"]
                    elif given_ID[1] == "F":
                        selected['2'] = selected["F1"]
                    elif given_ID[1] == "G":
                        selected['2'] = selected["G1"]
                    elif given_ID[1] == "H":
                        selected['2'] = selected["H1"]
                    elif given_ID[1] == "I":
                        selected['2'] = selected["I1"]
                    elif given_ID[1] == "J":
                        selected['2'] = selected["J1"]
                    
                    if given_ID[2] == "A":
                        selected['3'] = selected["A1"]
                    elif given_ID[2] == "B":
                        selected['3'] = selected["B1"]
                    elif given_ID[2] == "C":
                        selected['3'] = selected["C1"]
                    elif given_ID[2] == "D":
                        selected['3'] = selected["D1"]
                    elif given_ID[2] == "E":
                        selected['3'] = selected["E1"]
                    elif given_ID[2] == "F":
                        selected['3'] = selected["F1"]
                    elif given_ID[2] == "G":
                        selected['3'] = selected["G1"]
                    elif given_ID[2] == "H":
                        selected['3'] = selected["H1"]
                    elif given_ID[2] == "I":
                        selected['3'] = selected["I1"]
                    elif given_ID[2] == "J":
                        selected['3'] = selected["J1"]

                    if given_ID[3] == "A":
                        selected['4'] = selected["A1"]
                    elif given_ID[3] == "B":
                        selected['4'] = selected["B1"]
                    elif given_ID[3] == "C":
                        selected['4'] = selected["C1"]
                    elif given_ID[3] == "D":
                        selected['4'] = selected["D1"]
                    elif given_ID[3] == "E":
                        selected['4'] = selected["E1"]
                    elif given_ID[3] == "F":
                        selected['4'] = selected["F1"]
                    elif given_ID[3] == "G":
                        selected['4'] = selected["G1"]
                    elif given_ID[3] == "H":
                        selected['4'] = selected["H1"]
                    elif given_ID[3] == "I":
                        selected['4'] = selected["I1"]
                    elif given_ID[3] == "J":
                        selected['4'] = selected["J1"]

                    # Applying PCA for Scaled Selected Columns

                    leagues = ["ARG1", "AUT", "BEL1", "BRA1", "BRA2", "BUL", "CHN", 
                            "COL", "DEN", "ENG1", "ENG2", "FRA1", "FRA2", "GER1", 
                            "GER2", "GRE", "HOL", "ITA1", "ITA2", "JAP", "MEX", "PAR", 
                            "POR1", "QAT", "RUS", "SAUD", "SCT", "SER", "SPA1", 
                            "SPA2", "SWZ", "TUR", "UAE", "UKR", "URU", "USA"]

                    # Iterate over each league
                    for league in leagues:

                        # Extract columns 46 through 50
                        ZagueiroConstrutor = selected.iloc[:, np.r_[-4:0]]

                        # Defining Columns
                        ZagueiroConstrutor_columns = ZagueiroConstrutor.columns

                        # Applying PCA
                        pca = PCA(n_components=2)
                        principalComponents = pca.fit_transform(ZagueiroConstrutor)

                        # Create a DataFrame with loadings
                        LoadingsZagueiroConstrutor = pd.DataFrame(pca.components_.T**2, index=ZagueiroConstrutor_columns, columns=['loading factor 1', 'loading factor 2'])

                        # Multiplying Matrices to obtain Pre_Variables
                        Similarity = pd.DataFrame(np.matmul(ZagueiroConstrutor, LoadingsZagueiroConstrutor['loading factor 1']) + np.matmul(ZagueiroConstrutor, LoadingsZagueiroConstrutor['loading factor 2']),
                                                columns=["Similarity"])

                    # Rebuilding Full Training Set
                    selected = selected.join(Similarity)

                    ##############################################################
                    ##############################################################

                    # Lista de Similares
                    # Initialize an empty list to store DataFrames
                    target = selected.loc[(Role_7_data['Atleta'] == jogador_similar) & (Role_7_data['Liga'] == liga_similar)]
                    target_similarity = target.iat[0, -1]

                    selected["Índice de Similaridade"] = (selected['Similarity']/target_similarity)*100
                    selected["Índice de Similaridade"] = round(selected["Índice de Similaridade"], 2)

                    target = selected.loc[(selected['Atleta'] == jogador_similar) & (selected['Liga'] == liga_similar)]
                    selected['Dif_Similarity'] = abs(selected["Índice de Similaridade"] - 100)

                    selected = selected.sort_values(by='Dif_Similarity')

                    lista_similares = selected.iloc[1:31, np.r_[0, 2, 27, 32, -2:0]]
                    lista_similares = lista_similares.sort_values(by='Rating', ascending=False)
                    lista_similares = lista_similares.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Dif_Similarity':'Diferença de Similaridade'})

                    # Lista de Jogadores Similares Ordenados segundo o Rating
                    st.markdown("<h4 style='text-align: center;'>30 Jogadores + Similares</b></h4>", unsafe_allow_html=True)
                    #st.dataframe(lista_similares, use_container_width=True, hide_index=True)
                    st.markdown("---")

                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index(drop=True)
                        # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                        formatter = {"Rating": "{:.3f}", "Índice de Similaridade": "{:.2f}", "Diferença de Similaridade": "{:.2f}"}  # Format the 'Rating' column to 3 decimal places
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px',
                                            'font-size': '15px'})

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML without the index and display it
                        styled_html = style_table(lista_similares).to_html(escape=False, index=False, hide_index=True)
                        st.markdown(styled_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    # Lista de Latinos
                    selected_latam = selected.iloc[1:31, :]
                    selected_latam = selected_latam[(selected_latam["Nacionalidade"] == "Argentina")|(selected_latam["Nacionalidade"] == "Brazil")
                                        |(selected_latam["Nacionalidade"] == "Bolivia")|(selected_latam["Nacionalidade"] == "Chile")
                                        |(selected_latam["Nacionalidade"] == "Colombia")|(selected_latam["Nacionalidade"] == "Costa Rica")
                                        |(selected_latam["Nacionalidade"] == "Ecuador")|(selected_latam["Nacionalidade"] == "Mexico")
                                        |(selected_latam["Nacionalidade"] == "Panama")|(selected_latam["Nacionalidade"] == "Paraguay")
                                        |(selected_latam["Nacionalidade"] == "Peru")|(selected_latam["Nacionalidade"] == "Uruguay")
                                        |(selected_latam["Nacionalidade"] == "Venezuela")]
                    lista_similares_latam = selected_latam.iloc[0:30, :]
                    lista_similares_latam = lista_similares_latam.sort_values(by="Rating", ascending = False)

                    #Texto para os Gráficos
                    st.markdown("<h4 style='text-align: center;'><br>5 Jogadores Latinos Similares Melhor Ranquedos</b></h4>", unsafe_allow_html=True)
                    st.markdown("---")    


                    # Gerar Gráficos com os 5 melhores
                    # Arquivo para o Gráfico
                    Role_7_Mean_Charts = lista_similares_latam.iloc[:, np.r_[0, 2, 27, 33:43]]
                    target = target.iloc[:, np.r_[0, 2, 27, 33:43]]
                    # Renomeando Colunas
                    Role_7_Mean_Charts = Role_7_Mean_Charts.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 'Duelos_Defensivos_Ganhos_Percentil':'Duelos_Defensivos_Ganhos', 'Duelos_Aéreos_Ganhos_Percentil':'Duelos_Aéreos_Ganhos',
                                                            'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 'Passes_Frontais_Certos_Percentil':'Passes_Frontais_Certos', 'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos', 
                                                            'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos', 'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos', 'Corridas_Progressivas_Percentil':'Corridas_Progressivas', 
                                                            'Passes_TerçoFinal_Certos_Percentil':'Passes_TerçoFinal_Certos'})
                    
                    target = target.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 'Duelos_Defensivos_Ganhos_Percentil':'Duelos_Defensivos_Ganhos', 'Duelos_Aéreos_Ganhos_Percentil':'Duelos_Aéreos_Ganhos',
                                                            'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 'Passes_Frontais_Certos_Percentil':'Passes_Frontais_Certos', 'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos', 
                                                            'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos', 'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos', 'Corridas_Progressivas_Percentil':'Corridas_Progressivas', 
                                                            'Passes_TerçoFinal_Certos_Percentil':'Passes_TerçoFinal_Certos'})
                    
                    #Dropping Atleta-alvo
                    Role_7_Mean_Charts = Role_7_Mean_Charts[Role_7_Mean_Charts['Atleta'] != jogador_similar] 
                    #Extraindo 5 melhores
                    Role_7_Mean_Charts = Role_7_Mean_Charts.iloc[0:5, :]


                    #Primeiro Gráfico
                    Role_7_first = Role_7_Mean_Charts.iloc[0:1, :]
                    Role_7_first = pd.concat([Role_7_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_7_first.iat[0, 1]
                    jogadores_clube = Role_7_first.iat[0, 2]
                    jogadores_liga = Role_7_first.iat[0, 3]
                    alvo = Role_7_first.iat[1, 1]
                    alvo_clube = Role_7_first.iat[1, 2]
                    alvo_liga = Role_7_first.iat[1, 3]

                    #Splitting Data
                    Role_7_first_1 = Role_7_first.iloc[:, np.r_[0:3, 3:9]]
                    Role_7_first_2 = Role_7_first.iloc[:, np.r_[0:3, 9:14]]

                    # Preparing Graph 1
                    params = list(Role_7_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_7_first_1[params][x])
                        a = 0
                        b = max(Role_7_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_7_first_1['Atleta'])):
                        if Role_7_first_1['Atleta'][x] == jogadores:
                            a_values = Role_7_first_1.iloc[x].values.tolist()
                        if Role_7_first_1['Atleta'][x] == alvo:
                            b_values = Role_7_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_7_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_7_first_2[params][x])
                        a = 0
                        b = max(Role_7_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_7_first_2['Atleta'])):
                        if Role_7_first_2['Atleta'][x] == jogadores:
                            a_values = Role_7_first_2.iloc[x].values.tolist()
                        if Role_7_first_2['Atleta'][x] == alvo:
                            b_values = Role_7_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################

                    #Segundo Gráfico
                    Role_7_first = Role_7_Mean_Charts.iloc[1:2, :]
                    Role_7_first = pd.concat([Role_7_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_7_first.iat[0, 1]
                    jogadores_clube = Role_7_first.iat[0, 2]
                    jogadores_liga = Role_7_first.iat[0, 3]

                    #Splitting Data
                    Role_7_first_1 = Role_7_first.iloc[:, np.r_[0:3, 3:9]]
                    Role_7_first_2 = Role_7_first.iloc[:, np.r_[0:3, 9:14]]

                    # Preparing Graph 1
                    params = list(Role_7_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_7_first_1[params][x])
                        a = 0
                        b = max(Role_7_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_7_first_1['Atleta'])):
                        if Role_7_first_1['Atleta'][x] == jogadores:
                            a_values = Role_7_first_1.iloc[x].values.tolist()
                        if Role_7_first_1['Atleta'][x] == alvo:
                            b_values = Role_7_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_7_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_7_first_2[params][x])
                        a = 0
                        b = max(Role_7_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_7_first_2['Atleta'])):
                        if Role_7_first_2['Atleta'][x] == jogadores:
                            a_values = Role_7_first_2.iloc[x].values.tolist()
                        if Role_7_first_2['Atleta'][x] == alvo:
                            b_values = Role_7_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Terceiro Gráfico
                    Role_7_first = Role_7_Mean_Charts.iloc[2:3, :]
                    Role_7_first = pd.concat([Role_7_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_7_first.iat[0, 1]
                    jogadores_clube = Role_7_first.iat[0, 2]
                    jogadores_liga = Role_7_first.iat[0, 3]

                    #Splitting Data
                    Role_7_first_1 = Role_7_first.iloc[:, np.r_[0:3, 3:9]]
                    Role_7_first_2 = Role_7_first.iloc[:, np.r_[0:3, 9:14]]

                    # Preparing Graph 1
                    params = list(Role_7_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_7_first_1[params][x])
                        a = 0
                        b = max(Role_7_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_7_first_1['Atleta'])):
                        if Role_7_first_1['Atleta'][x] == jogadores:
                            a_values = Role_7_first_1.iloc[x].values.tolist()
                        if Role_7_first_1['Atleta'][x] == alvo:
                            b_values = Role_7_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_7_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_7_first_2[params][x])
                        a = 0
                        b = max(Role_7_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_7_first_2['Atleta'])):
                        if Role_7_first_2['Atleta'][x] == jogadores:
                            a_values = Role_7_first_2.iloc[x].values.tolist()
                        if Role_7_first_2['Atleta'][x] == alvo:
                            b_values = Role_7_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Quarto Gráfico
                    Role_7_first = Role_7_Mean_Charts.iloc[3:4, :]
                    Role_7_first = pd.concat([Role_7_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_7_first.iat[0, 1]
                    jogadores_clube = Role_7_first.iat[0, 2]
                    jogadores_liga = Role_7_first.iat[0, 3]

                    #Splitting Data
                    Role_7_first_1 = Role_7_first.iloc[:, np.r_[0:3, 3:9]]
                    Role_7_first_2 = Role_7_first.iloc[:, np.r_[0:3, 9:14]]

                    # Preparing Graph 1
                    params = list(Role_7_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_7_first_1[params][x])
                        a = 0
                        b = max(Role_7_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_7_first_1['Atleta'])):
                        if Role_7_first_1['Atleta'][x] == jogadores:
                            a_values = Role_7_first_1.iloc[x].values.tolist()
                        if Role_7_first_1['Atleta'][x] == alvo:
                            b_values = Role_7_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_7_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_7_first_2[params][x])
                        a = 0
                        b = max(Role_7_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_7_first_2['Atleta'])):
                        if Role_7_first_2['Atleta'][x] == jogadores:
                            a_values = Role_7_first_2.iloc[x].values.tolist()
                        if Role_7_first_2['Atleta'][x] == alvo:
                            b_values = Role_7_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Quinto Gráfico
                    Role_7_first = Role_7_Mean_Charts.iloc[4:5, :]
                    Role_7_first = pd.concat([Role_7_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_7_first.iat[0, 1]
                    jogadores_clube = Role_7_first.iat[0, 2]
                    jogadores_liga = Role_7_first.iat[0, 3]

                    #Splitting Data
                    Role_7_first_1 = Role_7_first.iloc[:, np.r_[0:3, 3:9]]
                    Role_7_first_2 = Role_7_first.iloc[:, np.r_[0:3, 9:14]]

                    # Preparing Graph 1
                    params = list(Role_7_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_7_first_1[params][x])
                        a = 0
                        b = max(Role_7_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_7_first_1['Atleta'])):
                        if Role_7_first_1['Atleta'][x] == jogadores:
                            a_values = Role_7_first_1.iloc[x].values.tolist()
                        if Role_7_first_1['Atleta'][x] == alvo:
                            b_values = Role_7_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_7_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_7_first_2[params][x])
                        a = 0
                        b = max(Role_7_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_7_first_2['Atleta'])):
                        if Role_7_first_2['Atleta'][x] == jogadores:
                            a_values = Role_7_first_2.iloc[x].values.tolist()
                        if Role_7_first_2['Atleta'][x] == alvo:
                            b_values = Role_7_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

########################################################################################################################
########################################################################################################################
########################################################################################################################
########################################################################################################################

                if perfil_similar == ("Zagueiro Equilibrado"):
                ###############################################################################
                ###########################################################################
                    # ZAGUEIRO EQUILIBRADO
                    # Texto de Abertura>
                    markdown_amount_1 = f"<div style='text-align:center; font-size:{fontsize}px'>{jogador_similar:}</div>"
                    st.markdown("<h4 style='text-align: center;'>Jogador Selecionado</b></h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_1, unsafe_allow_html=True)
                    st.markdown("---")

                    #Carregando arquivo de dados
                    Role_8_data = pd.read_csv('8_Role_Zagueiro_Equilibrado_Similarity.csv')
                    Role_8_data = Role_8_data.drop(Role_8_data.columns[0:4], axis=1)
                    Role_8_data.reset_index(drop=True, inplace=True)

                    # Step : Defina o atleta-alvo
                    #base_bruta_similaridade = pd.read_csv("base_bruta_similaridade.csv")
                    target = Role_8_data.loc[(Role_8_data['Atleta'] == jogador_similar)]

                    #Step : Definindo "ID-alvo"
                    given_ID = target.iat[0, -1]
                    
                    selected = Role_8_data

                    # Step 9: Add columns "1", "2", "3" to Role_8_data

                    selected['1'] = given_ID[0]
                    selected['2'] = given_ID[1]
                    selected['3'] = given_ID[2]
                    selected['4'] = given_ID[3]

                    # Assigning correct columns to 1, 2, 3

                    if given_ID[0] == "A":
                        selected['1'] = selected["A1"]
                    elif given_ID[0] == "B":
                        selected['1'] = selected["B1"]
                    elif given_ID[0] == "C":
                        selected['1'] = selected["C1"]
                    elif given_ID[0] == "D":
                        selected['1'] = selected["D1"]
                    elif given_ID[0] == "E":
                        selected['1'] = selected["E1"]
                    elif given_ID[0] == "F":
                        selected['1'] = selected["F1"]
                    elif given_ID[0] == "G":
                        selected['1'] = selected["G1"]
                    elif given_ID[0] == "H":
                        selected['1'] = selected["H1"]
                    elif given_ID[0] == "I":
                        selected['1'] = selected["I1"]
                    elif given_ID[0] == "J":
                        selected['1'] = selected["J1"]
                    elif given_ID[0] == "K":
                        selected['1'] = selected["K1"]
                    elif given_ID[0] == "L":
                        selected['1'] = selected["L1"]
                    elif given_ID[0] == "M":
                        selected['1'] = selected["M1"]


                    if given_ID[1] == "A":
                        selected['2'] = selected["A1"]
                    elif given_ID[1] == "B":
                        selected['2'] = selected["B1"]
                    elif given_ID[1] == "C":
                        selected['2'] = selected["C1"]
                    elif given_ID[1] == "D":
                        selected['2'] = selected["D1"]
                    elif given_ID[1] == "E":
                        selected['2'] = selected["E1"]
                    elif given_ID[1] == "F":
                        selected['2'] = selected["F1"]
                    elif given_ID[1] == "G":
                        selected['2'] = selected["G1"]
                    elif given_ID[1] == "H":
                        selected['2'] = selected["H1"]
                    elif given_ID[1] == "I":
                        selected['2'] = selected["I1"]
                    elif given_ID[1] == "J":
                        selected['2'] = selected["J1"]
                    elif given_ID[1] == "K":
                        selected['2'] = selected["K1"]
                    elif given_ID[1] == "L":
                        selected['2'] = selected["L1"]
                    elif given_ID[1] == "M":
                        selected['2'] = selected["M1"]
                    
                    
                    if given_ID[2] == "A":
                        selected['3'] = selected["A1"]
                    elif given_ID[2] == "B":
                        selected['3'] = selected["B1"]
                    elif given_ID[2] == "C":
                        selected['3'] = selected["C1"]
                    elif given_ID[2] == "D":
                        selected['3'] = selected["D1"]
                    elif given_ID[2] == "E":
                        selected['3'] = selected["E1"]
                    elif given_ID[2] == "F":
                        selected['3'] = selected["F1"]
                    elif given_ID[2] == "G":
                        selected['3'] = selected["G1"]
                    elif given_ID[2] == "H":
                        selected['3'] = selected["H1"]
                    elif given_ID[2] == "I":
                        selected['3'] = selected["I1"]
                    elif given_ID[2] == "J":
                        selected['3'] = selected["J1"]
                    elif given_ID[2] == "K":
                        selected['3'] = selected["K1"]
                    elif given_ID[2] == "L":
                        selected['3'] = selected["L1"]
                    elif given_ID[2] == "M":
                        selected['3'] = selected["M1"]

                    if given_ID[3] == "A":
                        selected['4'] = selected["A1"]
                    elif given_ID[3] == "B":
                        selected['4'] = selected["B1"]
                    elif given_ID[3] == "C":
                        selected['4'] = selected["C1"]
                    elif given_ID[3] == "D":
                        selected['4'] = selected["D1"]
                    elif given_ID[3] == "E":
                        selected['4'] = selected["E1"]
                    elif given_ID[3] == "F":
                        selected['4'] = selected["F1"]
                    elif given_ID[3] == "G":
                        selected['4'] = selected["G1"]
                    elif given_ID[3] == "H":
                        selected['4'] = selected["H1"]
                    elif given_ID[3] == "I":
                        selected['4'] = selected["I1"]
                    elif given_ID[3] == "J":
                        selected['4'] = selected["J1"]
                    elif given_ID[3] == "K":
                        selected['4'] = selected["K1"]
                    elif given_ID[3] == "L":
                        selected['4'] = selected["L1"]
                    elif given_ID[3] == "M":
                        selected['4'] = selected["M1"]

                    # Applying PCA for Scaled Selected Columns

                    leagues = ["ARG1", "AUT", "BEL1", "BRA1", "BRA2", "BUL", "CHN", 
                            "COL", "DEN", "ENG1", "ENG2", "FRA1", "FRA2", "GER1", 
                            "GER2", "GRE", "HOL", "ITA1", "ITA2", "JAP", "MEX", "PAR", 
                            "POR1", "QAT", "RUS", "SAUD", "SCT", "SER", "SPA1", 
                            "SPA2", "SWZ", "TUR", "UAE", "UKR", "URU", "USA"]

                    # Iterate over each league
                    for league in leagues:

                        # Extract columns 46 through 50
                        Zagueiro = selected.iloc[:, np.r_[-4:0]]

                        # Defining Columns
                        Zagueiro_columns = Zagueiro.columns

                        # Applying PCA
                        pca = PCA(n_components=2)
                        principalComponents = pca.fit_transform(Zagueiro)

                        # Create a DataFrame with loadings
                        LoadingsZagueiro = pd.DataFrame(pca.components_.T**2, index=Zagueiro_columns, columns=['loading factor 1', 'loading factor 2'])

                        # Multiplying Matrices to obtain Pre_Variables
                        Similarity = pd.DataFrame(np.matmul(Zagueiro, LoadingsZagueiro['loading factor 1']) + np.matmul(Zagueiro, LoadingsZagueiro['loading factor 2']),
                                                columns=["Similarity"])

                    # Rebuilding Full Training Set
                    selected = selected.join(Similarity)

                    ##############################################################
                    ##############################################################

                    # Lista de Similares
                    # Initialize an empty list to store DataFrames
                    target = selected.loc[(Role_8_data['Atleta'] == jogador_similar) & (Role_8_data['Liga'] == liga_similar)]
                    target_similarity = target.iat[0, -1]

                    selected["Índice de Similaridade"] = (selected['Similarity']/target_similarity)*100
                    selected["Índice de Similaridade"] = round(selected["Índice de Similaridade"], 2)

                    target = selected.loc[(selected['Atleta'] == jogador_similar) & (selected['Liga'] == liga_similar)]
                    selected['Dif_Similarity'] = abs(selected["Índice de Similaridade"] - 100)

                    selected = selected.sort_values(by='Dif_Similarity')

                    lista_similares = selected.iloc[1:31, np.r_[0, 2, 30, 35, -2:0]]
                    lista_similares = lista_similares.sort_values(by='Rating', ascending=False)
                    lista_similares = lista_similares.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Dif_Similarity':'Diferença de Similaridade'})

                    # Lista de Jogadores Similares Ordenados segundo o Rating
                    st.markdown("<h4 style='text-align: center;'>30 Jogadores + Similares</b></h4>", unsafe_allow_html=True)
                    #st.dataframe(lista_similares, use_container_width=True, hide_index=True)
                    st.markdown("---")

                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index(drop=True)
                        # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                        formatter = {"Rating": "{:.3f}", "Índice de Similaridade": "{:.2f}", "Diferença de Similaridade": "{:.2f}"}  # Format the 'Rating' column to 3 decimal places
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px',
                                            'font-size': '15px'})

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML without the index and display it
                        styled_html = style_table(lista_similares).to_html(escape=False, index=False, hide_index=True)
                        st.markdown(styled_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    # Lista de Latinos
                    selected_latam = selected.iloc[1:31, :]
                    selected_latam = selected_latam[(selected_latam["Nacionalidade"] == "Argentina")|(selected_latam["Nacionalidade"] == "Brazil")
                                        |(selected_latam["Nacionalidade"] == "Bolivia")|(selected_latam["Nacionalidade"] == "Chile")
                                        |(selected_latam["Nacionalidade"] == "Colombia")|(selected_latam["Nacionalidade"] == "Costa Rica")
                                        |(selected_latam["Nacionalidade"] == "Ecuador")|(selected_latam["Nacionalidade"] == "Mexico")
                                        |(selected_latam["Nacionalidade"] == "Panama")|(selected_latam["Nacionalidade"] == "Paraguay")
                                        |(selected_latam["Nacionalidade"] == "Peru")|(selected_latam["Nacionalidade"] == "Uruguay")
                                        |(selected_latam["Nacionalidade"] == "Venezuela")]
                    lista_similares_latam = selected_latam.iloc[0:30, :]
                    lista_similares_latam = lista_similares_latam.sort_values(by="Rating", ascending = False)

                    #Texto para os Gráficos
                    st.markdown("<h4 style='text-align: center;'><br>5 Jogadores Latinos Similares Melhor Ranquedos</b></h4>", unsafe_allow_html=True)
                    st.markdown("---")    


                    # Gerar Gráficos com os 5 melhores
                    # Arquivo para o Gráfico
                    Role_8_Mean_Charts = lista_similares_latam.iloc[:, np.r_[0, 2, 30, 36:49]]
                    target = target.iloc[:, np.r_[0, 2, 30, 36:49]]
                    # Renomeando Colunas
                    Role_8_Mean_Charts = Role_8_Mean_Charts.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 'Duelos_Defensivos_Ganhos_Percentil':'Duelos_Defensivos_Ganhos', 'Duelos_Aéreos_Ganhos_Percentil':'Duelos_Aéreos_Ganhos',
                                                                                'Finalizações_Bloqueadas_Percentil':'Finalizações_Bloqueadas', 'Interceptações_Ajustadas_a_Posse_Percentil':'Interceptações_Ajustadas_a_Posse', 'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 
                                                                                'Passes_Frontais_Certos_Percentil':'Passes_Frontais_Certos', 'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos', 'Passes_Laterais_Certos_Percentil':'Passes_Laterais_Certos', 'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos', 
                                                                                'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos', 'Corridas_Progressivas_Percentil':'Corridas_Progressivas', 'Passes_TerçoFinal_Certos_Percentil':'Passes_TerçoFinal_Certos'})
                    
                    target = target.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 'Duelos_Defensivos_Ganhos_Percentil':'Duelos_Defensivos_Ganhos', 'Duelos_Aéreos_Ganhos_Percentil':'Duelos_Aéreos_Ganhos',
                                                                                'Finalizações_Bloqueadas_Percentil':'Finalizações_Bloqueadas', 'Interceptações_Ajustadas_a_Posse_Percentil':'Interceptações_Ajustadas_a_Posse', 'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 
                                                                                'Passes_Frontais_Certos_Percentil':'Passes_Frontais_Certos', 'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos', 'Passes_Laterais_Certos_Percentil':'Passes_Laterais_Certos', 'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos', 
                                                                                'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos', 'Corridas_Progressivas_Percentil':'Corridas_Progressivas', 'Passes_TerçoFinal_Certos_Percentil':'Passes_TerçoFinal_Certos'})
                    
                    #Dropping Atleta-alvo
                    Role_8_Mean_Charts = Role_8_Mean_Charts[Role_8_Mean_Charts['Atleta'] != jogador_similar] 
                    #Extraindo 5 melhores
                    Role_8_Mean_Charts = Role_8_Mean_Charts.iloc[0:5, :]


                    #Primeiro Gráfico
                    Role_8_first = Role_8_Mean_Charts.iloc[0:1, :]
                    Role_8_first = pd.concat([Role_8_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_8_first.iat[0, 1]
                    jogadores_clube = Role_8_first.iat[0, 2]
                    jogadores_liga = Role_8_first.iat[0, 3]
                    alvo = Role_8_first.iat[1, 1]
                    alvo_clube = Role_8_first.iat[1, 2]
                    alvo_liga = Role_8_first.iat[1, 3]

                    #Splitting Data
                    Role_8_first_1 = Role_8_first.iloc[:, np.r_[0:3, 3:10]]
                    Role_8_first_2 = Role_8_first.iloc[:, np.r_[0:3, 10:16]]

                    # Preparing Graph 1
                    params = list(Role_8_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_8_first_1[params][x])
                        a = 0
                        b = max(Role_8_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_8_first_1['Atleta'])):
                        if Role_8_first_1['Atleta'][x] == jogadores:
                            a_values = Role_8_first_1.iloc[x].values.tolist()
                        if Role_8_first_1['Atleta'][x] == alvo:
                            b_values = Role_8_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_8_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_8_first_2[params][x])
                        a = 0
                        b = max(Role_8_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_8_first_2['Atleta'])):
                        if Role_8_first_2['Atleta'][x] == jogadores:
                            a_values = Role_8_first_2.iloc[x].values.tolist()
                        if Role_8_first_2['Atleta'][x] == alvo:
                            b_values = Role_8_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################

                    #Segundo Gráfico
                    Role_8_first = Role_8_Mean_Charts.iloc[1:2, :]
                    Role_8_first = pd.concat([Role_8_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_8_first.iat[0, 1]
                    jogadores_clube = Role_8_first.iat[0, 2]
                    jogadores_liga = Role_8_first.iat[0, 3]
                    #alvo = Role_8_first.iat[1, 1]
                    #alvo_clube = Role_8_first.iat[1, 2]
                    #alvo_liga = Role_8_first.iat[1, 3]

                    #Splitting Data
                    Role_8_first_1 = Role_8_first.iloc[:, np.r_[0:3, 3:10]]
                    Role_8_first_2 = Role_8_first.iloc[:, np.r_[0:3, 10:16]]

                    # Preparing Graph 1
                    params = list(Role_8_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_8_first_1[params][x])
                        a = 0
                        b = max(Role_8_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_8_first_1['Atleta'])):
                        if Role_8_first_1['Atleta'][x] == jogadores:
                            a_values = Role_8_first_1.iloc[x].values.tolist()
                        if Role_8_first_1['Atleta'][x] == alvo:
                            b_values = Role_8_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_8_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_8_first_2[params][x])
                        a = 0
                        b = max(Role_8_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_8_first_2['Atleta'])):
                        if Role_8_first_2['Atleta'][x] == jogadores:
                            a_values = Role_8_first_2.iloc[x].values.tolist()
                        if Role_8_first_2['Atleta'][x] == alvo:
                            b_values = Role_8_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Terceiro Gráfico
                    Role_8_first = Role_8_Mean_Charts.iloc[2:3, :]
                    Role_8_first = pd.concat([Role_8_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_8_first.iat[0, 1]
                    jogadores_clube = Role_8_first.iat[0, 2]
                    jogadores_liga = Role_8_first.iat[0, 3]
                    #alvo = Role_8_first.iat[1, 1]
                    #alvo_clube = Role_8_first.iat[1, 2]
                    #alvo_liga = Role_8_first.iat[1, 3]

                    #Splitting Data
                    Role_8_first_1 = Role_8_first.iloc[:, np.r_[0:3, 3:10]]
                    Role_8_first_2 = Role_8_first.iloc[:, np.r_[0:3, 10:16]]

                    # Preparing Graph 1
                    params = list(Role_8_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_8_first_1[params][x])
                        a = 0
                        b = max(Role_8_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_8_first_1['Atleta'])):
                        if Role_8_first_1['Atleta'][x] == jogadores:
                            a_values = Role_8_first_1.iloc[x].values.tolist()
                        if Role_8_first_1['Atleta'][x] == alvo:
                            b_values = Role_8_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_8_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_8_first_2[params][x])
                        a = 0
                        b = max(Role_8_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_8_first_2['Atleta'])):
                        if Role_8_first_2['Atleta'][x] == jogadores:
                            a_values = Role_8_first_2.iloc[x].values.tolist()
                        if Role_8_first_2['Atleta'][x] == alvo:
                            b_values = Role_8_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Quarto Gráfico
                    Role_8_first = Role_8_Mean_Charts.iloc[3:4, :]
                    Role_8_first = pd.concat([Role_8_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_8_first.iat[0, 1]
                    jogadores_clube = Role_8_first.iat[0, 2]
                    jogadores_liga = Role_8_first.iat[0, 3]
                    #alvo = Role_8_first.iat[1, 1]
                    #alvo_clube = Role_8_first.iat[1, 2]
                    #alvo_liga = Role_8_first.iat[1, 3]

                    #Splitting Data
                    Role_8_first_1 = Role_8_first.iloc[:, np.r_[0:3, 3:10]]
                    Role_8_first_2 = Role_8_first.iloc[:, np.r_[0:3, 10:16]]

                    # Preparing Graph 1
                    params = list(Role_8_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_8_first_1[params][x])
                        a = 0
                        b = max(Role_8_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_8_first_1['Atleta'])):
                        if Role_8_first_1['Atleta'][x] == jogadores:
                            a_values = Role_8_first_1.iloc[x].values.tolist()
                        if Role_8_first_1['Atleta'][x] == alvo:
                            b_values = Role_8_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_8_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_8_first_2[params][x])
                        a = 0
                        b = max(Role_8_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_8_first_2['Atleta'])):
                        if Role_8_first_2['Atleta'][x] == jogadores:
                            a_values = Role_8_first_2.iloc[x].values.tolist()
                        if Role_8_first_2['Atleta'][x] == alvo:
                            b_values = Role_8_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Quinto Gráfico
                    Role_8_first = Role_8_Mean_Charts.iloc[4:5, :]
                    Role_8_first = pd.concat([Role_8_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_8_first.iat[0, 1]
                    jogadores_clube = Role_8_first.iat[0, 2]
                    jogadores_liga = Role_8_first.iat[0, 3]
                    #alvo = Role_8_first.iat[1, 1]
                    #alvo_clube = Role_8_first.iat[1, 2]
                    #alvo_liga = Role_8_first.iat[1, 3]

                    #Splitting Data
                    Role_8_first_1 = Role_8_first.iloc[:, np.r_[0:3, 3:10]]
                    Role_8_first_2 = Role_8_first.iloc[:, np.r_[0:3, 10:16]]

                    # Preparing Graph 1
                    params = list(Role_8_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_8_first_1[params][x])
                        a = 0
                        b = max(Role_8_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_8_first_1['Atleta'])):
                        if Role_8_first_1['Atleta'][x] == jogadores:
                            a_values = Role_8_first_1.iloc[x].values.tolist()
                        if Role_8_first_1['Atleta'][x] == alvo:
                            b_values = Role_8_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_8_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_8_first_2[params][x])
                        a = 0
                        b = max(Role_8_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_8_first_2['Atleta'])):
                        if Role_8_first_2['Atleta'][x] == jogadores:
                            a_values = Role_8_first_2.iloc[x].values.tolist()
                        if Role_8_first_2['Atleta'][x] == alvo:
                            b_values = Role_8_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

########################################################################################################################
########################################################################################################################
########################################################################################################################
########################################################################################################################

                if perfil_similar == ("Primeiro Volante Defensivo"):
                ###############################################################################
                ###########################################################################
                    # PRIMEIRO VOLANTE DEFENSIVO
                    # Texto de Abertura>
                    markdown_amount_1 = f"<div style='text-align:center; font-size:{fontsize}px'>{jogador_similar:}</div>"
                    st.markdown("<h4 style='text-align: center;'>Jogador Selecionado</b></h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_1, unsafe_allow_html=True)
                    st.markdown("---")

                    #Carregando arquivo de dados
                    Role_9_data = pd.read_csv('9_Role_Volante_Defensivo_Similarity.csv')
                    Role_9_data = Role_9_data.drop(Role_9_data.columns[0:4], axis=1)
                    Role_9_data.reset_index(drop=True, inplace=True)

                    # Step : Defina o atleta-alvo
                    #base_bruta_similaridade = pd.read_csv("base_bruta_similaridade.csv")
                    target = Role_9_data.loc[(Role_9_data['Atleta'] == jogador_similar)]

                    #Step : Definindo "ID-alvo"
                    given_ID = target.iat[0, -1]
                    
                    selected = Role_9_data

                    # Step 9: Add columns "1", "2", "3" to Role_9_data

                    selected['1'] = given_ID[0]
                    selected['2'] = given_ID[1]
                    selected['3'] = given_ID[2]

                    # Assigning correct columns to 1, 2, 3

                    if given_ID[0] == "A":
                        selected['1'] = selected["A1"]
                    elif given_ID[0] == "B":
                        selected['1'] = selected["B1"]
                    elif given_ID[0] == "C":
                        selected['1'] = selected["C1"]
                    elif given_ID[0] == "D":
                        selected['1'] = selected["D1"]


                    if given_ID[1] == "A":
                        selected['2'] = selected["A1"]
                    elif given_ID[1] == "B":
                        selected['2'] = selected["B1"]
                    elif given_ID[1] == "C":
                        selected['2'] = selected["C1"]
                    elif given_ID[1] == "D":
                        selected['2'] = selected["D1"]
                    
                    
                    if given_ID[2] == "A":
                        selected['3'] = selected["A1"]
                    elif given_ID[2] == "B":
                        selected['3'] = selected["B1"]
                    elif given_ID[2] == "C":
                        selected['3'] = selected["C1"]
                    elif given_ID[2] == "D":
                        selected['3'] = selected["D1"]

                   # Applying PCA for Scaled Selected Columns

                    leagues = ["ARG1", "AUT", "BEL1", "BRA1", "BRA2", "BUL", "CHN", 
                            "COL", "DEN", "ENG1", "ENG2", "FRA1", "FRA2", "GER1", 
                            "GER2", "GRE", "HOL", "ITA1", "ITA2", "JAP", "MEX", "PAR", 
                            "POR1", "QAT", "RUS", "SAUD", "SCT", "SER", "SPA1", 
                            "SPA2", "SWZ", "TUR", "UAE", "UKR", "URU", "USA"]

                    # Iterate over each league
                    for league in leagues:

                        # Extract columns 46 through 50
                        VolanteDefensivo = selected.iloc[:, np.r_[-3:0]]

                        # Defining Columns
                        VolanteDefensivo_columns = VolanteDefensivo.columns

                        # Applying PCA
                        pca = PCA(n_components=2)
                        principalComponents = pca.fit_transform(VolanteDefensivo)

                        # Create a DataFrame with loadings
                        LoadingsVolanteDefensivo = pd.DataFrame(pca.components_.T**2, index=VolanteDefensivo_columns, columns=['loading factor 1', 'loading factor 2'])

                        # Multiplying Matrices to obtain Pre_Variables
                        Similarity = pd.DataFrame(np.matmul(VolanteDefensivo, LoadingsVolanteDefensivo['loading factor 1']) + np.matmul(VolanteDefensivo, LoadingsVolanteDefensivo['loading factor 2']),
                                                columns=["Similarity"])

                    # Rebuilding Full Training Set
                    selected = selected.join(Similarity)

                    ##############################################################
                    ##############################################################

                    # Lista de Similares
                    # Initialize an empty list to store DataFrames
                    target = selected.loc[(Role_9_data['Atleta'] == jogador_similar) & (Role_9_data['Liga'] == liga_similar)]
                    target_similarity = target.iat[0, -1]

                    selected["Índice de Similaridade"] = (selected['Similarity']/target_similarity)*100
                    selected["Índice de Similaridade"] = round(selected["Índice de Similaridade"], 2)

                    target = selected.loc[(selected['Atleta'] == jogador_similar) & (selected['Liga'] == liga_similar)]
                    selected['Dif_Similarity'] = abs(selected["Índice de Similaridade"] - 100)

                    selected = selected.sort_values(by='Dif_Similarity')

                    lista_similares = selected.iloc[1:31, np.r_[0, 2, 21, 26, -2:0]]
                    lista_similares = lista_similares.sort_values(by='Rating', ascending=False)
                    lista_similares = lista_similares.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Dif_Similarity':'Diferença de Similaridade'})

                    # Lista de Jogadores Similares Ordenados segundo o Rating
                    st.markdown("<h4 style='text-align: center;'>30 Jogadores + Similares</b></h4>", unsafe_allow_html=True)
                    #st.dataframe(lista_similares, use_container_width=True, hide_index=True)
                    st.markdown("---")

                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index(drop=True)
                        # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                        formatter = {"Rating": "{:.3f}", "Índice de Similaridade": "{:.2f}", "Diferença de Similaridade": "{:.2f}"}  # Format the 'Rating' column to 3 decimal places
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px',
                                            'font-size': '15px'})

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML without the index and display it
                        styled_html = style_table(lista_similares).to_html(escape=False, index=False, hide_index=True)
                        st.markdown(styled_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    # Lista de Latinos
                    selected_latam = selected.iloc[1:31, :]
                    selected_latam = selected_latam[(selected_latam["Nacionalidade"] == "Argentina")|(selected_latam["Nacionalidade"] == "Brazil")
                                        |(selected_latam["Nacionalidade"] == "Bolivia")|(selected_latam["Nacionalidade"] == "Chile")
                                        |(selected_latam["Nacionalidade"] == "Colombia")|(selected_latam["Nacionalidade"] == "Costa Rica")
                                        |(selected_latam["Nacionalidade"] == "Ecuador")|(selected_latam["Nacionalidade"] == "Mexico")
                                        |(selected_latam["Nacionalidade"] == "Panama")|(selected_latam["Nacionalidade"] == "Paraguay")
                                        |(selected_latam["Nacionalidade"] == "Peru")|(selected_latam["Nacionalidade"] == "Uruguay")
                                        |(selected_latam["Nacionalidade"] == "Venezuela")]
                    lista_similares_latam = selected_latam.iloc[0:30, :]
                    lista_similares_latam = lista_similares_latam.sort_values(by="Rating", ascending = False)

                    #Texto para os Gráficos
                    st.markdown("<h4 style='text-align: center;'><br>5 Jogadores Latinos Similares Melhor Ranquedos</b></h4>", unsafe_allow_html=True)
                    st.markdown("---")    


                    # Gerar Gráficos com os 5 melhores
                    # Arquivo para o Gráfico
                    Role_9_Mean_Charts = lista_similares_latam.iloc[:, np.r_[0, 2, 21, 27:31]]
                    target = target.iloc[:, np.r_[0, 2, 21, 27:31]]
                    # Renomeando Colunas
                    Role_9_Mean_Charts = Role_9_Mean_Charts.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 
                                                                            'Duelos_Defensivos_Ganhos_Percentil':'Duelos_Defensivos_Ganhos', 
                                                                            'Duelos_Aéreos_Ganhos_Percentil':'Duelos_Aéreos_Ganhos',
                                                                            'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos'})
                    
                    target = target.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 
                                                                            'Duelos_Defensivos_Ganhos_Percentil':'Duelos_Defensivos_Ganhos', 
                                                                            'Duelos_Aéreos_Ganhos_Percentil':'Duelos_Aéreos_Ganhos',
                                                                            'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos'})
                    
                    #Dropping Atleta-alvo
                    Role_9_Mean_Charts = Role_9_Mean_Charts[Role_9_Mean_Charts['Atleta'] != jogador_similar] 
                    #Extraindo 5 melhores
                    Role_9_Mean_Charts = Role_9_Mean_Charts.iloc[0:5, :]


                    #Primeiro Gráfico
                    Role_9_first = Role_9_Mean_Charts.iloc[0:1, :]
                    Role_9_first = pd.concat([Role_9_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_9_first.iat[0, 1]
                    jogadores_clube = Role_9_first.iat[0, 2]
                    jogadores_liga = Role_9_first.iat[0, 3]
                    alvo = Role_9_first.iat[1, 1]
                    alvo_clube = Role_9_first.iat[1, 2]
                    alvo_liga = Role_9_first.iat[1, 3]

                    #Splitting Data
                    Role_9_first_1 = Role_9_first.iloc[:, np.r_[0:3, 3:8]]

                    # Preparing Graph 1
                    params = list(Role_9_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_9_first_1[params][x])
                        a = 0
                        b = max(Role_9_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_9_first_1['Atleta'])):
                        if Role_9_first_1['Atleta'][x] == jogadores:
                            a_values = Role_9_first_1.iloc[x].values.tolist()
                        if Role_9_first_1['Atleta'][x] == alvo:
                            b_values = Role_9_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    ############################################################################

                    #Segundo Gráfico
                    Role_9_first = Role_9_Mean_Charts.iloc[1:2, :]
                    Role_9_first = pd.concat([Role_9_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_9_first.iat[0, 1]
                    jogadores_clube = Role_9_first.iat[0, 2]
                    jogadores_liga = Role_9_first.iat[0, 3]

                    #Splitting Data
                    Role_9_first_1 = Role_9_first.iloc[:, np.r_[0:3, 3:8]]

                    # Preparing Graph 1
                    params = list(Role_9_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_9_first_1[params][x])
                        a = 0
                        b = max(Role_9_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_9_first_1['Atleta'])):
                        if Role_9_first_1['Atleta'][x] == jogadores:
                            a_values = Role_9_first_1.iloc[x].values.tolist()
                        if Role_9_first_1['Atleta'][x] == alvo:
                            b_values = Role_9_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    ############################################################################

                    #Terceiro Gráfico
                    Role_9_first = Role_9_Mean_Charts.iloc[2:3, :]
                    Role_9_first = pd.concat([Role_9_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_9_first.iat[0, 1]
                    jogadores_clube = Role_9_first.iat[0, 2]
                    jogadores_liga = Role_9_first.iat[0, 3]

                    #Splitting Data
                    Role_9_first_1 = Role_9_first.iloc[:, np.r_[0:3, 3:8]]

                    # Preparing Graph 1
                    params = list(Role_9_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_9_first_1[params][x])
                        a = 0
                        b = max(Role_9_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_9_first_1['Atleta'])):
                        if Role_9_first_1['Atleta'][x] == jogadores:
                            a_values = Role_9_first_1.iloc[x].values.tolist()
                        if Role_9_first_1['Atleta'][x] == alvo:
                            b_values = Role_9_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Quarto Gráfico
                    Role_9_first = Role_9_Mean_Charts.iloc[3:4, :]
                    Role_9_first = pd.concat([Role_9_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_9_first.iat[0, 1]
                    jogadores_clube = Role_9_first.iat[0, 2]
                    jogadores_liga = Role_9_first.iat[0, 3]
 
                    #Splitting Data
                    Role_9_first_1 = Role_9_first.iloc[:, np.r_[0:3, 3:8]]

                    # Preparing Graph 1
                    params = list(Role_9_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_9_first_1[params][x])
                        a = 0
                        b = max(Role_9_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_9_first_1['Atleta'])):
                        if Role_9_first_1['Atleta'][x] == jogadores:
                            a_values = Role_9_first_1.iloc[x].values.tolist()
                        if Role_9_first_1['Atleta'][x] == alvo:
                            b_values = Role_9_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Quinto Gráfico
                    Role_9_first = Role_9_Mean_Charts.iloc[4:5, :]
                    Role_9_first = pd.concat([Role_9_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_9_first.iat[0, 1]
                    jogadores_clube = Role_9_first.iat[0, 2]
                    jogadores_liga = Role_9_first.iat[0, 3]

                    #Splitting Data
                    Role_9_first_1 = Role_9_first.iloc[:, np.r_[0:3, 3:8]]

                    # Preparing Graph 1
                    params = list(Role_9_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_9_first_1[params][x])
                        a = 0
                        b = max(Role_9_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_9_first_1['Atleta'])):
                        if Role_9_first_1['Atleta'][x] == jogadores:
                            a_values = Role_9_first_1.iloc[x].values.tolist()
                        if Role_9_first_1['Atleta'][x] == alvo:
                            b_values = Role_9_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ########################################################################################################
                    ########################################################################################################
                    ########################################################################################################
                    ########################################################################################################

                if perfil_similar == ("Primeiro Volante Construtor"):
                ###############################################################################
                ###########################################################################
                    # PRIMEIRO VOLANTE CONSTRUTOR
                    # Texto de Abertura>
                    markdown_amount_1 = f"<div style='text-align:center; font-size:{fontsize}px'>{jogador_similar:}</div>"
                    st.markdown("<h4 style='text-align: center;'>Jogador Selecionado</b></h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_1, unsafe_allow_html=True)
                    st.markdown("---")

                    #Carregando arquivo de dados
                    Role_10_data = pd.read_csv('10_Role_Volante_Construtor_Similarity.csv')
                    Role_10_data = Role_10_data.drop(Role_10_data.columns[0:4], axis=1)
                    Role_10_data.reset_index(drop=True, inplace=True)

                    # Step : Defina o atleta-alvo
                    #base_bruta_similaridade = pd.read_csv("base_bruta_similaridade.csv")
                    target = Role_10_data.loc[(Role_10_data['Atleta'] == jogador_similar)]

                    #Step : Definindo "ID-alvo"
                    given_ID = target.iat[0, -1]
                    
                    selected = Role_10_data

                    # Step 9: Add columns "1", "2", "3" to Role_10_data

                    selected['1'] = given_ID[0]
                    selected['2'] = given_ID[1]
                    selected['3'] = given_ID[2]
                    selected['4'] = given_ID[3]

                    # Assigning correct columns to 1, 2, 3

                    if given_ID[0] == "A":
                        selected['1'] = selected["A1"]
                    elif given_ID[0] == "B":
                        selected['1'] = selected["B1"]
                    elif given_ID[0] == "C":
                        selected['1'] = selected["C1"]
                    elif given_ID[0] == "D":
                        selected['1'] = selected["D1"]
                    elif given_ID[0] == "E":
                        selected['1'] = selected["E1"]
                    elif given_ID[0] == "F":
                        selected['1'] = selected["F1"]
                    elif given_ID[0] == "G":
                        selected['1'] = selected["G1"]
                    elif given_ID[0] == "H":
                        selected['1'] = selected["H1"]
                    elif given_ID[0] == "I":
                        selected['1'] = selected["I1"]


                    if given_ID[1] == "A":
                        selected['2'] = selected["A1"]
                    elif given_ID[1] == "B":
                        selected['2'] = selected["B1"]
                    elif given_ID[1] == "C":
                        selected['2'] = selected["C1"]
                    elif given_ID[1] == "D":
                        selected['2'] = selected["D1"]
                    elif given_ID[1] == "E":
                        selected['2'] = selected["E1"]
                    elif given_ID[1] == "F":
                        selected['2'] = selected["F1"]
                    elif given_ID[1] == "G":
                        selected['2'] = selected["G1"]
                    elif given_ID[1] == "H":
                        selected['2'] = selected["H1"]
                    elif given_ID[1] == "I":
                        selected['2'] = selected["I1"]
                    
                    if given_ID[2] == "A":
                        selected['3'] = selected["A1"]
                    elif given_ID[2] == "B":
                        selected['3'] = selected["B1"]
                    elif given_ID[2] == "C":
                        selected['3'] = selected["C1"]
                    elif given_ID[2] == "D":
                        selected['3'] = selected["D1"]
                    elif given_ID[2] == "E":
                        selected['3'] = selected["E1"]
                    elif given_ID[2] == "F":
                        selected['3'] = selected["F1"]
                    elif given_ID[2] == "G":
                        selected['3'] = selected["G1"]
                    elif given_ID[2] == "H":
                        selected['3'] = selected["H1"]
                    elif given_ID[2] == "I":
                        selected['3'] = selected["I1"]

                    if given_ID[3] == "A":
                        selected['4'] = selected["A1"]
                    elif given_ID[3] == "B":
                        selected['4'] = selected["B1"]
                    elif given_ID[3] == "C":
                        selected['4'] = selected["C1"]
                    elif given_ID[3] == "D":
                        selected['4'] = selected["D1"]
                    elif given_ID[3] == "E":
                        selected['4'] = selected["E1"]
                    elif given_ID[3] == "F":
                        selected['4'] = selected["F1"]
                    elif given_ID[3] == "G":
                        selected['4'] = selected["G1"]
                    elif given_ID[3] == "H":
                        selected['4'] = selected["H1"]
                    elif given_ID[3] == "I":
                        selected['4'] = selected["I1"]

                    # Applying PCA for Scaled Selected Columns

                    leagues = ["ARG1", "AUT", "BEL1", "BRA1", "BRA2", "BUL", "CHN", 
                            "COL", "DEN", "ENG1", "ENG2", "FRA1", "FRA2", "GER1", 
                            "GER2", "GRE", "HOL", "ITA1", "ITA2", "JAP", "MEX", "PAR", 
                            "POR1", "QAT", "RUS", "SAUD", "SCT", "SER", "SPA1", 
                            "SPA2", "SWZ", "TUR", "UAE", "UKR", "URU", "USA"]

                    # Iterate over each league
                    for league in leagues:

                        # Extract columns 46 through 50
                        VolanteConstrutor = selected.iloc[:, np.r_[-4:0]]

                        # Defining Columns
                        VolanteConstrutor_columns = VolanteConstrutor.columns

                        # Applying PCA
                        pca = PCA(n_components=2)
                        principalComponents = pca.fit_transform(VolanteConstrutor)

                        # Create a DataFrame with loadings
                        LoadingsVolanteConstrutor = pd.DataFrame(pca.components_.T**2, index=VolanteConstrutor_columns, columns=['loading factor 1', 'loading factor 2'])

                        # Multiplying Matrices to obtain Pre_Variables
                        Similarity = pd.DataFrame(np.matmul(VolanteConstrutor, LoadingsVolanteConstrutor['loading factor 1']) + np.matmul(VolanteConstrutor, LoadingsVolanteConstrutor['loading factor 2']),
                                                columns=["Similarity"])

                    # Rebuilding Full Training Set
                    selected = selected.join(Similarity)

                    ##############################################################
                    ##############################################################

                    # Lista de Similares
                    # Initialize an empty list to store DataFrames
                    target = selected.loc[(Role_10_data['Atleta'] == jogador_similar) & (Role_10_data['Liga'] == liga_similar)]
                    target_similarity = target.iat[0, -1]

                    selected["Índice de Similaridade"] = (selected['Similarity']/target_similarity)*100
                    selected["Índice de Similaridade"] = round(selected["Índice de Similaridade"], 2)

                    target = selected.loc[(selected['Atleta'] == jogador_similar) & (selected['Liga'] == liga_similar)]
                    selected['Dif_Similarity'] = abs(selected["Índice de Similaridade"] - 100)

                    selected = selected.sort_values(by='Dif_Similarity')

                    lista_similares = selected.iloc[1:31, np.r_[0, 2, 26, 31, -2:0]]
                    lista_similares = lista_similares.sort_values(by='Rating', ascending=False)
                    lista_similares = lista_similares.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Dif_Similarity':'Diferença de Similaridade'})

                    # Lista de Jogadores Similares Ordenados segundo o Rating
                    st.markdown("<h4 style='text-align: center;'>30 Jogadores + Similares</b></h4>", unsafe_allow_html=True)
                    #st.dataframe(lista_similares, use_container_width=True, hide_index=True)
                    st.markdown("---")

                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index(drop=True)
                        # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                        formatter = {"Rating": "{:.3f}", "Índice de Similaridade": "{:.2f}", "Diferença de Similaridade": "{:.2f}"}  # Format the 'Rating' column to 3 decimal places
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px',
                                            'font-size': '15px'})

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML without the index and display it
                        styled_html = style_table(lista_similares).to_html(escape=False, index=False, hide_index=True)
                        st.markdown(styled_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    # Lista de Latinos
                    selected_latam = selected.iloc[1:31, :]
                    selected_latam = selected_latam[(selected_latam["Nacionalidade"] == "Argentina")|(selected_latam["Nacionalidade"] == "Brazil")
                                        |(selected_latam["Nacionalidade"] == "Bolivia")|(selected_latam["Nacionalidade"] == "Chile")
                                        |(selected_latam["Nacionalidade"] == "Colombia")|(selected_latam["Nacionalidade"] == "Costa Rica")
                                        |(selected_latam["Nacionalidade"] == "Ecuador")|(selected_latam["Nacionalidade"] == "Mexico")
                                        |(selected_latam["Nacionalidade"] == "Panama")|(selected_latam["Nacionalidade"] == "Paraguay")
                                        |(selected_latam["Nacionalidade"] == "Peru")|(selected_latam["Nacionalidade"] == "Uruguay")
                                        |(selected_latam["Nacionalidade"] == "Venezuela")]
                    lista_similares_latam = selected_latam.iloc[0:30, :]
                    lista_similares_latam = lista_similares_latam.sort_values(by="Rating", ascending = False)

                    #Texto para os Gráficos
                    st.markdown("<h4 style='text-align: center;'><br>5 Jogadores Latinos Similares Melhor Ranquedos</b></h4>", unsafe_allow_html=True)
                    st.markdown("---")    


                    # Gerar Gráficos com os 5 melhores
                    # Arquivo para o Gráfico
                    Role_10_Mean_Charts = lista_similares_latam.iloc[:, np.r_[0, 2, 26, 32:41]]
                    target = target.iloc[:, np.r_[0, 2, 26, 32:41]]
                    # Renomeando Colunas
                    Role_10_Mean_Charts = Role_10_Mean_Charts.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 
                                                            'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 
                                                            'Passes_Frontais_Certos_Percentil':'Passes_Frontais_Certos', 
                                                            'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos',
                                                            'Ações_Ofensivas_BemSucedidas_Percentil':'Ações_Ofensivas_BemSucedidas', 
                                                            'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos', 
                                                            'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos',
                                                            'Corridas_Progressivas_Percentil':'Corridas_Progressivas', 
                                                            'Passes_TerçoFinal_Certos_Percentil':'Passes_TerçoFinal_Certos'})
                    
                    target = target.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 
                                                            'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 
                                                            'Passes_Frontais_Certos_Percentil':'Passes_Frontais_Certos', 
                                                            'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos',
                                                            'Ações_Ofensivas_BemSucedidas_Percentil':'Ações_Ofensivas_BemSucedidas', 
                                                            'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos', 
                                                            'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos',
                                                            'Corridas_Progressivas_Percentil':'Corridas_Progressivas', 
                                                            'Passes_TerçoFinal_Certos_Percentil':'Passes_TerçoFinal_Certos'})
                    
                    #Dropping Atleta-alvo
                    Role_10_Mean_Charts = Role_10_Mean_Charts[Role_10_Mean_Charts['Atleta'] != jogador_similar] 
                    #Extraindo 5 melhores
                    Role_10_Mean_Charts = Role_10_Mean_Charts.iloc[0:5, :]


                    #Primeiro Gráfico
                    Role_10_first = Role_10_Mean_Charts.iloc[0:1, :]
                    Role_10_first = pd.concat([Role_10_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_10_first.iat[0, 1]
                    jogadores_clube = Role_10_first.iat[0, 2]
                    jogadores_liga = Role_10_first.iat[0, 3]
                    alvo = Role_10_first.iat[1, 1]
                    alvo_clube = Role_10_first.iat[1, 2]
                    alvo_liga = Role_10_first.iat[1, 3]

                    #Splitting Data
                    Role_10_first_1 = Role_10_first.iloc[:, np.r_[0:3, 3:13]]

                    # Preparing Graph 1
                    params = list(Role_10_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_10_first_1[params][x])
                        a = 0
                        b = max(Role_10_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_10_first_1['Atleta'])):
                        if Role_10_first_1['Atleta'][x] == jogadores:
                            a_values = Role_10_first_1.iloc[x].values.tolist()
                        if Role_10_first_1['Atleta'][x] == alvo:
                            b_values = Role_10_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    ############################################################################

                    #Segundo Gráfico
                    Role_10_first = Role_10_Mean_Charts.iloc[1:2, :]
                    Role_10_first = pd.concat([Role_10_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_10_first.iat[0, 1]
                    jogadores_clube = Role_10_first.iat[0, 2]
                    jogadores_liga = Role_10_first.iat[0, 3]

                    #Splitting Data
                    Role_10_first_1 = Role_10_first.iloc[:, np.r_[0:3, 3:13]]

                    # Preparing Graph 1
                    params = list(Role_10_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_10_first_1[params][x])
                        a = 0
                        b = max(Role_10_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_10_first_1['Atleta'])):
                        if Role_10_first_1['Atleta'][x] == jogadores:
                            a_values = Role_10_first_1.iloc[x].values.tolist()
                        if Role_10_first_1['Atleta'][x] == alvo:
                            b_values = Role_10_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    ############################################################################

                    #Terceiro Gráfico
                    Role_10_first = Role_10_Mean_Charts.iloc[2:3, :]
                    Role_10_first = pd.concat([Role_10_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_10_first.iat[0, 1]
                    jogadores_clube = Role_10_first.iat[0, 2]
                    jogadores_liga = Role_10_first.iat[0, 3]

                    #Splitting Data
                    Role_10_first_1 = Role_10_first.iloc[:, np.r_[0:3, 3:13]]

                    # Preparing Graph 1
                    params = list(Role_10_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_10_first_1[params][x])
                        a = 0
                        b = max(Role_10_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_10_first_1['Atleta'])):
                        if Role_10_first_1['Atleta'][x] == jogadores:
                            a_values = Role_10_first_1.iloc[x].values.tolist()
                        if Role_10_first_1['Atleta'][x] == alvo:
                            b_values = Role_10_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    ############################################################################

                    #Quarto Gráfico
                    Role_10_first = Role_10_Mean_Charts.iloc[3:4, :]
                    Role_10_first = pd.concat([Role_10_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_10_first.iat[0, 1]
                    jogadores_clube = Role_10_first.iat[0, 2]
                    jogadores_liga = Role_10_first.iat[0, 3]

                    #Splitting Data
                    Role_10_first_1 = Role_10_first.iloc[:, np.r_[0:3, 3:13]]

                    # Preparing Graph 1
                    params = list(Role_10_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_10_first_1[params][x])
                        a = 0
                        b = max(Role_10_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_10_first_1['Atleta'])):
                        if Role_10_first_1['Atleta'][x] == jogadores:
                            a_values = Role_10_first_1.iloc[x].values.tolist()
                        if Role_10_first_1['Atleta'][x] == alvo:
                            b_values = Role_10_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    ############################################################################

                    #Quinto Gráfico
                    Role_10_first = Role_10_Mean_Charts.iloc[4:5, :]
                    Role_10_first = pd.concat([Role_10_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_10_first.iat[0, 1]
                    jogadores_clube = Role_10_first.iat[0, 2]
                    jogadores_liga = Role_10_first.iat[0, 3]

                    #Splitting Data
                    Role_10_first_1 = Role_10_first.iloc[:, np.r_[0:3, 3:13]]

                    # Preparing Graph 1
                    params = list(Role_10_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_10_first_1[params][x])
                        a = 0
                        b = max(Role_10_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_10_first_1['Atleta'])):
                        if Role_10_first_1['Atleta'][x] == jogadores:
                            a_values = Role_10_first_1.iloc[x].values.tolist()
                        if Role_10_first_1['Atleta'][x] == alvo:
                            b_values = Role_10_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ########################################################################################################
                    ########################################################################################################
                    ########################################################################################################
                    ########################################################################################################

                if perfil_similar == ("Primeiro Volante Equilibrado"):
                ###############################################################################
                ###########################################################################
                    # PRIMEIRO VOLANTE EQUILIBRADO
                    # Texto de Abertura>
                    markdown_amount_1 = f"<div style='text-align:center; font-size:{fontsize}px'>{jogador_similar:}</div>"
                    st.markdown("<h4 style='text-align: center;'>Jogador Selecionado</b></h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_1, unsafe_allow_html=True)
                    st.markdown("---")

                    #Carregando arquivo de dados
                    Role_11_data = pd.read_csv('11_Role_Volante_Equilibrado_Similarity.csv')
                    Role_11_data = Role_11_data.drop(Role_11_data.columns[0:4], axis=1)
                    Role_11_data.reset_index(drop=True, inplace=True)

                    # Step : Defina o atleta-alvo
                    #base_bruta_similaridade = pd.read_csv("base_bruta_similaridade.csv")
                    target = Role_11_data.loc[(Role_11_data['Atleta'] == jogador_similar)]

                    #Step : Definindo "ID-alvo"
                    given_ID = target.iat[0, -1]
                    
                    selected = Role_11_data

                    # Step 9: Add columns "1", "2", "3" to Role_11_data

                    selected['1'] = given_ID[0]
                    selected['2'] = given_ID[1]
                    selected['3'] = given_ID[2]
                    selected['4'] = given_ID[3]
                    selected['5'] = given_ID[4]


                    # Assigning correct columns to 1, 2, 3

                    if given_ID[0] == "A":
                        selected['1'] = selected["A1"]
                    elif given_ID[0] == "B":
                        selected['1'] = selected["B1"]
                    elif given_ID[0] == "C":
                        selected['1'] = selected["C1"]
                    elif given_ID[0] == "D":
                        selected['1'] = selected["D1"]
                    elif given_ID[0] == "E":
                        selected['1'] = selected["E1"]
                    elif given_ID[0] == "F":
                        selected['1'] = selected["F1"]
                    elif given_ID[0] == "G":
                        selected['1'] = selected["G1"]
                    elif given_ID[0] == "H":
                        selected['1'] = selected["H1"]
                    elif given_ID[0] == "I":
                        selected['1'] = selected["I1"]
                    elif given_ID[0] == "J":
                        selected['1'] = selected["J1"]
                    elif given_ID[0] == "K":
                        selected['1'] = selected["K1"]


                    if given_ID[1] == "A":
                        selected['2'] = selected["A1"]
                    elif given_ID[1] == "B":
                        selected['2'] = selected["B1"]
                    elif given_ID[1] == "C":
                        selected['2'] = selected["C1"]
                    elif given_ID[1] == "D":
                        selected['2'] = selected["D1"]
                    elif given_ID[1] == "E":
                        selected['2'] = selected["E1"]
                    elif given_ID[1] == "F":
                        selected['2'] = selected["F1"]
                    elif given_ID[1] == "G":
                        selected['2'] = selected["G1"]
                    elif given_ID[1] == "H":
                        selected['2'] = selected["H1"]
                    elif given_ID[1] == "I":
                        selected['2'] = selected["I1"]
                    elif given_ID[1] == "J":
                        selected['2'] = selected["J1"]
                    elif given_ID[1] == "K":
                        selected['2'] = selected["K1"]
                    
                    
                    if given_ID[2] == "A":
                        selected['3'] = selected["A1"]
                    elif given_ID[2] == "B":
                        selected['3'] = selected["B1"]
                    elif given_ID[2] == "C":
                        selected['3'] = selected["C1"]
                    elif given_ID[2] == "D":
                        selected['3'] = selected["D1"]
                    elif given_ID[2] == "E":
                        selected['3'] = selected["E1"]
                    elif given_ID[2] == "F":
                        selected['3'] = selected["F1"]
                    elif given_ID[2] == "G":
                        selected['3'] = selected["G1"]
                    elif given_ID[2] == "H":
                        selected['3'] = selected["H1"]
                    elif given_ID[2] == "I":
                        selected['3'] = selected["I1"]
                    elif given_ID[2] == "J":
                        selected['3'] = selected["J1"]
                    elif given_ID[2] == "K":
                        selected['3'] = selected["K1"]


                    if given_ID[3] == "A":
                        selected['4'] = selected["A1"]
                    elif given_ID[3] == "B":
                        selected['4'] = selected["B1"]
                    elif given_ID[3] == "C":
                        selected['4'] = selected["C1"]
                    elif given_ID[3] == "D":
                        selected['4'] = selected["D1"]
                    elif given_ID[3] == "E":
                        selected['4'] = selected["E1"]
                    elif given_ID[3] == "F":
                        selected['4'] = selected["F1"]
                    elif given_ID[3] == "G":
                        selected['4'] = selected["G1"]
                    elif given_ID[3] == "H":
                        selected['4'] = selected["H1"]
                    elif given_ID[3] == "I":
                        selected['4'] = selected["I1"]
                    elif given_ID[3] == "J":
                        selected['4'] = selected["J1"]
                    elif given_ID[3] == "K":
                        selected['4'] = selected["K1"]


                    if given_ID[4] == "A":
                        selected['5'] = selected["A1"]
                    elif given_ID[4] == "B":
                        selected['5'] = selected["B1"]
                    elif given_ID[4] == "C":
                        selected['5'] = selected["C1"]
                    elif given_ID[4] == "D":
                        selected['5'] = selected["D1"]
                    elif given_ID[4] == "E":
                        selected['5'] = selected["E1"]
                    elif given_ID[4] == "F":
                        selected['5'] = selected["F1"]
                    elif given_ID[4] == "G":
                        selected['5'] = selected["G1"]
                    elif given_ID[4] == "H":
                        selected['5'] = selected["H1"]
                    elif given_ID[4] == "I":
                        selected['5'] = selected["I1"]
                    elif given_ID[4] == "J":
                        selected['5'] = selected["J1"]
                    elif given_ID[4] == "K":
                        selected['5'] = selected["K1"]


                    # Applying PCA for Scaled Selected Columns

                    leagues = ["ARG1", "AUT", "BEL1", "BRA1", "BRA2", "BUL", "CHN", 
                            "COL", "DEN", "ENG1", "ENG2", "FRA1", "FRA2", "GER1", 
                            "GER2", "GRE", "HOL", "ITA1", "ITA2", "JAP", "MEX", "PAR", 
                            "POR1", "QAT", "RUS", "SAUD", "SCT", "SER", "SPA1", 
                            "SPA2", "SWZ", "TUR", "UAE", "UKR", "URU", "USA"]

                    # Iterate over each league
                    for league in leagues:

                        # Extract columns 46 through 50
                        Volante = selected.iloc[:, np.r_[-5:0]]

                        # Defining Columns
                        Volante_columns = Volante.columns

                        # Applying PCA
                        pca = PCA(n_components=2)
                        principalComponents = pca.fit_transform(Volante)

                        # Create a DataFrame with loadings
                        LoadingsVolante = pd.DataFrame(pca.components_.T**2, index=Volante_columns, columns=['loading factor 1', 'loading factor 2'])

                        # Multiplying Matrices to obtain Pre_Variables
                        Similarity = pd.DataFrame(np.matmul(Volante, LoadingsVolante['loading factor 1']) + np.matmul(Volante, LoadingsVolante['loading factor 2']),
                                                columns=["Similarity"])

                    # Rebuilding Full Training Set
                    selected = selected.join(Similarity)

                    ##############################################################
                    ##############################################################

                    # Lista de Similares
                    # Initialize an empty list to store DataFrames
                    target = selected.loc[(Role_11_data['Atleta'] == jogador_similar) & (Role_11_data['Liga'] == liga_similar)]
                    target_similarity = target.iat[0, -1]

                    selected["Índice de Similaridade"] = (selected['Similarity']/target_similarity)*100
                    selected["Índice de Similaridade"] = round(selected["Índice de Similaridade"], 2)

                    target = selected.loc[(selected['Atleta'] == jogador_similar) & (selected['Liga'] == liga_similar)]
                    selected['Dif_Similarity'] = abs(selected["Índice de Similaridade"] - 100)

                    selected = selected.sort_values(by='Dif_Similarity')

                    lista_similares = selected.iloc[1:31, np.r_[0, 2, 28, 33, -2:0]]
                    lista_similares = lista_similares.sort_values(by='Rating', ascending=False)
                    lista_similares = lista_similares.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Dif_Similarity':'Diferença de Similaridade'})

                    # Lista de Jogadores Similares Ordenados segundo o Rating
                    st.markdown("<h4 style='text-align: center;'>30 Jogadores + Similares</b></h4>", unsafe_allow_html=True)
                    #st.dataframe(lista_similares, use_container_width=True, hide_index=True)
                    st.markdown("---")

                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index(drop=True)
                        # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                        formatter = {"Rating": "{:.3f}", "Índice de Similaridade": "{:.2f}", "Diferença de Similaridade": "{:.2f}"}  # Format the 'Rating' column to 3 decimal places
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px',
                                            'font-size': '15px'})

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML without the index and display it
                        styled_html = style_table(lista_similares).to_html(escape=False, index=False, hide_index=True)
                        st.markdown(styled_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    # Lista de Latinos
                    selected_latam = selected.iloc[1:31, :]
                    selected_latam = selected_latam[(selected_latam["Nacionalidade"] == "Argentina")|(selected_latam["Nacionalidade"] == "Brazil")
                                        |(selected_latam["Nacionalidade"] == "Bolivia")|(selected_latam["Nacionalidade"] == "Chile")
                                        |(selected_latam["Nacionalidade"] == "Colombia")|(selected_latam["Nacionalidade"] == "Costa Rica")
                                        |(selected_latam["Nacionalidade"] == "Ecuador")|(selected_latam["Nacionalidade"] == "Mexico")
                                        |(selected_latam["Nacionalidade"] == "Panama")|(selected_latam["Nacionalidade"] == "Paraguay")
                                        |(selected_latam["Nacionalidade"] == "Peru")|(selected_latam["Nacionalidade"] == "Uruguay")
                                        |(selected_latam["Nacionalidade"] == "Venezuela")]
                    lista_similares_latam = selected_latam.iloc[0:30, :]
                    lista_similares_latam = lista_similares_latam.sort_values(by="Rating", ascending = False)

                    #Texto para os Gráficos
                    st.markdown("<h4 style='text-align: center;'><br>5 Jogadores Latinos Similares Melhor Ranquedos</b></h4>", unsafe_allow_html=True)
                    st.markdown("---")    


                    # Gerar Gráficos com os 5 melhores
                    # Arquivo para o Gráfico
                    Role_11_Mean_Charts = lista_similares_latam.iloc[:, np.r_[0, 2, 28, 34:45]]
                    target = target.iloc[:, np.r_[0, 2, 28, 34:45]]
                    # Renomeando Colunas
                    Role_11_Mean_Charts = Role_11_Mean_Charts.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 'Duelos_Defensivos_Ganhos_Percentil':'Duelos_Defensivos_Ganhos', 'Duelos_Aéreos_Ganhos_Percentil':'Duelos_Aéreos_Ganhos',
                                                                                'Finalizações_Bloqueadas_Percentil':'Finalizações_Bloqueadas', 'Interceptações_Ajustadas_a_Posse_Percentil':'Interceptações_Ajustadas_a_Posse', 'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 
                                                                                'Passes_Frontais_Certos_Percentil':'Passes_Frontais_Certos', 'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos', 'Passes_Laterais_Certos_Percentil':'Passes_Laterais_Certos', 'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos', 
                                                                                'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos', 'Corridas_Progressivas_Percentil':'Corridas_Progressivas', 'Passes_TerçoFinal_Certos_Percentil':'Passes_TerçoFinal_Certos'})
                    
                    target = target.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 'Duelos_Defensivos_Ganhos_Percentil':'Duelos_Defensivos_Ganhos', 'Duelos_Aéreos_Ganhos_Percentil':'Duelos_Aéreos_Ganhos',
                                                                                'Finalizações_Bloqueadas_Percentil':'Finalizações_Bloqueadas', 'Interceptações_Ajustadas_a_Posse_Percentil':'Interceptações_Ajustadas_a_Posse', 'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 
                                                                                'Passes_Frontais_Certos_Percentil':'Passes_Frontais_Certos', 'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos', 'Passes_Laterais_Certos_Percentil':'Passes_Laterais_Certos', 'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos', 
                                                                                'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos', 'Corridas_Progressivas_Percentil':'Corridas_Progressivas', 'Passes_TerçoFinal_Certos_Percentil':'Passes_TerçoFinal_Certos'})
                    
                    #Dropping Atleta-alvo
                    Role_11_Mean_Charts = Role_11_Mean_Charts[Role_11_Mean_Charts['Atleta'] != jogador_similar] 
                    #Extraindo 5 melhores
                    Role_11_Mean_Charts = Role_11_Mean_Charts.iloc[0:5, :]


                    #Primeiro Gráfico
                    Role_11_first = Role_11_Mean_Charts.iloc[0:1, :]
                    Role_11_first = pd.concat([Role_11_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_11_first.iat[0, 1]
                    jogadores_clube = Role_11_first.iat[0, 2]
                    jogadores_liga = Role_11_first.iat[0, 3]
                    alvo = Role_11_first.iat[1, 1]
                    alvo_clube = Role_11_first.iat[1, 2]
                    alvo_liga = Role_11_first.iat[1, 3]

                    #Splitting Data
                    Role_11_first_1 = Role_11_first.iloc[:, np.r_[0:3, 3:9]]
                    Role_11_first_2 = Role_11_first.iloc[:, np.r_[0:3, 9:15]]

                    # Preparing Graph 1
                    params = list(Role_11_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_11_first_1[params][x])
                        a = 0
                        b = max(Role_11_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_11_first_1['Atleta'])):
                        if Role_11_first_1['Atleta'][x] == jogadores:
                            a_values = Role_11_first_1.iloc[x].values.tolist()
                        if Role_11_first_1['Atleta'][x] == alvo:
                            b_values = Role_11_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_11_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_11_first_2[params][x])
                        a = 0
                        b = max(Role_11_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_11_first_2['Atleta'])):
                        if Role_11_first_2['Atleta'][x] == jogadores:
                            a_values = Role_11_first_2.iloc[x].values.tolist()
                        if Role_11_first_2['Atleta'][x] == alvo:
                            b_values = Role_11_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################

                    #Segundo Gráfico
                    Role_11_first = Role_11_Mean_Charts.iloc[1:2, :]
                    Role_11_first = pd.concat([Role_11_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_11_first.iat[0, 1]
                    jogadores_clube = Role_11_first.iat[0, 2]
                    jogadores_liga = Role_11_first.iat[0, 3]
                    #alvo = Role_11_first.iat[1, 1]
                    #alvo_clube = Role_11_first.iat[1, 2]
                    #alvo_liga = Role_11_first.iat[1, 3]

                    #Splitting Data
                    Role_11_first_1 = Role_11_first.iloc[:, np.r_[0:3, 3:9]]
                    Role_11_first_2 = Role_11_first.iloc[:, np.r_[0:3, 9:15]]

                    # Preparing Graph 1
                    params = list(Role_11_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_11_first_1[params][x])
                        a = 0
                        b = max(Role_11_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_11_first_1['Atleta'])):
                        if Role_11_first_1['Atleta'][x] == jogadores:
                            a_values = Role_11_first_1.iloc[x].values.tolist()
                        if Role_11_first_1['Atleta'][x] == alvo:
                            b_values = Role_11_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_11_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_11_first_2[params][x])
                        a = 0
                        b = max(Role_11_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_11_first_2['Atleta'])):
                        if Role_11_first_2['Atleta'][x] == jogadores:
                            a_values = Role_11_first_2.iloc[x].values.tolist()
                        if Role_11_first_2['Atleta'][x] == alvo:
                            b_values = Role_11_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Terceiro Gráfico
                    Role_11_first = Role_11_Mean_Charts.iloc[2:3, :]
                    Role_11_first = pd.concat([Role_11_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_11_first.iat[0, 1]
                    jogadores_clube = Role_11_first.iat[0, 2]
                    jogadores_liga = Role_11_first.iat[0, 3]
                    #alvo = Role_11_first.iat[1, 1]
                    #alvo_clube = Role_11_first.iat[1, 2]
                    #alvo_liga = Role_11_first.iat[1, 3]

                    #Splitting Data
                    Role_11_first_1 = Role_11_first.iloc[:, np.r_[0:3, 3:9]]
                    Role_11_first_2 = Role_11_first.iloc[:, np.r_[0:3, 9:15]]

                    # Preparing Graph 1
                    params = list(Role_11_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_11_first_1[params][x])
                        a = 0
                        b = max(Role_11_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_11_first_1['Atleta'])):
                        if Role_11_first_1['Atleta'][x] == jogadores:
                            a_values = Role_11_first_1.iloc[x].values.tolist()
                        if Role_11_first_1['Atleta'][x] == alvo:
                            b_values = Role_11_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_11_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_11_first_2[params][x])
                        a = 0
                        b = max(Role_11_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_11_first_2['Atleta'])):
                        if Role_11_first_2['Atleta'][x] == jogadores:
                            a_values = Role_11_first_2.iloc[x].values.tolist()
                        if Role_11_first_2['Atleta'][x] == alvo:
                            b_values = Role_11_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Quarto Gráfico
                    Role_11_first = Role_11_Mean_Charts.iloc[3:4, :]
                    Role_11_first = pd.concat([Role_11_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_11_first.iat[0, 1]
                    jogadores_clube = Role_11_first.iat[0, 2]
                    jogadores_liga = Role_11_first.iat[0, 3]
                    #alvo = Role_11_first.iat[1, 1]
                    #alvo_clube = Role_11_first.iat[1, 2]
                    #alvo_liga = Role_11_first.iat[1, 3]

                    #Splitting Data
                    Role_11_first_1 = Role_11_first.iloc[:, np.r_[0:3, 3:9]]
                    Role_11_first_2 = Role_11_first.iloc[:, np.r_[0:3, 9:15]]

                    # Preparing Graph 1
                    params = list(Role_11_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_11_first_1[params][x])
                        a = 0
                        b = max(Role_11_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_11_first_1['Atleta'])):
                        if Role_11_first_1['Atleta'][x] == jogadores:
                            a_values = Role_11_first_1.iloc[x].values.tolist()
                        if Role_11_first_1['Atleta'][x] == alvo:
                            b_values = Role_11_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_11_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_11_first_2[params][x])
                        a = 0
                        b = max(Role_11_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_11_first_2['Atleta'])):
                        if Role_11_first_2['Atleta'][x] == jogadores:
                            a_values = Role_11_first_2.iloc[x].values.tolist()
                        if Role_11_first_2['Atleta'][x] == alvo:
                            b_values = Role_11_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Quinto Gráfico
                    Role_11_first = Role_11_Mean_Charts.iloc[4:5, :]
                    Role_11_first = pd.concat([Role_11_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_11_first.iat[0, 1]
                    jogadores_clube = Role_11_first.iat[0, 2]
                    jogadores_liga = Role_11_first.iat[0, 3]
                    #alvo = Role_11_first.iat[1, 1]
                    #alvo_clube = Role_11_first.iat[1, 2]
                    #alvo_liga = Role_11_first.iat[1, 3]

                    #Splitting Data
                    Role_11_first_1 = Role_11_first.iloc[:, np.r_[0:3, 3:9]]
                    Role_11_first_2 = Role_11_first.iloc[:, np.r_[0:3, 9:15]]

                    # Preparing Graph 1
                    params = list(Role_11_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_11_first_1[params][x])
                        a = 0
                        b = max(Role_11_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_11_first_1['Atleta'])):
                        if Role_11_first_1['Atleta'][x] == jogadores:
                            a_values = Role_11_first_1.iloc[x].values.tolist()
                        if Role_11_first_1['Atleta'][x] == alvo:
                            b_values = Role_11_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_11_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_11_first_2[params][x])
                        a = 0
                        b = max(Role_11_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_11_first_2['Atleta'])):
                        if Role_11_first_2['Atleta'][x] == jogadores:
                            a_values = Role_11_first_2.iloc[x].values.tolist()
                        if Role_11_first_2['Atleta'][x] == alvo:
                            b_values = Role_11_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ########################################################################################################
                    ########################################################################################################
                    ########################################################################################################
                    ########################################################################################################

                if perfil_similar == ("Segundo Volante Box to Box"):
                ###############################################################################
                ###########################################################################
                    # PRIMEIRO VOLANTE EQUILIBRADO
                    # Texto de Abertura>
                    markdown_amount_1 = f"<div style='text-align:center; font-size:{fontsize}px'>{jogador_similar:}</div>"
                    st.markdown("<h4 style='text-align: center;'>Jogador Selecionado</b></h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_1, unsafe_allow_html=True)
                    st.markdown("---")

                    #Carregando arquivo de dados
                    Role_12_data = pd.read_csv('12_Role_Segundo_Volante_Box_to_Box_Similarity.csv')
                    Role_12_data = Role_12_data.drop(Role_12_data.columns[0:4], axis=1)
                    Role_12_data.reset_index(drop=True, inplace=True)

                    # Step : Defina o atleta-alvo
                    #base_bruta_similaridade = pd.read_csv("base_bruta_similaridade.csv")
                    target = Role_12_data.loc[(Role_12_data['Atleta'] == jogador_similar)]

                    #Step : Definindo "ID-alvo"
                    given_ID = target.iat[0, -1]
                    
                    selected = Role_12_data

                    # Step 9: Add columns "1", "2", "3" to Role_12_data

                    selected['1'] = given_ID[0]
                    selected['2'] = given_ID[1]
                    selected['3'] = given_ID[2]
                    selected['4'] = given_ID[3]
                    selected['5'] = given_ID[4]
                    
                    # Assigning correct columns to 1, 2, 3

                    if given_ID[0] == "A":
                        selected['1'] = selected["A1"]
                    elif given_ID[0] == "B":
                        selected['1'] = selected["B1"]
                    elif given_ID[0] == "C":
                        selected['1'] = selected["C1"]
                    elif given_ID[0] == "D":
                        selected['1'] = selected["D1"]
                    elif given_ID[0] == "E":
                        selected['1'] = selected["E1"]
                    elif given_ID[0] == "F":
                        selected['1'] = selected["F1"]
                    elif given_ID[0] == "G":
                        selected['1'] = selected["G1"]
                    elif given_ID[0] == "H":
                        selected['1'] = selected["H1"]
                    elif given_ID[0] == "I":
                        selected['1'] = selected["I1"]
                    elif given_ID[0] == "J":
                        selected['1'] = selected["J1"]
                    elif given_ID[0] == "K":
                        selected['1'] = selected["K1"]
                    elif given_ID[0] == "L":
                        selected['1'] = selected["L1"]
                    elif given_ID[0] == "M":
                        selected['1'] = selected["M1"]


                    if given_ID[1] == "A":
                        selected['2'] = selected["A1"]
                    elif given_ID[1] == "B":
                        selected['2'] = selected["B1"]
                    elif given_ID[1] == "C":
                        selected['2'] = selected["C1"]
                    elif given_ID[1] == "D":
                        selected['2'] = selected["D1"]
                    elif given_ID[1] == "E":
                        selected['2'] = selected["E1"]
                    elif given_ID[1] == "F":
                        selected['2'] = selected["F1"]
                    elif given_ID[1] == "G":
                        selected['2'] = selected["G1"]
                    elif given_ID[1] == "H":
                        selected['2'] = selected["H1"]
                    elif given_ID[1] == "I":
                        selected['2'] = selected["I1"]
                    elif given_ID[1] == "J":
                        selected['2'] = selected["J1"]
                    elif given_ID[1] == "K":
                        selected['2'] = selected["K1"]
                    elif given_ID[1] == "L":
                        selected['2'] = selected["L1"]
                    elif given_ID[1] == "M":
                        selected['2'] = selected["M1"]
                    
                    
                    if given_ID[2] == "A":
                        selected['3'] = selected["A1"]
                    elif given_ID[2] == "B":
                        selected['3'] = selected["B1"]
                    elif given_ID[2] == "C":
                        selected['3'] = selected["C1"]
                    elif given_ID[2] == "D":
                        selected['3'] = selected["D1"]
                    elif given_ID[2] == "E":
                        selected['3'] = selected["E1"]
                    elif given_ID[2] == "F":
                        selected['3'] = selected["F1"]
                    elif given_ID[2] == "G":
                        selected['3'] = selected["G1"]
                    elif given_ID[2] == "H":
                        selected['3'] = selected["H1"]
                    elif given_ID[2] == "I":
                        selected['3'] = selected["I1"]
                    elif given_ID[2] == "J":
                        selected['3'] = selected["J1"]
                    elif given_ID[2] == "K":
                        selected['3'] = selected["K1"]
                    elif given_ID[2] == "L":
                        selected['3'] = selected["L1"]
                    elif given_ID[2] == "M":
                        selected['3'] = selected["M1"]

                    if given_ID[3] == "A":
                        selected['4'] = selected["A1"]
                    elif given_ID[3] == "B":
                        selected['4'] = selected["B1"]
                    elif given_ID[3] == "C":
                        selected['4'] = selected["C1"]
                    elif given_ID[3] == "D":
                        selected['4'] = selected["D1"]
                    elif given_ID[3] == "E":
                        selected['4'] = selected["E1"]
                    elif given_ID[3] == "F":
                        selected['4'] = selected["F1"]
                    elif given_ID[3] == "G":
                        selected['4'] = selected["G1"]
                    elif given_ID[3] == "H":
                        selected['4'] = selected["H1"]
                    elif given_ID[3] == "I":
                        selected['4'] = selected["I1"]
                    elif given_ID[3] == "J":
                        selected['4'] = selected["J1"]
                    elif given_ID[3] == "K":
                        selected['4'] = selected["K1"]
                    elif given_ID[3] == "L":
                        selected['4'] = selected["L1"]
                    elif given_ID[3] == "M":
                        selected['4'] = selected["M1"]

                    if given_ID[4] == "A":
                        selected['5'] = selected["A1"]
                    elif given_ID[4] == "B":
                        selected['5'] = selected["B1"]
                    elif given_ID[4] == "C":
                        selected['5'] = selected["C1"]
                    elif given_ID[4] == "D":
                        selected['5'] = selected["D1"]
                    elif given_ID[4] == "E":
                        selected['5'] = selected["E1"]
                    elif given_ID[4] == "F":
                        selected['5'] = selected["F1"]
                    elif given_ID[4] == "G":
                        selected['5'] = selected["G1"]
                    elif given_ID[4] == "H":
                        selected['5'] = selected["H1"]
                    elif given_ID[4] == "I":
                        selected['5'] = selected["I1"]
                    elif given_ID[4] == "J":
                        selected['5'] = selected["J1"]
                    elif given_ID[4] == "K":
                        selected['5'] = selected["K1"]
                    elif given_ID[4] == "L":
                        selected['5'] = selected["L1"]
                    elif given_ID[4] == "M":
                        selected['5'] = selected["M1"]


                    # Applying PCA for Scaled Selected Columns

                    leagues = ["ARG1", "AUT", "BEL1", "BRA1", "BRA2", "BUL", "CHN", 
                            "COL", "DEN", "ENG1", "ENG2", "FRA1", "FRA2", "GER1", 
                            "GER2", "GRE", "HOL", "ITA1", "ITA2", "JAP", "MEX", "PAR", 
                            "POR1", "QAT", "RUS", "SAUD", "SCT", "SER", "SPA1", 
                            "SPA2", "SWZ", "TUR", "UAE", "UKR", "URU", "USA"]

                    # Iterate over each league
                    for league in leagues:

                        # Extract columns 46 through 50
                        SegundoVolanteBoxtoBox = selected.iloc[:, np.r_[-5:0]]

                        # Defining Columns
                        SegundoVolanteBoxtoBox_columns = SegundoVolanteBoxtoBox.columns

                        # Applying PCA
                        pca = PCA(n_components=2)
                        principalComponents = pca.fit_transform(SegundoVolanteBoxtoBox)

                        # Create a DataFrame with loadings
                        LoadingsSegundoVolanteBoxtoBox = pd.DataFrame(pca.components_.T**2, index=SegundoVolanteBoxtoBox_columns, columns=['loading factor 1', 'loading factor 2'])

                        # Multiplying Matrices to obtain Pre_Variables
                        Similarity = pd.DataFrame(np.matmul(SegundoVolanteBoxtoBox, LoadingsSegundoVolanteBoxtoBox['loading factor 1']) + np.matmul(SegundoVolanteBoxtoBox, LoadingsSegundoVolanteBoxtoBox['loading factor 2']),
                                                columns=["Similarity"])

                    # Rebuilding Full Training Set
                    selected = selected.join(Similarity)

                    ##############################################################
                    ##############################################################

                    # Lista de Similares
                    # Initialize an empty list to store DataFrames
                    target = selected.loc[(Role_12_data['Atleta'] == jogador_similar) & (Role_12_data['Liga'] == liga_similar)]
                    target_similarity = target.iat[0, -1]

                    selected["Índice de Similaridade"] = (selected['Similarity']/target_similarity)*100
                    selected["Índice de Similaridade"] = round(selected["Índice de Similaridade"], 2)

                    target = selected.loc[(selected['Atleta'] == jogador_similar) & (selected['Liga'] == liga_similar)]
                    selected['Dif_Similarity'] = abs(selected["Índice de Similaridade"] - 100)

                    selected = selected.sort_values(by='Dif_Similarity')

                    lista_similares = selected.iloc[1:31, np.r_[0, 2, 30, 35, -2:0]]
                    lista_similares = lista_similares.sort_values(by='Rating', ascending=False)
                    lista_similares = lista_similares.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Dif_Similarity':'Diferença de Similaridade'})

                    # Lista de Jogadores Similares Ordenados segundo o Rating
                    st.markdown("<h4 style='text-align: center;'>30 Jogadores + Similares</b></h4>", unsafe_allow_html=True)
                    #st.dataframe(lista_similares, use_container_width=True, hide_index=True)
                    st.markdown("---")

                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index(drop=True)
                        # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                        formatter = {"Rating": "{:.3f}", "Índice de Similaridade": "{:.2f}", "Diferença de Similaridade": "{:.2f}"}  # Format the 'Rating' column to 3 decimal places
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px',
                                            'font-size': '15px'})

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML without the index and display it
                        styled_html = style_table(lista_similares).to_html(escape=False, index=False, hide_index=True)
                        st.markdown(styled_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    # Lista de Latinos
                    selected_latam = selected.iloc[1:31, :]
                    selected_latam = selected_latam[(selected_latam["Nacionalidade"] == "Argentina")|(selected_latam["Nacionalidade"] == "Brazil")
                                        |(selected_latam["Nacionalidade"] == "Bolivia")|(selected_latam["Nacionalidade"] == "Chile")
                                        |(selected_latam["Nacionalidade"] == "Colombia")|(selected_latam["Nacionalidade"] == "Costa Rica")
                                        |(selected_latam["Nacionalidade"] == "Ecuador")|(selected_latam["Nacionalidade"] == "Mexico")
                                        |(selected_latam["Nacionalidade"] == "Panama")|(selected_latam["Nacionalidade"] == "Paraguay")
                                        |(selected_latam["Nacionalidade"] == "Peru")|(selected_latam["Nacionalidade"] == "Uruguay")
                                        |(selected_latam["Nacionalidade"] == "Venezuela")]
                    lista_similares_latam = selected_latam.iloc[0:30, :]
                    lista_similares_latam = lista_similares_latam.sort_values(by="Rating", ascending = False)

                    #Texto para os Gráficos
                    st.markdown("<h4 style='text-align: center;'><br>5 Jogadores Latinos Similares Melhor Ranquedos</b></h4>", unsafe_allow_html=True)
                    st.markdown("---")    


                    # Gerar Gráficos com os 5 melhores
                    # Arquivo para o Gráfico
                    Role_12_Mean_Charts = lista_similares_latam.iloc[:, np.r_[0, 2, 30, 36:49]]
                    target = target.iloc[:, np.r_[0, 2, 30, 36:49]]
                    # Renomeando Colunas
                    Role_12_Mean_Charts = Role_12_Mean_Charts.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 
                                                            'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 
                                                            'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos',
                                                            'Pisadas_Área_Percentil':'Pisadas_Área', 
                                                            'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos', 
                                                            'Corridas_Progressivas_Percentil':'Corridas_Progressivas', 
                                                            'xG_Percentil':'xG', 'xA_Percentil':'xA', 
                                                            'Assistência_Finalização_Percentil':'Assistência_Finalização', 
                                                            'Passes_TerçoFinal_Certos_Percentil':'Passes_TerçoFinal_Certos',
                                                            'Deep_Completions_Percentil':'Deep_Completions', 
                                                            'Passes_Chave_Percentil':'Passes_Chave', 
                                                            'Passes_ÁreaPênalti_Certos_Percentil':'Passes_ÁreaPênalti_Certos'})
                    
                    target = target.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 
                                                            'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 
                                                            'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos',
                                                            'Pisadas_Área_Percentil':'Pisadas_Área', 
                                                            'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos', 
                                                            'Corridas_Progressivas_Percentil':'Corridas_Progressivas', 
                                                            'xG_Percentil':'xG', 'xA_Percentil':'xA', 
                                                            'Assistência_Finalização_Percentil':'Assistência_Finalização', 
                                                            'Passes_TerçoFinal_Certos_Percentil':'Passes_TerçoFinal_Certos',
                                                            'Deep_Completions_Percentil':'Deep_Completions', 
                                                            'Passes_Chave_Percentil':'Passes_Chave', 
                                                            'Passes_ÁreaPênalti_Certos_Percentil':'Passes_ÁreaPênalti_Certos'})
                    #Dropping Atleta-alvo
                    Role_12_Mean_Charts = Role_12_Mean_Charts[Role_12_Mean_Charts['Atleta'] != jogador_similar] 
                    #Extraindo 5 melhores
                    Role_12_Mean_Charts = Role_12_Mean_Charts.iloc[0:5, :]


                    #Primeiro Gráfico
                    Role_12_first = Role_12_Mean_Charts.iloc[0:1, :]
                    Role_12_first = pd.concat([Role_12_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_12_first.iat[0, 1]
                    jogadores_clube = Role_12_first.iat[0, 2]
                    jogadores_liga = Role_12_first.iat[0, 3]
                    alvo = Role_12_first.iat[1, 1]
                    alvo_clube = Role_12_first.iat[1, 2]
                    alvo_liga = Role_12_first.iat[1, 3]

                    #Splitting Data
                    Role_12_first_1 = Role_12_first.iloc[:, np.r_[0:3, 3:11]]
                    Role_12_first_2 = Role_12_first.iloc[:, np.r_[0:3, 11:17]]

                    # Preparing Graph 1
                    params = list(Role_12_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_12_first_1[params][x])
                        a = 0
                        b = max(Role_12_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_12_first_1['Atleta'])):
                        if Role_12_first_1['Atleta'][x] == jogadores:
                            a_values = Role_12_first_1.iloc[x].values.tolist()
                        if Role_12_first_1['Atleta'][x] == alvo:
                            b_values = Role_12_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_12_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_12_first_2[params][x])
                        a = 0
                        b = max(Role_12_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_12_first_2['Atleta'])):
                        if Role_12_first_2['Atleta'][x] == jogadores:
                            a_values = Role_12_first_2.iloc[x].values.tolist()
                        if Role_12_first_2['Atleta'][x] == alvo:
                            b_values = Role_12_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################

                    #Segundo Gráfico
                    Role_12_first = Role_12_Mean_Charts.iloc[1:2, :]
                    Role_12_first = pd.concat([Role_12_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_12_first.iat[0, 1]
                    jogadores_clube = Role_12_first.iat[0, 2]
                    jogadores_liga = Role_12_first.iat[0, 3]
                    #alvo = Role_12_first.iat[1, 1]
                    #alvo_clube = Role_12_first.iat[1, 2]
                    #alvo_liga = Role_12_first.iat[1, 3]

                    #Splitting Data
                    Role_12_first_1 = Role_12_first.iloc[:, np.r_[0:3, 3:11]]
                    Role_12_first_2 = Role_12_first.iloc[:, np.r_[0:3, 11:17]]

                    # Preparing Graph 1
                    params = list(Role_12_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_12_first_1[params][x])
                        a = 0
                        b = max(Role_12_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_12_first_1['Atleta'])):
                        if Role_12_first_1['Atleta'][x] == jogadores:
                            a_values = Role_12_first_1.iloc[x].values.tolist()
                        if Role_12_first_1['Atleta'][x] == alvo:
                            b_values = Role_12_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_12_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_12_first_2[params][x])
                        a = 0
                        b = max(Role_12_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_12_first_2['Atleta'])):
                        if Role_12_first_2['Atleta'][x] == jogadores:
                            a_values = Role_12_first_2.iloc[x].values.tolist()
                        if Role_12_first_2['Atleta'][x] == alvo:
                            b_values = Role_12_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Terceiro Gráfico
                    Role_12_first = Role_12_Mean_Charts.iloc[2:3, :]
                    Role_12_first = pd.concat([Role_12_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_12_first.iat[0, 1]
                    jogadores_clube = Role_12_first.iat[0, 2]
                    jogadores_liga = Role_12_first.iat[0, 3]
                    #alvo = Role_12_first.iat[1, 1]
                    #alvo_clube = Role_12_first.iat[1, 2]
                    #alvo_liga = Role_12_first.iat[1, 3]

                    #Splitting Data
                    Role_12_first_1 = Role_12_first.iloc[:, np.r_[0:3, 3:11]]
                    Role_12_first_2 = Role_12_first.iloc[:, np.r_[0:3, 11:17]]

                    # Preparing Graph 1
                    params = list(Role_12_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_12_first_1[params][x])
                        a = 0
                        b = max(Role_12_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_12_first_1['Atleta'])):
                        if Role_12_first_1['Atleta'][x] == jogadores:
                            a_values = Role_12_first_1.iloc[x].values.tolist()
                        if Role_12_first_1['Atleta'][x] == alvo:
                            b_values = Role_12_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_12_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_12_first_2[params][x])
                        a = 0
                        b = max(Role_12_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_12_first_2['Atleta'])):
                        if Role_12_first_2['Atleta'][x] == jogadores:
                            a_values = Role_12_first_2.iloc[x].values.tolist()
                        if Role_12_first_2['Atleta'][x] == alvo:
                            b_values = Role_12_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Quarto Gráfico
                    Role_12_first = Role_12_Mean_Charts.iloc[3:4, :]
                    Role_12_first = pd.concat([Role_12_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_12_first.iat[0, 1]
                    jogadores_clube = Role_12_first.iat[0, 2]
                    jogadores_liga = Role_12_first.iat[0, 3]
                    #alvo = Role_12_first.iat[1, 1]
                    #alvo_clube = Role_12_first.iat[1, 2]
                    #alvo_liga = Role_12_first.iat[1, 3]

                    #Splitting Data
                    Role_12_first_1 = Role_12_first.iloc[:, np.r_[0:3, 3:11]]
                    Role_12_first_2 = Role_12_first.iloc[:, np.r_[0:3, 11:17]]

                    # Preparing Graph 1
                    params = list(Role_12_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_12_first_1[params][x])
                        a = 0
                        b = max(Role_12_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_12_first_1['Atleta'])):
                        if Role_12_first_1['Atleta'][x] == jogadores:
                            a_values = Role_12_first_1.iloc[x].values.tolist()
                        if Role_12_first_1['Atleta'][x] == alvo:
                            b_values = Role_12_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_12_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_12_first_2[params][x])
                        a = 0
                        b = max(Role_12_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_12_first_2['Atleta'])):
                        if Role_12_first_2['Atleta'][x] == jogadores:
                            a_values = Role_12_first_2.iloc[x].values.tolist()
                        if Role_12_first_2['Atleta'][x] == alvo:
                            b_values = Role_12_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Quinto Gráfico
                    Role_12_first = Role_12_Mean_Charts.iloc[4:5, :]
                    Role_12_first = pd.concat([Role_12_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_12_first.iat[0, 1]
                    jogadores_clube = Role_12_first.iat[0, 2]
                    jogadores_liga = Role_12_first.iat[0, 3]
                    #alvo = Role_12_first.iat[1, 1]
                    #alvo_clube = Role_12_first.iat[1, 2]
                    #alvo_liga = Role_12_first.iat[1, 3]

                    #Splitting Data
                    Role_12_first_1 = Role_12_first.iloc[:, np.r_[0:3, 3:11]]
                    Role_12_first_2 = Role_12_first.iloc[:, np.r_[0:3, 11:17]]

                    # Preparing Graph 1
                    params = list(Role_12_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_12_first_1[params][x])
                        a = 0
                        b = max(Role_12_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_12_first_1['Atleta'])):
                        if Role_12_first_1['Atleta'][x] == jogadores:
                            a_values = Role_12_first_1.iloc[x].values.tolist()
                        if Role_12_first_1['Atleta'][x] == alvo:
                            b_values = Role_12_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_12_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_12_first_2[params][x])
                        a = 0
                        b = max(Role_12_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_12_first_2['Atleta'])):
                        if Role_12_first_2['Atleta'][x] == jogadores:
                            a_values = Role_12_first_2.iloc[x].values.tolist()
                        if Role_12_first_2['Atleta'][x] == alvo:
                            b_values = Role_12_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)
                    #####################################################################################################################
                    #####################################################################################################################
                    #####################################################################################################################
                    #####################################################################################################################
                    #####################################################################################################################
                    #####################################################################################################################

                if perfil_similar == ("Segundo Volante Organizador"):
                ###############################################################################
                ###########################################################################
                    # PRIMEIRO VOLANTE EQUILIBRADO
                    # Texto de Abertura>
                    markdown_amount_1 = f"<div style='text-align:center; font-size:{fontsize}px'>{jogador_similar:}</div>"
                    st.markdown("<h4 style='text-align: center;'>Jogador Selecionado</b></h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_1, unsafe_allow_html=True)
                    st.markdown("---")

                    #Carregando arquivo de dados
                    Role_13_data = pd.read_csv('13_Role_Segundo_Volante_Organizador_Similarity.csv')
                    Role_13_data = Role_13_data.drop(Role_13_data.columns[0:4], axis=1)
                    Role_13_data.reset_index(drop=True, inplace=True)

                    # Step : Defina o atleta-alvo
                    #base_bruta_similaridade = pd.read_csv("base_bruta_similaridade.csv")
                    target = Role_13_data.loc[(Role_13_data['Atleta'] == jogador_similar)]

                    #Step : Definindo "ID-alvo"
                    given_ID = target.iat[0, -1]
                    
                    selected = Role_13_data

                    # Step 9: Add columns "1", "2", "3" to Role_13_data

                    selected['1'] = given_ID[0]
                    selected['2'] = given_ID[1]
                    selected['3'] = given_ID[2]
                    selected['4'] = given_ID[3]

                    # Assigning correct columns to 1, 2, 3

                    if given_ID[0] == "A":
                        selected['1'] = selected["A1"]
                    elif given_ID[0] == "B":
                        selected['1'] = selected["B1"]
                    elif given_ID[0] == "C":
                        selected['1'] = selected["C1"]
                    elif given_ID[0] == "D":
                        selected['1'] = selected["D1"]
                    elif given_ID[0] == "E":
                        selected['1'] = selected["E1"]
                    elif given_ID[0] == "F":
                        selected['1'] = selected["F1"]
                    elif given_ID[0] == "G":
                        selected['1'] = selected["G1"]
                    elif given_ID[0] == "H":
                        selected['1'] = selected["H1"]
                    elif given_ID[0] == "I":
                        selected['1'] = selected["I1"]
                    elif given_ID[0] == "J":
                        selected['1'] = selected["J1"]


                    if given_ID[1] == "A":
                        selected['2'] = selected["A1"]
                    elif given_ID[1] == "B":
                        selected['2'] = selected["B1"]
                    elif given_ID[1] == "C":
                        selected['2'] = selected["C1"]
                    elif given_ID[1] == "D":
                        selected['2'] = selected["D1"]
                    elif given_ID[1] == "E":
                        selected['2'] = selected["E1"]
                    elif given_ID[1] == "F":
                        selected['2'] = selected["F1"]
                    elif given_ID[1] == "G":
                        selected['2'] = selected["G1"]
                    elif given_ID[1] == "H":
                        selected['2'] = selected["H1"]
                    elif given_ID[1] == "I":
                        selected['2'] = selected["I1"]
                    elif given_ID[1] == "J":
                        selected['2'] = selected["J1"]
                    
                    
                    if given_ID[2] == "A":
                        selected['3'] = selected["A1"]
                    elif given_ID[2] == "B":
                        selected['3'] = selected["B1"]
                    elif given_ID[2] == "C":
                        selected['3'] = selected["C1"]
                    elif given_ID[2] == "D":
                        selected['3'] = selected["D1"]
                    elif given_ID[2] == "E":
                        selected['3'] = selected["E1"]
                    elif given_ID[2] == "F":
                        selected['3'] = selected["F1"]
                    elif given_ID[2] == "G":
                        selected['3'] = selected["G1"]
                    elif given_ID[2] == "H":
                        selected['3'] = selected["H1"]
                    elif given_ID[2] == "I":
                        selected['3'] = selected["I1"]
                    elif given_ID[2] == "J":
                        selected['3'] = selected["J1"]

                    if given_ID[3] == "A":
                        selected['4'] = selected["A1"]
                    elif given_ID[3] == "B":
                        selected['4'] = selected["B1"]
                    elif given_ID[3] == "C":
                        selected['4'] = selected["C1"]
                    elif given_ID[3] == "D":
                        selected['4'] = selected["D1"]
                    elif given_ID[3] == "E":
                        selected['4'] = selected["E1"]
                    elif given_ID[3] == "F":
                        selected['4'] = selected["F1"]
                    elif given_ID[3] == "G":
                        selected['4'] = selected["G1"]
                    elif given_ID[3] == "H":
                        selected['4'] = selected["H1"]
                    elif given_ID[3] == "I":
                        selected['4'] = selected["I1"]
                    elif given_ID[3] == "J":
                        selected['4'] = selected["J1"]

                    # Applying PCA for Scaled Selected Columns

                    leagues = ["ARG1", "AUT", "BEL1", "BRA1", "BRA2", "BUL", "CHN", 
                            "COL", "DEN", "ENG1", "ENG2", "FRA1", "FRA2", "GER1", 
                            "GER2", "GRE", "HOL", "ITA1", "ITA2", "JAP", "MEX", "PAR", 
                            "POR1", "QAT", "RUS", "SAUD", "SCT", "SER", "SPA1", 
                            "SPA2", "SWZ", "TUR", "UAE", "UKR", "URU", "USA"]

                    # Iterate over each league
                    for league in leagues:

                        # Extract columns 46 through 50
                        SegundoVolanteOrganizador = selected.iloc[:, np.r_[-4:0]]

                        # Defining Columns
                        SegundoVolanteOrganizador_columns = SegundoVolanteOrganizador.columns

                        # Applying PCA
                        pca = PCA(n_components=2)
                        principalComponents = pca.fit_transform(SegundoVolanteOrganizador)

                        # Create a DataFrame with loadings
                        LoadingsSegundoVolanteOrganizador = pd.DataFrame(pca.components_.T**2, index=SegundoVolanteOrganizador_columns, columns=['loading factor 1', 'loading factor 2'])

                        # Multiplying Matrices to obtain Pre_Variables
                        Similarity = pd.DataFrame(np.matmul(SegundoVolanteOrganizador, LoadingsSegundoVolanteOrganizador['loading factor 1']) + np.matmul(SegundoVolanteOrganizador, LoadingsSegundoVolanteOrganizador['loading factor 2']),
                                                columns=["Similarity"])

                    # Rebuilding Full Training Set
                    selected = selected.join(Similarity)

                    ##############################################################
                    ##############################################################

                    # Lista de Similares
                    # Initialize an empty list to store DataFrames
                    target = selected.loc[(Role_13_data['Atleta'] == jogador_similar) & (Role_13_data['Liga'] == liga_similar)]
                    target_similarity = target.iat[0, -1]

                    selected["Índice de Similaridade"] = (selected['Similarity']/target_similarity)*100
                    selected["Índice de Similaridade"] = round(selected["Índice de Similaridade"], 2)

                    target = selected.loc[(selected['Atleta'] == jogador_similar) & (selected['Liga'] == liga_similar)]
                    selected['Dif_Similarity'] = abs(selected["Índice de Similaridade"] - 100)

                    selected = selected.sort_values(by='Dif_Similarity')

                    lista_similares = selected.iloc[1:31, np.r_[0, 2, 27, 32, -2:0]]
                    lista_similares = lista_similares.sort_values(by='Rating', ascending=False)
                    lista_similares = lista_similares.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Dif_Similarity':'Diferença de Similaridade'})

                    # Lista de Jogadores Similares Ordenados segundo o Rating
                    st.markdown("<h4 style='text-align: center;'>30 Jogadores + Similares</b></h4>", unsafe_allow_html=True)
                    #st.dataframe(lista_similares, use_container_width=True, hide_index=True)
                    st.markdown("---")

                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index(drop=True)
                        # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                        formatter = {"Rating": "{:.3f}", "Índice de Similaridade": "{:.2f}", "Diferença de Similaridade": "{:.2f}"}  # Format the 'Rating' column to 3 decimal places
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px',
                                            'font-size': '15px'})

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML without the index and display it
                        styled_html = style_table(lista_similares).to_html(escape=False, index=False, hide_index=True)
                        st.markdown(styled_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    # Lista de Latinos
                    selected_latam = selected.iloc[1:31, :]
                    selected_latam = selected_latam[(selected_latam["Nacionalidade"] == "Argentina")|(selected_latam["Nacionalidade"] == "Brazil")
                                        |(selected_latam["Nacionalidade"] == "Bolivia")|(selected_latam["Nacionalidade"] == "Chile")
                                        |(selected_latam["Nacionalidade"] == "Colombia")|(selected_latam["Nacionalidade"] == "Costa Rica")
                                        |(selected_latam["Nacionalidade"] == "Ecuador")|(selected_latam["Nacionalidade"] == "Mexico")
                                        |(selected_latam["Nacionalidade"] == "Panama")|(selected_latam["Nacionalidade"] == "Paraguay")
                                        |(selected_latam["Nacionalidade"] == "Peru")|(selected_latam["Nacionalidade"] == "Uruguay")
                                        |(selected_latam["Nacionalidade"] == "Venezuela")]
                    lista_similares_latam = selected_latam.iloc[0:30, :]
                    lista_similares_latam = lista_similares_latam.sort_values(by="Rating", ascending = False)

                    #Texto para os Gráficos
                    st.markdown("<h4 style='text-align: center;'><br>5 Jogadores Latinos Similares Melhor Ranquedos</b></h4>", unsafe_allow_html=True)
                    st.markdown("---")    


                    # Gerar Gráficos com os 5 melhores
                    # Arquivo para o Gráfico
                    Role_13_Mean_Charts = lista_similares_latam.iloc[:, np.r_[0, 2, 27, 33:43]]
                    target = target.iloc[:, np.r_[0, 2, 27, 33:43]]
                    # Renomeando Colunas
                    Role_13_Mean_Charts = Role_13_Mean_Charts.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 
                                                            'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 
                                                            'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos',
                                                            'Pisadas_Área_Percentil':'Pisadas_Área', 
                                                            'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos', 
                                                            'xA_Percentil':'xA', 
                                                            'Assistência_Finalização_Percentil':'Assistência_Finalização', 
                                                            'Passes_TerçoFinal_Certos_Percentil':'Passes_TerçoFinal_Certos',
                                                            'Deep_Completions_Percentil':'Deep_Completions', 
                                                            'Passes_ÁreaPênalti_Certos_Percentil':'Passes_ÁreaPênalti_Certos'})
                    
                    target = target.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 
                                                            'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 
                                                            'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos',
                                                            'Pisadas_Área_Percentil':'Pisadas_Área', 
                                                            'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos', 
                                                            'xA_Percentil':'xA', 
                                                            'Assistência_Finalização_Percentil':'Assistência_Finalização', 
                                                            'Passes_TerçoFinal_Certos_Percentil':'Passes_TerçoFinal_Certos',
                                                            'Deep_Completions_Percentil':'Deep_Completions', 
                                                            'Passes_ÁreaPênalti_Certos_Percentil':'Passes_ÁreaPênalti_Certos'})
                    #Dropping Atleta-alvo
                    Role_13_Mean_Charts = Role_13_Mean_Charts[Role_13_Mean_Charts['Atleta'] != jogador_similar] 
                    #Extraindo 5 melhores
                    Role_13_Mean_Charts = Role_13_Mean_Charts.iloc[0:5, :]


                    #Primeiro Gráfico
                    Role_13_first = Role_13_Mean_Charts.iloc[0:1, :]
                    Role_13_first = pd.concat([Role_13_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_13_first.iat[0, 1]
                    jogadores_clube = Role_13_first.iat[0, 2]
                    jogadores_liga = Role_13_first.iat[0, 3]
                    alvo = Role_13_first.iat[1, 1]
                    alvo_clube = Role_13_first.iat[1, 2]
                    alvo_liga = Role_13_first.iat[1, 3]

                    #Splitting Data
                    Role_13_first_1 = Role_13_first.iloc[:, np.r_[0:3, 3:9]]
                    Role_13_first_2 = Role_13_first.iloc[:, np.r_[0:3, 8:14]]

                    # Preparing Graph 1
                    params = list(Role_13_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_13_first_1[params][x])
                        a = 0
                        b = max(Role_13_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_13_first_1['Atleta'])):
                        if Role_13_first_1['Atleta'][x] == jogadores:
                            a_values = Role_13_first_1.iloc[x].values.tolist()
                        if Role_13_first_1['Atleta'][x] == alvo:
                            b_values = Role_13_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_13_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_13_first_2[params][x])
                        a = 0
                        b = max(Role_13_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_13_first_2['Atleta'])):
                        if Role_13_first_2['Atleta'][x] == jogadores:
                            a_values = Role_13_first_2.iloc[x].values.tolist()
                        if Role_13_first_2['Atleta'][x] == alvo:
                            b_values = Role_13_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################

                    #Segundo Gráfico
                    Role_13_first = Role_13_Mean_Charts.iloc[1:2, :]
                    Role_13_first = pd.concat([Role_13_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_13_first.iat[0, 1]
                    jogadores_clube = Role_13_first.iat[0, 2]
                    jogadores_liga = Role_13_first.iat[0, 3]

                    #Splitting Data
                    Role_13_first_1 = Role_13_first.iloc[:, np.r_[0:3, 3:9]]
                    Role_13_first_2 = Role_13_first.iloc[:, np.r_[0:3, 8:14]]

                    # Preparing Graph 1
                    params = list(Role_13_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_13_first_1[params][x])
                        a = 0
                        b = max(Role_13_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_13_first_1['Atleta'])):
                        if Role_13_first_1['Atleta'][x] == jogadores:
                            a_values = Role_13_first_1.iloc[x].values.tolist()
                        if Role_13_first_1['Atleta'][x] == alvo:
                            b_values = Role_13_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_13_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_13_first_2[params][x])
                        a = 0
                        b = max(Role_13_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_13_first_2['Atleta'])):
                        if Role_13_first_2['Atleta'][x] == jogadores:
                            a_values = Role_13_first_2.iloc[x].values.tolist()
                        if Role_13_first_2['Atleta'][x] == alvo:
                            b_values = Role_13_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Terceiro Gráfico
                    Role_13_first = Role_13_Mean_Charts.iloc[2:3, :]
                    Role_13_first = pd.concat([Role_13_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_13_first.iat[0, 1]
                    jogadores_clube = Role_13_first.iat[0, 2]
                    jogadores_liga = Role_13_first.iat[0, 3]

                    #Splitting Data
                    Role_13_first_1 = Role_13_first.iloc[:, np.r_[0:3, 3:9]]
                    Role_13_first_2 = Role_13_first.iloc[:, np.r_[0:3, 8:14]]

                    # Preparing Graph 1
                    params = list(Role_13_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_13_first_1[params][x])
                        a = 0
                        b = max(Role_13_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_13_first_1['Atleta'])):
                        if Role_13_first_1['Atleta'][x] == jogadores:
                            a_values = Role_13_first_1.iloc[x].values.tolist()
                        if Role_13_first_1['Atleta'][x] == alvo:
                            b_values = Role_13_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_13_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_13_first_2[params][x])
                        a = 0
                        b = max(Role_13_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_13_first_2['Atleta'])):
                        if Role_13_first_2['Atleta'][x] == jogadores:
                            a_values = Role_13_first_2.iloc[x].values.tolist()
                        if Role_13_first_2['Atleta'][x] == alvo:
                            b_values = Role_13_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Quarto Gráfico
                    Role_13_first = Role_13_Mean_Charts.iloc[3:4, :]
                    Role_13_first = pd.concat([Role_13_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_13_first.iat[0, 1]
                    jogadores_clube = Role_13_first.iat[0, 2]
                    jogadores_liga = Role_13_first.iat[0, 3]

                    #Splitting Data
                    Role_13_first_1 = Role_13_first.iloc[:, np.r_[0:3, 3:9]]
                    Role_13_first_2 = Role_13_first.iloc[:, np.r_[0:3, 8:14]]

                    # Preparing Graph 1
                    params = list(Role_13_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_13_first_1[params][x])
                        a = 0
                        b = max(Role_13_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_13_first_1['Atleta'])):
                        if Role_13_first_1['Atleta'][x] == jogadores:
                            a_values = Role_13_first_1.iloc[x].values.tolist()
                        if Role_13_first_1['Atleta'][x] == alvo:
                            b_values = Role_13_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_13_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_13_first_2[params][x])
                        a = 0
                        b = max(Role_13_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_13_first_2['Atleta'])):
                        if Role_13_first_2['Atleta'][x] == jogadores:
                            a_values = Role_13_first_2.iloc[x].values.tolist()
                        if Role_13_first_2['Atleta'][x] == alvo:
                            b_values = Role_13_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Quinto Gráfico
                    Role_13_first = Role_13_Mean_Charts.iloc[4:5, :]
                    Role_13_first = pd.concat([Role_13_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_13_first.iat[0, 1]
                    jogadores_clube = Role_13_first.iat[0, 2]
                    jogadores_liga = Role_13_first.iat[0, 3]

                    #Splitting Data
                    Role_13_first_1 = Role_13_first.iloc[:, np.r_[0:3, 3:9]]
                    Role_13_first_2 = Role_13_first.iloc[:, np.r_[0:3, 8:14]]

                    # Preparing Graph 1
                    params = list(Role_13_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_13_first_1[params][x])
                        a = 0
                        b = max(Role_13_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_13_first_1['Atleta'])):
                        if Role_13_first_1['Atleta'][x] == jogadores:
                            a_values = Role_13_first_1.iloc[x].values.tolist()
                        if Role_13_first_1['Atleta'][x] == alvo:
                            b_values = Role_13_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_13_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_13_first_2[params][x])
                        a = 0
                        b = max(Role_13_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_13_first_2['Atleta'])):
                        if Role_13_first_2['Atleta'][x] == jogadores:
                            a_values = Role_13_first_2.iloc[x].values.tolist()
                        if Role_13_first_2['Atleta'][x] == alvo:
                            b_values = Role_13_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)
                    #####################################################################################################################
                    #####################################################################################################################
                    #####################################################################################################################
                    #####################################################################################################################
                    #####################################################################################################################
                    #####################################################################################################################

                if perfil_similar == ("Segundo Volante Equilibrado"):
                ###############################################################################
                ###########################################################################
                    # PRIMEIRO VOLANTE EQUILIBRADO
                    # Texto de Abertura>
                    markdown_amount_1 = f"<div style='text-align:center; font-size:{fontsize}px'>{jogador_similar:}</div>"
                    st.markdown("<h4 style='text-align: center;'>Jogador Selecionado</b></h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_1, unsafe_allow_html=True)
                    st.markdown("---")

                    #Carregando arquivo de dados
                    Role_14_data = pd.read_csv('14_Role_Segundo_Volante_Equilibrado_Similarity.csv')
                    Role_14_data = Role_14_data.drop(Role_14_data.columns[0:4], axis=1)
                    Role_14_data.reset_index(drop=True, inplace=True)

                    # Step : Defina o atleta-alvo
                    #base_bruta_similaridade = pd.read_csv("base_bruta_similaridade.csv")
                    target = Role_14_data.loc[(Role_14_data['Atleta'] == jogador_similar)]

                    #Step : Definindo "ID-alvo"
                    given_ID = target.iat[0, -1]
                    
                    selected = Role_14_data

                    # Step 9: Add columns "1", "2", "3" to Role_14_data

                    selected['1'] = given_ID[0]
                    selected['2'] = given_ID[1]
                    selected['3'] = given_ID[2]
                    selected['4'] = given_ID[3]

                    # Assigning correct columns to 1, 2, 3

                    if given_ID[0] == "A":
                        selected['1'] = selected["A1"]
                    elif given_ID[0] == "B":
                        selected['1'] = selected["B1"]
                    elif given_ID[0] == "C":
                        selected['1'] = selected["C1"]
                    elif given_ID[0] == "D":
                        selected['1'] = selected["D1"]
                    elif given_ID[0] == "E":
                        selected['1'] = selected["E1"]
                    elif given_ID[0] == "F":
                        selected['1'] = selected["F1"]
                    elif given_ID[0] == "G":
                        selected['1'] = selected["G1"]
                    elif given_ID[0] == "H":
                        selected['1'] = selected["H1"]
                    elif given_ID[0] == "I":
                        selected['1'] = selected["I1"]
                    elif given_ID[0] == "J":
                        selected['1'] = selected["J1"]
                    elif given_ID[0] == "K":
                        selected['1'] = selected["K1"]
                    elif given_ID[0] == "L":
                        selected['1'] = selected["L1"]
                    elif given_ID[0] == "M":
                        selected['1'] = selected["M1"]


                    if given_ID[1] == "A":
                        selected['2'] = selected["A1"]
                    elif given_ID[1] == "B":
                        selected['2'] = selected["B1"]
                    elif given_ID[1] == "C":
                        selected['2'] = selected["C1"]
                    elif given_ID[1] == "D":
                        selected['2'] = selected["D1"]
                    elif given_ID[1] == "E":
                        selected['2'] = selected["E1"]
                    elif given_ID[1] == "F":
                        selected['2'] = selected["F1"]
                    elif given_ID[1] == "G":
                        selected['2'] = selected["G1"]
                    elif given_ID[1] == "H":
                        selected['2'] = selected["H1"]
                    elif given_ID[1] == "I":
                        selected['2'] = selected["I1"]
                    elif given_ID[1] == "J":
                        selected['2'] = selected["J1"]
                    elif given_ID[1] == "K":
                        selected['2'] = selected["K1"]
                    elif given_ID[1] == "L":
                        selected['2'] = selected["L1"]
                    elif given_ID[1] == "M":
                        selected['2'] = selected["M1"]
                    
                    
                    if given_ID[2] == "A":
                        selected['3'] = selected["A1"]
                    elif given_ID[2] == "B":
                        selected['3'] = selected["B1"]
                    elif given_ID[2] == "C":
                        selected['3'] = selected["C1"]
                    elif given_ID[2] == "D":
                        selected['3'] = selected["D1"]
                    elif given_ID[2] == "E":
                        selected['3'] = selected["E1"]
                    elif given_ID[2] == "F":
                        selected['3'] = selected["F1"]
                    elif given_ID[2] == "G":
                        selected['3'] = selected["G1"]
                    elif given_ID[2] == "H":
                        selected['3'] = selected["H1"]
                    elif given_ID[2] == "I":
                        selected['3'] = selected["I1"]
                    elif given_ID[2] == "J":
                        selected['3'] = selected["J1"]
                    elif given_ID[2] == "K":
                        selected['3'] = selected["K1"]
                    elif given_ID[2] == "L":
                        selected['3'] = selected["L1"]
                    elif given_ID[2] == "M":
                        selected['3'] = selected["M1"]

                    if given_ID[3] == "A":
                        selected['4'] = selected["A1"]
                    elif given_ID[3] == "B":
                        selected['4'] = selected["B1"]
                    elif given_ID[3] == "C":
                        selected['4'] = selected["C1"]
                    elif given_ID[3] == "D":
                        selected['4'] = selected["D1"]
                    elif given_ID[3] == "E":
                        selected['4'] = selected["E1"]
                    elif given_ID[3] == "F":
                        selected['4'] = selected["F1"]
                    elif given_ID[3] == "G":
                        selected['4'] = selected["G1"]
                    elif given_ID[3] == "H":
                        selected['4'] = selected["H1"]
                    elif given_ID[3] == "I":
                        selected['4'] = selected["I1"]
                    elif given_ID[3] == "J":
                        selected['4'] = selected["J1"]
                    elif given_ID[3] == "K":
                        selected['4'] = selected["K1"]
                    elif given_ID[3] == "L":
                        selected['4'] = selected["L1"]
                    elif given_ID[3] == "M":
                        selected['4'] = selected["M1"]

                    # Applying PCA for Scaled Selected Columns

                    leagues = ["ARG1", "AUT", "BEL1", "BRA1", "BRA2", "BUL", "CHN", 
                            "COL", "DEN", "ENG1", "ENG2", "FRA1", "FRA2", "GER1", 
                            "GER2", "GRE", "HOL", "ITA1", "ITA2", "JAP", "MEX", "PAR", 
                            "POR1", "QAT", "RUS", "SAUD", "SCT", "SER", "SPA1", 
                            "SPA2", "SWZ", "TUR", "UAE", "UKR", "URU", "USA"]

                    # Iterate over each league
                    for league in leagues:

                        # Extract columns 46 through 50
                        SegundoVolante = selected.iloc[:, np.r_[-4:0]]

                        # Defining Columns
                        SegundoVolante_columns = SegundoVolante.columns

                        # Applying PCA
                        pca = PCA(n_components=2)
                        principalComponents = pca.fit_transform(SegundoVolante)

                        # Create a DataFrame with loadings
                        LoadingsSegundoVolante = pd.DataFrame(pca.components_.T**2, index=SegundoVolante_columns, columns=['loading factor 1', 'loading factor 2'])

                        # Multiplying Matrices to obtain Pre_Variables
                        Similarity = pd.DataFrame(np.matmul(SegundoVolante, LoadingsSegundoVolante['loading factor 1']) + np.matmul(SegundoVolante, LoadingsSegundoVolante['loading factor 2']),
                                                columns=["Similarity"])

                    # Rebuilding Full Training Set
                    selected = selected.join(Similarity)

                    ##############################################################
                    ##############################################################

                    # Lista de Similares
                    # Initialize an empty list to store DataFrames
                    target = selected.loc[(Role_14_data['Atleta'] == jogador_similar) & (Role_14_data['Liga'] == liga_similar)]
                    target_similarity = target.iat[0, -1]

                    selected["Índice de Similaridade"] = (selected['Similarity']/target_similarity)*100
                    selected["Índice de Similaridade"] = round(selected["Índice de Similaridade"], 2)

                    target = selected.loc[(selected['Atleta'] == jogador_similar) & (selected['Liga'] == liga_similar)]
                    selected['Dif_Similarity'] = abs(selected["Índice de Similaridade"] - 100)

                    selected = selected.sort_values(by='Dif_Similarity')
                    lista_similares = selected.iloc[1:31, np.r_[0, 2, 30, 35, -2:0]]
                    lista_similares = lista_similares.sort_values(by='Rating', ascending=False)
                    lista_similares = lista_similares.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Dif_Similarity':'Diferença de Similaridade'})

                    # Lista de Jogadores Similares Ordenados segundo o Rating
                    st.markdown("<h4 style='text-align: center;'>30 Jogadores + Similares</b></h4>", unsafe_allow_html=True)
                    #st.dataframe(lista_similares, use_container_width=True, hide_index=True)
                    st.markdown("---")

                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index(drop=True)
                        # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                        formatter = {"Rating": "{:.3f}", "Índice de Similaridade": "{:.2f}", "Diferença de Similaridade": "{:.2f}"}  # Format the 'Rating' column to 3 decimal places
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px',
                                            'font-size': '15px'})

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML without the index and display it
                        styled_html = style_table(lista_similares).to_html(escape=False, index=False, hide_index=True)
                        st.markdown(styled_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    # Lista de Latinos
                    selected_latam = selected.iloc[1:31, :]
                    selected_latam = selected_latam[(selected_latam["Nacionalidade"] == "Argentina")|(selected_latam["Nacionalidade"] == "Brazil")
                                        |(selected_latam["Nacionalidade"] == "Bolivia")|(selected_latam["Nacionalidade"] == "Chile")
                                        |(selected_latam["Nacionalidade"] == "Colombia")|(selected_latam["Nacionalidade"] == "Costa Rica")
                                        |(selected_latam["Nacionalidade"] == "Ecuador")|(selected_latam["Nacionalidade"] == "Mexico")
                                        |(selected_latam["Nacionalidade"] == "Panama")|(selected_latam["Nacionalidade"] == "Paraguay")
                                        |(selected_latam["Nacionalidade"] == "Peru")|(selected_latam["Nacionalidade"] == "Uruguay")
                                        |(selected_latam["Nacionalidade"] == "Venezuela")]
                    lista_similares_latam = selected_latam.iloc[0:30, :]
                    lista_similares_latam = lista_similares_latam.sort_values(by="Rating", ascending = False)
                    #Texto para os Gráficos
                    st.markdown("<h4 style='text-align: center;'><br>5 Jogadores Latinos Similares Melhor Ranquedos</b></h4>", unsafe_allow_html=True)
                    st.markdown("---")    

                    # Gerar Gráficos com os 5 melhores
                    # Arquivo para o Gráfico
                    Role_14_Mean_Charts = lista_similares_latam.iloc[:, np.r_[0, 2, 30, 36:49]]
                    target = target.iloc[:, np.r_[0, 2, 30, 36:49]]
                    # Renomeando Colunas
                    Role_14_Mean_Charts = Role_14_Mean_Charts.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 'Duelos_Defensivos_Ganhos_Percentil':'Duelos_Defensivos_Ganhos', 'Duelos_Aéreos_Ganhos_Percentil':'Duelos_Aéreos_Ganhos',
                                                                                'Finalizações_Bloqueadas_Percentil':'Finalizações_Bloqueadas', 'Interceptações_Ajustadas_a_Posse_Percentil':'Interceptações_Ajustadas_a_Posse', 'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 
                                                                                'Passes_Frontais_Certos_Percentil':'Passes_Frontais_Certos', 'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos', 'Passes_Laterais_Certos_Percentil':'Passes_Laterais_Certos', 'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos', 
                                                                                'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos', 'Corridas_Progressivas_Percentil':'Corridas_Progressivas', 'Passes_TerçoFinal_Certos_Percentil':'Passes_TerçoFinal_Certos'})
                    
                    target = target.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 'Duelos_Defensivos_Ganhos_Percentil':'Duelos_Defensivos_Ganhos', 'Duelos_Aéreos_Ganhos_Percentil':'Duelos_Aéreos_Ganhos',
                                                                                'Finalizações_Bloqueadas_Percentil':'Finalizações_Bloqueadas', 'Interceptações_Ajustadas_a_Posse_Percentil':'Interceptações_Ajustadas_a_Posse', 'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 
                                                                                'Passes_Frontais_Certos_Percentil':'Passes_Frontais_Certos', 'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos', 'Passes_Laterais_Certos_Percentil':'Passes_Laterais_Certos', 'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos', 
                                                                                'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos', 'Corridas_Progressivas_Percentil':'Corridas_Progressivas', 'Passes_TerçoFinal_Certos_Percentil':'Passes_TerçoFinal_Certos'})
                    #Dropping Atleta-alvo
                    Role_14_Mean_Charts = Role_14_Mean_Charts[Role_14_Mean_Charts['Atleta'] != jogador_similar] 
                    #Extraindo 5 melhores
                    Role_14_Mean_Charts = Role_14_Mean_Charts.iloc[0:5, :]


                    #Primeiro Gráfico
                    Role_14_first = Role_14_Mean_Charts.iloc[0:1, :]
                    Role_14_first = pd.concat([Role_14_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_14_first.iat[0, 1]
                    jogadores_clube = Role_14_first.iat[0, 2]
                    jogadores_liga = Role_14_first.iat[0, 3]
                    alvo = Role_14_first.iat[1, 1]
                    alvo_clube = Role_14_first.iat[1, 2]
                    alvo_liga = Role_14_first.iat[1, 3]

                    #Splitting Data
                    Role_14_first_1 = Role_14_first.iloc[:, np.r_[0:3, 3:11]]
                    Role_14_first_2 = Role_14_first.iloc[:, np.r_[0:3, 11:17]]

                    # Preparing Graph 1
                    params = list(Role_14_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_14_first_1[params][x])
                        a = 0
                        b = max(Role_14_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_14_first_1['Atleta'])):
                        if Role_14_first_1['Atleta'][x] == jogadores:
                            a_values = Role_14_first_1.iloc[x].values.tolist()
                        if Role_14_first_1['Atleta'][x] == alvo:
                            b_values = Role_14_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_14_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_14_first_2[params][x])
                        a = 0
                        b = max(Role_14_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_14_first_2['Atleta'])):
                        if Role_14_first_2['Atleta'][x] == jogadores:
                            a_values = Role_14_first_2.iloc[x].values.tolist()
                        if Role_14_first_2['Atleta'][x] == alvo:
                            b_values = Role_14_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################

                    #Segundo Gráfico
                    Role_14_first = Role_14_Mean_Charts.iloc[1:2, :]
                    Role_14_first = pd.concat([Role_14_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_14_first.iat[0, 1]
                    jogadores_clube = Role_14_first.iat[0, 2]
                    jogadores_liga = Role_14_first.iat[0, 3]
                    #alvo = Role_14_first.iat[1, 1]
                    #alvo_clube = Role_14_first.iat[1, 2]
                    #alvo_liga = Role_14_first.iat[1, 3]

                    #Splitting Data
                    Role_14_first_1 = Role_14_first.iloc[:, np.r_[0:3, 3:11]]
                    Role_14_first_2 = Role_14_first.iloc[:, np.r_[0:3, 11:17]]

                    # Preparing Graph 1
                    params = list(Role_14_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_14_first_1[params][x])
                        a = 0
                        b = max(Role_14_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_14_first_1['Atleta'])):
                        if Role_14_first_1['Atleta'][x] == jogadores:
                            a_values = Role_14_first_1.iloc[x].values.tolist()
                        if Role_14_first_1['Atleta'][x] == alvo:
                            b_values = Role_14_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_14_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_14_first_2[params][x])
                        a = 0
                        b = max(Role_14_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_14_first_2['Atleta'])):
                        if Role_14_first_2['Atleta'][x] == jogadores:
                            a_values = Role_14_first_2.iloc[x].values.tolist()
                        if Role_14_first_2['Atleta'][x] == alvo:
                            b_values = Role_14_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Terceiro Gráfico
                    Role_14_first = Role_14_Mean_Charts.iloc[2:3, :]
                    Role_14_first = pd.concat([Role_14_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_14_first.iat[0, 1]
                    jogadores_clube = Role_14_first.iat[0, 2]
                    jogadores_liga = Role_14_first.iat[0, 3]
                    #alvo = Role_14_first.iat[1, 1]
                    #alvo_clube = Role_14_first.iat[1, 2]
                    #alvo_liga = Role_14_first.iat[1, 3]

                    #Splitting Data
                    Role_14_first_1 = Role_14_first.iloc[:, np.r_[0:3, 3:11]]
                    Role_14_first_2 = Role_14_first.iloc[:, np.r_[0:3, 11:17]]

                    # Preparing Graph 1
                    params = list(Role_14_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_14_first_1[params][x])
                        a = 0
                        b = max(Role_14_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_14_first_1['Atleta'])):
                        if Role_14_first_1['Atleta'][x] == jogadores:
                            a_values = Role_14_first_1.iloc[x].values.tolist()
                        if Role_14_first_1['Atleta'][x] == alvo:
                            b_values = Role_14_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_14_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_14_first_2[params][x])
                        a = 0
                        b = max(Role_14_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_14_first_2['Atleta'])):
                        if Role_14_first_2['Atleta'][x] == jogadores:
                            a_values = Role_14_first_2.iloc[x].values.tolist()
                        if Role_14_first_2['Atleta'][x] == alvo:
                            b_values = Role_14_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Quarto Gráfico
                    Role_14_first = Role_14_Mean_Charts.iloc[3:4, :]
                    Role_14_first = pd.concat([Role_14_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_14_first.iat[0, 1]
                    jogadores_clube = Role_14_first.iat[0, 2]
                    jogadores_liga = Role_14_first.iat[0, 3]
                    #alvo = Role_14_first.iat[1, 1]
                    #alvo_clube = Role_14_first.iat[1, 2]
                    #alvo_liga = Role_14_first.iat[1, 3]

                    #Splitting Data
                    Role_14_first_1 = Role_14_first.iloc[:, np.r_[0:3, 3:11]]
                    Role_14_first_2 = Role_14_first.iloc[:, np.r_[0:3, 11:17]]

                    # Preparing Graph 1
                    params = list(Role_14_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_14_first_1[params][x])
                        a = 0
                        b = max(Role_14_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_14_first_1['Atleta'])):
                        if Role_14_first_1['Atleta'][x] == jogadores:
                            a_values = Role_14_first_1.iloc[x].values.tolist()
                        if Role_14_first_1['Atleta'][x] == alvo:
                            b_values = Role_14_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_14_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_14_first_2[params][x])
                        a = 0
                        b = max(Role_14_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_14_first_2['Atleta'])):
                        if Role_14_first_2['Atleta'][x] == jogadores:
                            a_values = Role_14_first_2.iloc[x].values.tolist()
                        if Role_14_first_2['Atleta'][x] == alvo:
                            b_values = Role_14_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Quinto Gráfico
                    Role_14_first = Role_14_Mean_Charts.iloc[4:5, :]
                    Role_14_first = pd.concat([Role_14_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_14_first.iat[0, 1]
                    jogadores_clube = Role_14_first.iat[0, 2]
                    jogadores_liga = Role_14_first.iat[0, 3]
                    #alvo = Role_14_first.iat[1, 1]
                    #alvo_clube = Role_14_first.iat[1, 2]
                    #alvo_liga = Role_14_first.iat[1, 3]

                    #Splitting Data
                    Role_14_first_1 = Role_14_first.iloc[:, np.r_[0:3, 3:11]]
                    Role_14_first_2 = Role_14_first.iloc[:, np.r_[0:3, 11:17]]

                    # Preparing Graph 1
                    params = list(Role_14_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_14_first_1[params][x])
                        a = 0
                        b = max(Role_14_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_14_first_1['Atleta'])):
                        if Role_14_first_1['Atleta'][x] == jogadores:
                            a_values = Role_14_first_1.iloc[x].values.tolist()
                        if Role_14_first_1['Atleta'][x] == alvo:
                            b_values = Role_14_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_14_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_14_first_2[params][x])
                        a = 0
                        b = max(Role_14_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_14_first_2['Atleta'])):
                        if Role_14_first_2['Atleta'][x] == jogadores:
                            a_values = Role_14_first_2.iloc[x].values.tolist()
                        if Role_14_first_2['Atleta'][x] == alvo:
                            b_values = Role_14_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)
                    #####################################################################################################################
                    #####################################################################################################################
                    #####################################################################################################################
                    #####################################################################################################################
                    #####################################################################################################################
                    #####################################################################################################################
                    
                elif perfil_similar == ("Meia Organizador"):
                    #####################################################################################################################
                    #####################################################################################################################
                    # MeiaAtacante EQUILIBRADO
                    # Texto de Abertura>
                    markdown_amount_1 = f"<div style='text-align:center; font-size:{fontsize}px'>{jogador_similar:}</div>"
                    st.markdown("<h4 style='text-align: center;'>Jogador Selecionado</b></h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_1, unsafe_allow_html=True)
                    st.markdown("---")

                    #Carregando arquivo de dados
                    Role_15_data = pd.read_csv('15_Role_Meia_Organizador_Similarity.csv')
                    Role_15_data = Role_15_data.drop(Role_15_data.columns[0:4], axis=1)
                    Role_15_data.reset_index(drop=True, inplace=True)

                    # Step : Defina o atleta-alvo
                    #base_bruta_similaridade = pd.read_csv("base_bruta_similaridade.csv")
                    target = Role_15_data.loc[(Role_15_data['Atleta'] == jogador_similar)]

                    #Step : Definindo "ID-alvo"
                    given_ID = target.iat[0, -1]

                    # Definição da Base de Trabalho
                    selected = Role_15_data

                    # Step 9: Add columns "1", "2", "3" to Role_15_data

                    selected['1'] = given_ID[0]
                    selected['2'] = given_ID[1]
                    selected['3'] = given_ID[2]
                    selected['4'] = given_ID[3]


                    # Assigning correct columns to 1, 2, 3

                    if given_ID[0] == "A":
                        selected['1'] = selected["A1"]
                    elif given_ID[0] == "B":
                        selected['1'] = selected["B1"]
                    elif given_ID[0] == "C":
                        selected['1'] = selected["C1"]
                    elif given_ID[0] == "D":
                        selected['1'] = selected["D1"]
                    elif given_ID[0] == "E":
                        selected['1'] = selected["E1"]
                    elif given_ID[0] == "F":
                        selected['1'] = selected["F1"]
                    elif given_ID[0] == "G":
                        selected['1'] = selected["G1"]
                    elif given_ID[0] == "H":
                        selected['1'] = selected["H1"]
                    elif given_ID[0] == "I":
                        selected['1'] = selected["I1"]
                    elif given_ID[0] == "J":
                        selected['1'] = selected["J1"]


                    if given_ID[1] == "A":
                        selected['2'] = selected["A1"]
                    elif given_ID[1] == "B":
                        selected['2'] = selected["B1"]
                    elif given_ID[1] == "C":
                        selected['2'] = selected["C1"]
                    elif given_ID[1] == "D":
                        selected['2'] = selected["D1"]
                    elif given_ID[1] == "E":
                        selected['2'] = selected["E1"]
                    elif given_ID[1] == "F":
                        selected['2'] = selected["F1"]
                    elif given_ID[1] == "G":
                        selected['2'] = selected["G1"]
                    elif given_ID[1] == "H":
                        selected['2'] = selected["H1"]
                    elif given_ID[1] == "I":
                        selected['2'] = selected["I1"]
                    elif given_ID[1] == "J":
                        selected['2'] = selected["J1"]
                    
                    
                    if given_ID[2] == "A":
                        selected['3'] = selected["A1"]
                    elif given_ID[2] == "B":
                        selected['3'] = selected["B1"]
                    elif given_ID[2] == "C":
                        selected['3'] = selected["C1"]
                    elif given_ID[2] == "D":
                        selected['3'] = selected["D1"]
                    elif given_ID[2] == "E":
                        selected['3'] = selected["E1"]
                    elif given_ID[2] == "F":
                        selected['3'] = selected["F1"]
                    elif given_ID[2] == "G":
                        selected['3'] = selected["G1"]
                    elif given_ID[2] == "H":
                        selected['3'] = selected["H1"]
                    elif given_ID[2] == "I":
                        selected['3'] = selected["I1"]
                    elif given_ID[2] == "J":
                        selected['3'] = selected["J1"]


                    if given_ID[3] == "A":
                        selected['4'] = selected["A1"]
                    elif given_ID[3] == "B":
                        selected['4'] = selected["B1"]
                    elif given_ID[3] == "C":
                        selected['4'] = selected["C1"]
                    elif given_ID[3] == "D":
                        selected['4'] = selected["D1"]
                    elif given_ID[3] == "E":
                        selected['4'] = selected["E1"]
                    elif given_ID[3] == "F":
                        selected['4'] = selected["F1"]
                    elif given_ID[3] == "G":
                        selected['4'] = selected["G1"]
                    elif given_ID[3] == "H":
                        selected['4'] = selected["H1"]
                    elif given_ID[3] == "I":
                        selected['4'] = selected["I1"]
                    elif given_ID[3] == "J":
                        selected['4'] = selected["J1"]


                    #############################################################
                    #############################################################

                    # Applying PCA for Scaled Selected Columns

                    leagues = ["ARG1", "AUT", "BEL1", "BRA1", "BRA2", "BUL", "CHN", 
                            "COL", "DEN", "ENG1", "ENG2", "FRA1", "FRA2", "GER1", 
                            "GER2", "GRE", "HOL", "ITA1", "ITA2", "JAP", "MEX", "PAR", 
                            "POR1", "QAT", "RUS", "SAUD", "SCT", "SER", "SPA1", 
                            "SPA2", "SWZ", "TUR", "UAE", "UKR", "URU", "USA"]

                    # Iterate over each league
                    for league in leagues:

                        # Extract columns 46 through 50
                        MeiaOrganizador = selected.iloc[:, np.r_[-4:0]]

                        # Defining Columns
                        MeiaOrganizador_columns = MeiaOrganizador.columns

                        # Applying PCA
                        pca = PCA(n_components=2)
                        principalComponents = pca.fit_transform(MeiaOrganizador)

                        # Create a DataFrame with loadings
                        LoadingsMeiaOrganizador = pd.DataFrame(pca.components_.T**2, index=MeiaOrganizador_columns, columns=['loading factor 1', 'loading factor 2'])

                        # Multiplying Matrices to obtain Pre_Variables
                        Similarity = pd.DataFrame(np.matmul(MeiaOrganizador, LoadingsMeiaOrganizador['loading factor 1']) + np.matmul(MeiaOrganizador, LoadingsMeiaOrganizador['loading factor 2']),
                                                columns=["Similarity"])

                    # Rebuilding Full Training Set
                    selected = selected.join(Similarity)

                    ##############################################################
                    ##############################################################

                    # Lista de Similares
                    # Initialize an empty list to store DataFrames
                    target = selected.loc[(Role_15_data['Atleta'] == jogador_similar) & (Role_15_data['Liga'] == liga_similar)]
                    target_similarity = target.iat[0, -1]

                    selected["Índice de Similaridade"] = (selected['Similarity']/target_similarity)*100
                    selected["Índice de Similaridade"] = round(selected["Índice de Similaridade"], 2)

                    target = selected.loc[(selected['Atleta'] == jogador_similar) & (selected['Liga'] == liga_similar)]
                    selected['Dif_Similarity'] = abs(selected["Índice de Similaridade"] - 100)

                    selected = selected.sort_values(by='Dif_Similarity')

                    lista_similares = selected.iloc[1:31, np.r_[0, 2, 27, 32, -2:0]]
                    lista_similares = lista_similares.sort_values(by='Rating', ascending=False)
                    lista_similares = lista_similares.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Dif_Similarity':'Diferença de Similaridade'})

                    # Lista de Jogadores Similares Ordenados segundo o Rating
                    st.markdown("<h4 style='text-align: center;'>30 Jogadores + Similares</b></h4>", unsafe_allow_html=True)
                    #st.dataframe(lista_similares, use_container_width=True, hide_index=True)
                    st.markdown("---")    

                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index(drop=True)
                        # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                        formatter = {"Rating": "{:.3f}", "Índice de Similaridade": "{:.2f}", "Diferença de Similaridade": "{:.2f}"}  # Format the 'Rating' column to 3 decimal places
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px',
                                            'font-size': '15px'})

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML without the index and display it
                        styled_html = style_table(lista_similares).to_html(escape=False, index=False, hide_index=True)
                        st.markdown(styled_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    # Lista de Latinos
                    selected_latam = selected.iloc[1:31, :]
                    selected_latam = selected_latam[(selected_latam["Nacionalidade"] == "Argentina")|(selected_latam["Nacionalidade"] == "Brazil")
                                        |(selected_latam["Nacionalidade"] == "Bolivia")|(selected_latam["Nacionalidade"] == "Chile")
                                        |(selected_latam["Nacionalidade"] == "Colombia")|(selected_latam["Nacionalidade"] == "Costa Rica")
                                        |(selected_latam["Nacionalidade"] == "Ecuador")|(selected_latam["Nacionalidade"] == "Mexico")
                                        |(selected_latam["Nacionalidade"] == "Panama")|(selected_latam["Nacionalidade"] == "Paraguay")
                                        |(selected_latam["Nacionalidade"] == "Peru")|(selected_latam["Nacionalidade"] == "Uruguay")
                                        |(selected_latam["Nacionalidade"] == "Venezuela")]
                    lista_similares_latam = selected_latam.iloc[0:30, :]
                    lista_similares_latam = lista_similares_latam.sort_values(by="Rating", ascending = False)

                    #Texto para os Gráficos
                    st.markdown("<h4 style='text-align: center;'><br>5 Jogadores Latinos Similares Melhor Ranquedos</b></h4>", unsafe_allow_html=True)
                    st.markdown("---")    

                    ########################################################################################################
                    # Gerar Gráficos com os 5 melhores
                    # Arquivo para o Gráfico
                    Role_15_Mean_Charts = lista_similares_latam.iloc[:, np.r_[0, 2, 27, 33:43]]
                    target = target.iloc[:, np.r_[0, 2, 27, 33:43]]
                                        # Renomeando Colunas
                    Role_15_Mean_Charts = Role_15_Mean_Charts.rename(columns={'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 
                                                          'Passes_Frontais_Certos_Percentil':'Passes_Frontais_Certos',
                                                            'Passes_Progressivos_Certos_Percentil': 'Passes_Progressivos_Certos', 
                                                            'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos', 
                                                            'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos', 
                                                            'xA_Percentil':'xA', 
                                                            'Assistência_Finalização_Percentil':'Assistência_Finalização', 
                                                            'Passes_TerçoFinal_Certos_Percentil':'Passes_TerçoFinal_Certos', 
                                                            'Passes_EntreLinhas_Certos_Percentil':'Passes_EntreLinhas_Certos', 
                                                            'Passes_Chave_Percentil':'Passes_Chave'})

                    target = target.rename(columns={'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 
                                                          'Passes_Frontais_Certos_Percentil':'Passes_Frontais_Certos',
                                                            'Passes_Progressivos_Certos_Percentil': 'Passes_Progressivos_Certos', 
                                                            'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos', 
                                                            'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos', 
                                                            'xA_Percentil':'xA', 
                                                            'Assistência_Finalização_Percentil':'Assistência_Finalização', 
                                                            'Passes_TerçoFinal_Certos_Percentil':'Passes_TerçoFinal_Certos', 
                                                            'Passes_EntreLinhas_Certos_Percentil':'Passes_EntreLinhas_Certos', 
                                                            'Passes_Chave_Percentil':'Passes_Chave'})                        
                    #Dropping Atleta-alvo
                    Role_15_Mean_Charts = Role_15_Mean_Charts[Role_15_Mean_Charts['Atleta'] != jogador_similar] 
                    #Extraindo 5 melhores
                    Role_15_Mean_Charts = Role_15_Mean_Charts.iloc[0:5, :]

                    ############################################################################################
                    #Primeiro Gráfico
                    Role_15_first = Role_15_Mean_Charts.iloc[0:1, :]
                    Role_15_first = pd.concat([Role_15_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_15_first.iat[0, 1]
                    jogadores_clube = Role_15_first.iat[0, 2]
                    jogadores_liga = Role_15_first.iat[0, 3]
                    alvo = Role_15_first.iat[1, 1]
                    alvo_clube = Role_15_first.iat[1, 2]
                    alvo_liga = Role_15_first.iat[1, 3]

                    #Splitting Data
                    Role_15_first_1 = Role_15_first.iloc[:, np.r_[0:3, 3:9]]
                    Role_15_first_2 = Role_15_first.iloc[:, np.r_[0:3, 8:14]]

                    # Preparing Graph 1
                    params = list(Role_15_first_1.columns)
                    params = params[4:]


                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_15_first_1[params][x])
                        a = 0
                        b = max(Role_15_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_15_first_1['Atleta'])):
                        if Role_15_first_1['Atleta'][x] == jogadores:
                            a_values = Role_15_first_1.iloc[x].values.tolist()
                        if Role_15_first_1['Atleta'][x] == alvo:
                            b_values = Role_15_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_15_first_2.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_15_first_2[params][x])
                        a = 0
                        b = max(Role_15_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_15_first_2['Atleta'])):
                        if Role_15_first_2['Atleta'][x] == jogadores:
                            a_values = Role_15_first_2.iloc[x].values.tolist()
                        if Role_15_first_2['Atleta'][x] == alvo:
                            b_values = Role_15_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)
                    ############################################################################

                    #Segundo Gráfico
                    Role_15_first = Role_15_Mean_Charts.iloc[1:2, :]
                    Role_15_first = pd.concat([Role_15_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_15_first.iat[0, 1]
                    jogadores_clube = Role_15_first.iat[0, 2]
                    jogadores_liga = Role_15_first.iat[0, 3]

                    #Splitting Data
                    Role_15_first_1 = Role_15_first.iloc[:, np.r_[0:3, 3:9]]
                    Role_15_first_2 = Role_15_first.iloc[:, np.r_[0:3, 8:14]]

                    # Preparing Graph 1
                    params = list(Role_15_first_1.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_15_first_1[params][x])
                        a = 0
                        b = max(Role_15_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_15_first_1['Atleta'])):
                        if Role_15_first_1['Atleta'][x] == jogadores:
                            a_values = Role_15_first_1.iloc[x].values.tolist()
                        if Role_15_first_1['Atleta'][x] == alvo:
                            b_values = Role_15_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_15_first_2.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_15_first_2[params][x])
                        a = 0
                        b = max(Role_15_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_15_first_2['Atleta'])):
                        if Role_15_first_2['Atleta'][x] == jogadores:
                            a_values = Role_15_first_2.iloc[x].values.tolist()
                        if Role_15_first_2['Atleta'][x] == alvo:
                            b_values = Role_15_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Terceiro Gráfico
                    Role_15_first = Role_15_Mean_Charts.iloc[2:3, :]
                    Role_15_first = pd.concat([Role_15_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_15_first.iat[0, 1]
                    jogadores_clube = Role_15_first.iat[0, 2]
                    jogadores_liga = Role_15_first.iat[0, 3]

                    #Splitting Data
                    Role_15_first_1 = Role_15_first.iloc[:, np.r_[0:3, 3:9]]
                    Role_15_first_2 = Role_15_first.iloc[:, np.r_[0:3, 8:14]]

                    # Preparing Graph 1
                    params = list(Role_15_first_1.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_15_first_1[params][x])
                        a = 0
                        b = max(Role_15_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_15_first_1['Atleta'])):
                        if Role_15_first_1['Atleta'][x] == jogadores:
                            a_values = Role_15_first_1.iloc[x].values.tolist()
                        if Role_15_first_1['Atleta'][x] == alvo:
                            b_values = Role_15_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_15_first_2.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_15_first_2[params][x])
                        a = 0
                        b = max(Role_15_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_15_first_2['Atleta'])):
                        if Role_15_first_2['Atleta'][x] == jogadores:
                            a_values = Role_15_first_2.iloc[x].values.tolist()
                        if Role_15_first_2['Atleta'][x] == alvo:
                            b_values = Role_15_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Quarto Gráfico
                    Role_15_first = Role_15_Mean_Charts.iloc[3:4, :]
                    Role_15_first = pd.concat([Role_15_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_15_first.iat[0, 1]
                    jogadores_clube = Role_15_first.iat[0, 2]
                    jogadores_liga = Role_15_first.iat[0, 3]

                    #Splitting Data
                    Role_15_first_1 = Role_15_first.iloc[:, np.r_[0:3, 3:9]]
                    Role_15_first_2 = Role_15_first.iloc[:, np.r_[0:3, 8:14]]

                    # Preparing Graph 1
                    params = list(Role_15_first_1.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_15_first_1[params][x])
                        a = 0
                        b = max(Role_15_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_15_first_1['Atleta'])):
                        if Role_15_first_1['Atleta'][x] == jogadores:
                            a_values = Role_15_first_1.iloc[x].values.tolist()
                        if Role_15_first_1['Atleta'][x] == alvo:
                            b_values = Role_15_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_15_first_2.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_15_first_2[params][x])
                        a = 0
                        b = max(Role_15_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_15_first_2['Atleta'])):
                        if Role_15_first_2['Atleta'][x] == jogadores:
                            a_values = Role_15_first_2.iloc[x].values.tolist()
                        if Role_15_first_2['Atleta'][x] == alvo:
                            b_values = Role_15_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Quinto Gráfico
                    Role_15_first = Role_15_Mean_Charts.iloc[4:5, :]
                    Role_15_first = pd.concat([Role_15_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_15_first.iat[0, 1]
                    jogadores_clube = Role_15_first.iat[0, 2]
                    jogadores_liga = Role_15_first.iat[0, 3]

                    #Splitting Data
                    Role_15_first_1 = Role_15_first.iloc[:, np.r_[0:3, 3:9]]
                    Role_15_first_2 = Role_15_first.iloc[:, np.r_[0:3, 8:14]]

                    # Preparing Graph 1
                    params = list(Role_15_first_1.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_15_first_1[params][x])
                        a = 0
                        b = max(Role_15_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_15_first_1['Atleta'])):
                        if Role_15_first_1['Atleta'][x] == jogadores:
                            a_values = Role_15_first_1.iloc[x].values.tolist()
                        if Role_15_first_1['Atleta'][x] == alvo:
                            b_values = Role_15_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_15_first_2.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_15_first_2[params][x])
                        a = 0
                        b = max(Role_15_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_15_first_2['Atleta'])):
                        if Role_15_first_2['Atleta'][x] == jogadores:
                            a_values = Role_15_first_2.iloc[x].values.tolist()
                        if Role_15_first_2['Atleta'][x] == alvo:
                            b_values = Role_15_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

########################################################################################################################
########################################################################################################################
########################################################################################################################
########################################################################################################################

                elif perfil_similar == ("Meia Atacante"):
                    #####################################################################################################################
                    #####################################################################################################################
                    # MeiaAtacante EQUILIBRADO
                    # Texto de Abertura>
                    markdown_amount_1 = f"<div style='text-align:center; font-size:{fontsize}px'>{jogador_similar:}</div>"
                    st.markdown("<h4 style='text-align: center;'>Jogador Selecionado</b></h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_1, unsafe_allow_html=True)
                    st.markdown("---")

                    #Carregando arquivo de dados
                    Role_16_data = pd.read_csv('16_Role_Meia_Atacante_Similarity.csv')
                    Role_16_data = Role_16_data.drop(Role_16_data.columns[0:4], axis=1)
                    Role_16_data.reset_index(drop=True, inplace=True)

                    # Step : Defina o atleta-alvo
                    #base_bruta_similaridade = pd.read_csv("base_bruta_similaridade.csv")
                    target = Role_16_data.loc[(Role_16_data['Atleta'] == jogador_similar)]

                    #Step : Definindo "ID-alvo"
                    given_ID = target.iat[0, -1]

                    # Definição da Base de Trabalho
                    selected = Role_16_data

                    # Step 9: Add columns "1", "2", "3" to Role_16_data

                    selected['1'] = given_ID[0]
                    selected['2'] = given_ID[1]
                    selected['3'] = given_ID[2]
                    selected['4'] = given_ID[3]
                    selected['5'] = given_ID[4]


                    # Assigning correct columns to 1, 2, 3

                    if given_ID[0] == "A":
                        selected['1'] = selected["A1"]
                    elif given_ID[0] == "B":
                        selected['1'] = selected["B1"]
                    elif given_ID[0] == "C":
                        selected['1'] = selected["C1"]
                    elif given_ID[0] == "D":
                        selected['1'] = selected["D1"]
                    elif given_ID[0] == "E":
                        selected['1'] = selected["E1"]
                    elif given_ID[0] == "F":
                        selected['1'] = selected["F1"]
                    elif given_ID[0] == "G":
                        selected['1'] = selected["G1"]
                    elif given_ID[0] == "H":
                        selected['1'] = selected["H1"]
                    elif given_ID[0] == "I":
                        selected['1'] = selected["I1"]
                    elif given_ID[0] == "J":
                        selected['1'] = selected["J1"]
                    elif given_ID[0] == "K":
                        selected['1'] = selected["K1"]
                    elif given_ID[0] == "L":
                        selected['1'] = selected["L1"]
                    elif given_ID[0] == "M":
                        selected['1'] = selected["M1"]
                    elif given_ID[0] == "N":
                        selected['1'] = selected["N1"]
                    elif given_ID[0] == "O":
                        selected['1'] = selected["O1"]
                    elif given_ID[0] == "P":
                        selected['1'] = selected["P1"]
                    elif given_ID[0] == "Q":
                        selected['1'] = selected["Q1"]
                    elif given_ID[0] == "R":
                        selected['1'] = selected["R1"]


                    if given_ID[1] == "A":
                        selected['2'] = selected["A1"]
                    elif given_ID[1] == "B":
                        selected['2'] = selected["B1"]
                    elif given_ID[1] == "C":
                        selected['2'] = selected["C1"]
                    elif given_ID[1] == "D":
                        selected['2'] = selected["D1"]
                    elif given_ID[1] == "E":
                        selected['2'] = selected["E1"]
                    elif given_ID[1] == "F":
                        selected['2'] = selected["F1"]
                    elif given_ID[1] == "G":
                        selected['2'] = selected["G1"]
                    elif given_ID[1] == "H":
                        selected['2'] = selected["H1"]
                    elif given_ID[1] == "I":
                        selected['2'] = selected["I1"]
                    elif given_ID[1] == "J":
                        selected['2'] = selected["J1"]
                    elif given_ID[1] == "K":
                        selected['2'] = selected["K1"]
                    elif given_ID[1] == "L":
                        selected['2'] = selected["L1"]
                    elif given_ID[1] == "M":
                        selected['2'] = selected["M1"]
                    elif given_ID[1] == "N":
                        selected['2'] = selected["N1"]
                    elif given_ID[1] == "O":
                        selected['2'] = selected["O1"]
                    elif given_ID[1] == "P":
                        selected['2'] = selected["P1"]
                    elif given_ID[1] == "Q":
                        selected['2'] = selected["Q1"]
                    elif given_ID[1] == "R":
                        selected['2'] = selected["R1"]
                    
                    
                    if given_ID[2] == "A":
                        selected['3'] = selected["A1"]
                    elif given_ID[2] == "B":
                        selected['3'] = selected["B1"]
                    elif given_ID[2] == "C":
                        selected['3'] = selected["C1"]
                    elif given_ID[2] == "D":
                        selected['3'] = selected["D1"]
                    elif given_ID[2] == "E":
                        selected['3'] = selected["E1"]
                    elif given_ID[2] == "F":
                        selected['3'] = selected["F1"]
                    elif given_ID[2] == "G":
                        selected['3'] = selected["G1"]
                    elif given_ID[2] == "H":
                        selected['3'] = selected["H1"]
                    elif given_ID[2] == "I":
                        selected['3'] = selected["I1"]
                    elif given_ID[2] == "J":
                        selected['3'] = selected["J1"]
                    elif given_ID[2] == "K":
                        selected['3'] = selected["K1"]
                    elif given_ID[2] == "L":
                        selected['3'] = selected["L1"]
                    elif given_ID[2] == "M":
                        selected['3'] = selected["M1"]
                    elif given_ID[2] == "N":
                        selected['3'] = selected["N1"]
                    elif given_ID[2] == "O":
                        selected['3'] = selected["O1"]
                    elif given_ID[2] == "P":
                        selected['3'] = selected["P1"]
                    elif given_ID[2] == "Q":
                        selected['3'] = selected["Q1"]
                    elif given_ID[2] == "R":
                        selected['3'] = selected["R1"]

                    if given_ID[3] == "A":
                        selected['4'] = selected["A1"]
                    elif given_ID[3] == "B":
                        selected['4'] = selected["B1"]
                    elif given_ID[3] == "C":
                        selected['4'] = selected["C1"]
                    elif given_ID[3] == "D":
                        selected['4'] = selected["D1"]
                    elif given_ID[3] == "E":
                        selected['4'] = selected["E1"]
                    elif given_ID[3] == "F":
                        selected['4'] = selected["F1"]
                    elif given_ID[3] == "G":
                        selected['4'] = selected["G1"]
                    elif given_ID[3] == "H":
                        selected['4'] = selected["H1"]
                    elif given_ID[3] == "I":
                        selected['4'] = selected["I1"]
                    elif given_ID[3] == "J":
                        selected['4'] = selected["J1"]
                    elif given_ID[3] == "K":
                        selected['4'] = selected["K1"]
                    elif given_ID[3] == "L":
                        selected['4'] = selected["L1"]
                    elif given_ID[3] == "M":
                        selected['4'] = selected["M1"]
                    elif given_ID[3] == "N":
                        selected['4'] = selected["N1"]
                    elif given_ID[3] == "O":
                        selected['4'] = selected["O1"]
                    elif given_ID[3] == "P":
                        selected['4'] = selected["P1"]
                    elif given_ID[3] == "Q":
                        selected['4'] = selected["Q1"]
                    elif given_ID[3] == "R":
                        selected['4'] = selected["R1"]


                    if given_ID[4] == "A":
                        selected['5'] = selected["A1"]
                    elif given_ID[4] == "B":
                        selected['5'] = selected["B1"]
                    elif given_ID[4] == "C":
                        selected['5'] = selected["C1"]
                    elif given_ID[4] == "D":
                        selected['5'] = selected["D1"]
                    elif given_ID[4] == "E":
                        selected['5'] = selected["E1"]
                    elif given_ID[4] == "F":
                        selected['5'] = selected["F1"]
                    elif given_ID[4] == "G":
                        selected['5'] = selected["G1"]
                    elif given_ID[4] == "H":
                        selected['5'] = selected["H1"]
                    elif given_ID[4] == "I":
                        selected['5'] = selected["I1"]
                    elif given_ID[4] == "J":
                        selected['5'] = selected["J1"]
                    elif given_ID[4] == "K":
                        selected['5'] = selected["K1"]
                    elif given_ID[4] == "L":
                        selected['5'] = selected["L1"]
                    elif given_ID[4] == "M":
                        selected['5'] = selected["M1"]
                    elif given_ID[4] == "N":
                        selected['5'] = selected["N1"]
                    elif given_ID[4] == "O":
                        selected['5'] = selected["O1"]
                    elif given_ID[4] == "P":
                        selected['5'] = selected["P1"]
                    elif given_ID[4] == "Q":
                        selected['5'] = selected["Q1"]
                    elif given_ID[4] == "R":
                        selected['5'] = selected["R1"]

                    #############################################################
                    #############################################################

                    # Applying PCA for Scaled Selected Columns

                    leagues = ["ARG1", "AUT", "BEL1", "BRA1", "BRA2", "BUL", "CHN", 
                            "COL", "DEN", "ENG1", "ENG2", "FRA1", "FRA2", "GER1", 
                            "GER2", "GRE", "HOL", "ITA1", "ITA2", "JAP", "MEX", "PAR", 
                            "POR1", "QAT", "RUS", "SAUD", "SCT", "SER", "SPA1", 
                            "SPA2", "SWZ", "TUR", "UAE", "UKR", "URU", "USA"]

                    # Iterate over each league
                    for league in leagues:

                        # Extract columns 46 through 50
                        MeiaAtacante = selected.iloc[:, np.r_[-5:0]]

                        # Defining Columns
                        MeiaAtacante_columns = MeiaAtacante.columns

                        # Applying PCA
                        pca = PCA(n_components=2)
                        principalComponents = pca.fit_transform(MeiaAtacante)

                        # Create a DataFrame with loadings
                        LoadingsMeiaAtacante = pd.DataFrame(pca.components_.T**2, index=MeiaAtacante_columns, columns=['loading factor 1', 'loading factor 2'])

                        # Multiplying Matrices to obtain Pre_Variables
                        Similarity = pd.DataFrame(np.matmul(MeiaAtacante, LoadingsMeiaAtacante['loading factor 1']) + np.matmul(MeiaAtacante, LoadingsMeiaAtacante['loading factor 2']),
                                                columns=["Similarity"])

                    # Rebuilding Full Training Set
                    #MeiaAtacante = MeiaAtacante.join(Similarity)
                    selected = selected.join(Similarity)

                    ##############################################################
                    ##############################################################

                    # Lista de Similares
                    # Initialize an empty list to store DataFrames
                    target = selected.loc[(Role_16_data['Atleta'] == jogador_similar) & (Role_16_data['Liga'] == liga_similar)]
                    target_similarity = target.iat[0, -1]

                    selected["Índice de Similaridade"] = (selected['Similarity']/target_similarity)*100
                    selected["Índice de Similaridade"] = round(selected["Índice de Similaridade"], 2)

                    target = selected.loc[(selected['Atleta'] == jogador_similar) & (selected['Liga'] == liga_similar)]
                    selected['Dif_Similarity'] = abs(selected["Índice de Similaridade"] - 100)

                    selected = selected.sort_values(by='Dif_Similarity')

                    lista_similares = selected.iloc[1:31, np.r_[0, 2, 34, 39, -2:0]]
                    lista_similares = lista_similares.sort_values(by='Rating', ascending=False)
                    lista_similares = lista_similares.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Dif_Similarity':'Diferença de Similaridade'})

                    # Lista de Jogadores Similares Ordenados segundo o Rating
                    st.markdown("<h4 style='text-align: center;'>30 Jogadores + Similares</b></h4>", unsafe_allow_html=True)
                    #st.dataframe(lista_similares, use_container_width=True, hide_index=True)
                    st.markdown("---")    

                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index(drop=True)
                        # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                        formatter = {"Rating": "{:.3f}", "Índice de Similaridade": "{:.2f}", "Diferença de Similaridade": "{:.2f}"}  # Format the 'Rating' column to 3 decimal places
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px',
                                            'font-size': '15px'})

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML without the index and display it
                        styled_html = style_table(lista_similares).to_html(escape=False, index=False, hide_index=True)
                        st.markdown(styled_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    # Lista de Latinos
                    selected_latam = selected.iloc[1:31, :]
                    selected_latam = selected_latam[(selected_latam["Nacionalidade"] == "Argentina")|(selected_latam["Nacionalidade"] == "Brazil")
                                        |(selected_latam["Nacionalidade"] == "Bolivia")|(selected_latam["Nacionalidade"] == "Chile")
                                        |(selected_latam["Nacionalidade"] == "Colombia")|(selected_latam["Nacionalidade"] == "Costa Rica")
                                        |(selected_latam["Nacionalidade"] == "Ecuador")|(selected_latam["Nacionalidade"] == "Mexico")
                                        |(selected_latam["Nacionalidade"] == "Panama")|(selected_latam["Nacionalidade"] == "Paraguay")
                                        |(selected_latam["Nacionalidade"] == "Peru")|(selected_latam["Nacionalidade"] == "Uruguay")
                                        |(selected_latam["Nacionalidade"] == "Venezuela")]
                    lista_similares_latam = selected_latam.iloc[0:30, :]
                    lista_similares_latam = lista_similares_latam.sort_values(by="Rating", ascending = False)

                    #Texto para os Gráficos
                    st.markdown("<h4 style='text-align: center;'><br>5 Jogadores Latinos Similares Melhor Ranquedos</b></h4>", unsafe_allow_html=True)
                    st.markdown("---")    

                    ########################################################################################################
                    # Gerar Gráficos com os 5 melhores
                    # Arquivo para o Gráfico
                    Role_16_Mean_Charts = lista_similares_latam.iloc[:, np.r_[0, 2, 34, 40:57]]
                    target = target.iloc[:, np.r_[0, 2, 34, 40:57]]
                                        # Renomeando Colunas
                    Role_16_Mean_Charts = Role_16_Mean_Charts.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 'Duelos_Defensivos_Ganhos_Percentil':'Duelos_Defensivos_Ganhos', 'Duelos_Aéreos_Ganhos_Percentil':'Duelos_Aéreos_Ganhos', 'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos',
                                                                                'Passes_Laterais_Certos_Percentil':'Passes_Laterais_Certos', 'Ações_Ofensivas_BemSucedidas_Percentil':'Ações_Ofensivas_BemSucedidas', 'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos', 
                                                                                'Pisadas_Área_Percentil':'Pisadas_Área', 'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos', 'Corridas_Progressivas_Percentil':'Corridas_Progressivas', 'Acelerações_Percentil':'Acelerações', 
                                                                                'xA_Percentil':'xA', 'Assistência_Finalização_Percentil':'Assistência_Finalização', 'Passes_TerçoFinal_Certos_Percentil':'Passes_TerçoFinal_Certos', 'Deep_Completions_Percentil':'Deep_Completions',
                                                                                    'Deep_Completed_Crosses_Percentil':'Deep_Completed_Crosses', 'Passes_ÁreaPênalti_Certos_Percentil':'Passes_ÁreaPênalti_Certos'})

                    target = target.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 'Duelos_Defensivos_Ganhos_Percentil':'Duelos_Defensivos_Ganhos', 'Duelos_Aéreos_Ganhos_Percentil':'Duelos_Aéreos_Ganhos', 'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos',
                                                                                'Passes_Laterais_Certos_Percentil':'Passes_Laterais_Certos', 'Ações_Ofensivas_BemSucedidas_Percentil':'Ações_Ofensivas_BemSucedidas', 'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos', 
                                                                                'Pisadas_Área_Percentil':'Pisadas_Área', 'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos', 'Corridas_Progressivas_Percentil':'Corridas_Progressivas', 'Acelerações_Percentil':'Acelerações', 
                                                                                'xA_Percentil':'xA', 'Assistência_Finalização_Percentil':'Assistência_Finalização', 'Passes_TerçoFinal_Certos_Percentil':'Passes_TerçoFinal_Certos', 'Deep_Completions_Percentil':'Deep_Completions',
                                                                                    'Deep_Completed_Crosses_Percentil':'Deep_Completed_Crosses', 'Passes_ÁreaPênalti_Certos_Percentil':'Passes_ÁreaPênalti_Certos'})                        
                    #Dropping Atleta-alvo
                    Role_16_Mean_Charts = Role_16_Mean_Charts[Role_16_Mean_Charts['Atleta'] != jogador_similar] 
                    #Extraindo 5 melhores
                    Role_16_Mean_Charts = Role_16_Mean_Charts.iloc[0:5, :]

                    ############################################################################################
                    #Primeiro Gráfico
                    Role_16_first = Role_16_Mean_Charts.iloc[0:1, :]
                    Role_16_first = pd.concat([Role_16_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_16_first.iat[0, 1]
                    jogadores_clube = Role_16_first.iat[0, 2]
                    jogadores_liga = Role_16_first.iat[0, 3]
                    alvo = Role_16_first.iat[1, 1]
                    alvo_clube = Role_16_first.iat[1, 2]
                    alvo_liga = Role_16_first.iat[1, 3]

                    #Splitting Data
                    Role_16_first_1 = Role_16_first.iloc[:, np.r_[0:3, 3:13]]
                    Role_16_first_2 = Role_16_first.iloc[:, np.r_[0:3, 13:21]]

                    # Preparing Graph 1
                    params = list(Role_16_first_1.columns)
                    params = params[4:]


                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_16_first_1[params][x])
                        a = 0
                        b = max(Role_16_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_16_first_1['Atleta'])):
                        if Role_16_first_1['Atleta'][x] == jogadores:
                            a_values = Role_16_first_1.iloc[x].values.tolist()
                        if Role_16_first_1['Atleta'][x] == alvo:
                            b_values = Role_16_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_16_first_2.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_16_first_2[params][x])
                        a = 0
                        b = max(Role_16_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_16_first_2['Atleta'])):
                        if Role_16_first_2['Atleta'][x] == jogadores:
                            a_values = Role_16_first_2.iloc[x].values.tolist()
                        if Role_16_first_2['Atleta'][x] == alvo:
                            b_values = Role_16_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)
                    ############################################################################

                    #Segundo Gráfico
                    Role_16_first = Role_16_Mean_Charts.iloc[1:2, :]
                    Role_16_first = pd.concat([Role_16_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_16_first.iat[0, 1]
                    jogadores_clube = Role_16_first.iat[0, 2]
                    jogadores_liga = Role_16_first.iat[0, 3]
                    alvo = Role_16_first.iat[1, 1]
                    alvo_clube = Role_16_first.iat[1, 2]
                    alvo_liga = Role_16_first.iat[1, 3]

                    #Splitting Data
                    Role_16_first_1 = Role_16_first.iloc[:, np.r_[0:3, 3:13]]
                    Role_16_first_2 = Role_16_first.iloc[:, np.r_[0:3, 13:21]]

                    # Preparing Graph 1
                    params = list(Role_16_first_1.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_16_first_1[params][x])
                        a = 0
                        b = max(Role_16_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_16_first_1['Atleta'])):
                        if Role_16_first_1['Atleta'][x] == jogadores:
                            a_values = Role_16_first_1.iloc[x].values.tolist()
                        if Role_16_first_1['Atleta'][x] == alvo:
                            b_values = Role_16_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_16_first_2.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_16_first_2[params][x])
                        a = 0
                        b = max(Role_16_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_16_first_2['Atleta'])):
                        if Role_16_first_2['Atleta'][x] == jogadores:
                            a_values = Role_16_first_2.iloc[x].values.tolist()
                        if Role_16_first_2['Atleta'][x] == alvo:
                            b_values = Role_16_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Terceiro Gráfico
                    Role_16_first = Role_16_Mean_Charts.iloc[2:3, :]
                    Role_16_first = pd.concat([Role_16_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_16_first.iat[0, 1]
                    jogadores_clube = Role_16_first.iat[0, 2]
                    jogadores_liga = Role_16_first.iat[0, 3]
                    #alvo = Role_16_first.iat[1, 1]
                    #alvo_clube = Role_16_first.iat[1, 2]
                    #alvo_liga = Role_16_first.iat[1, 3]

                    #Splitting Data
                    Role_16_first_1 = Role_16_first.iloc[:, np.r_[0:3, 3:13]]
                    Role_16_first_2 = Role_16_first.iloc[:, np.r_[0:3, 13:21]]

                    # Preparing Graph 1
                    params = list(Role_16_first_1.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_16_first_1[params][x])
                        a = 0
                        b = max(Role_16_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_16_first_1['Atleta'])):
                        if Role_16_first_1['Atleta'][x] == jogadores:
                            a_values = Role_16_first_1.iloc[x].values.tolist()
                        if Role_16_first_1['Atleta'][x] == alvo:
                            b_values = Role_16_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_16_first_2.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_16_first_2[params][x])
                        a = 0
                        b = max(Role_16_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_16_first_2['Atleta'])):
                        if Role_16_first_2['Atleta'][x] == jogadores:
                            a_values = Role_16_first_2.iloc[x].values.tolist()
                        if Role_16_first_2['Atleta'][x] == alvo:
                            b_values = Role_16_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Quarto Gráfico
                    Role_16_first = Role_16_Mean_Charts.iloc[3:4, :]
                    Role_16_first = pd.concat([Role_16_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_16_first.iat[0, 1]
                    jogadores_clube = Role_16_first.iat[0, 2]
                    jogadores_liga = Role_16_first.iat[0, 3]
                    #alvo = Role_16_first.iat[1, 1]
                    #alvo_clube = Role_16_first.iat[1, 2]
                    #alvo_liga = Role_16_first.iat[1, 3]

                    #Splitting Data
                    Role_16_first_1 = Role_16_first.iloc[:, np.r_[0:3, 3:13]]
                    Role_16_first_2 = Role_16_first.iloc[:, np.r_[0:3, 13:21]]

                    # Preparing Graph 1
                    params = list(Role_16_first_1.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_16_first_1[params][x])
                        a = 0
                        b = max(Role_16_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_16_first_1['Atleta'])):
                        if Role_16_first_1['Atleta'][x] == jogadores:
                            a_values = Role_16_first_1.iloc[x].values.tolist()
                        if Role_16_first_1['Atleta'][x] == alvo:
                            b_values = Role_16_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_16_first_2.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_16_first_2[params][x])
                        a = 0
                        b = max(Role_16_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_16_first_2['Atleta'])):
                        if Role_16_first_2['Atleta'][x] == jogadores:
                            a_values = Role_16_first_2.iloc[x].values.tolist()
                        if Role_16_first_2['Atleta'][x] == alvo:
                            b_values = Role_16_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Quinto Gráfico
                    Role_16_first = Role_16_Mean_Charts.iloc[4:5, :]
                    Role_16_first = pd.concat([Role_16_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_16_first.iat[0, 1]
                    jogadores_clube = Role_16_first.iat[0, 2]
                    jogadores_liga = Role_16_first.iat[0, 3]
                    #alvo = Role_16_first.iat[1, 1]
                    #alvo_clube = Role_16_first.iat[1, 2]
                    #alvo_liga = Role_16_first.iat[1, 3]

                    #Splitting Data
                    Role_16_first_1 = Role_16_first.iloc[:, np.r_[0:3, 3:13]]
                    Role_16_first_2 = Role_16_first.iloc[:, np.r_[0:3, 13:21]]

                    # Preparing Graph 1
                    params = list(Role_16_first_1.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_16_first_1[params][x])
                        a = 0
                        b = max(Role_16_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_16_first_1['Atleta'])):
                        if Role_16_first_1['Atleta'][x] == jogadores:
                            a_values = Role_16_first_1.iloc[x].values.tolist()
                        if Role_16_first_1['Atleta'][x] == alvo:
                            b_values = Role_16_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_16_first_2.columns)
                    params = params[4:]

                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_16_first_2[params][x])
                        a = 0
                        b = max(Role_16_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_16_first_2['Atleta'])):
                        if Role_16_first_2['Atleta'][x] == jogadores:
                            a_values = Role_16_first_2.iloc[x].values.tolist()
                        if Role_16_first_2['Atleta'][x] == alvo:
                            b_values = Role_16_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

########################################################################################################################
########################################################################################################################
########################################################################################################################
########################################################################################################################

                if perfil_similar == ("Extremo Organizador"):
                ###############################################################################
                ###########################################################################
                    # PRIMEIRO VOLANTE EQUILIBRADO
                    # Texto de Abertura>
                    markdown_amount_1 = f"<div style='text-align:center; font-size:{fontsize}px'>{jogador_similar:}</div>"
                    st.markdown("<h4 style='text-align: center;'>Jogador Selecionado</b></h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_1, unsafe_allow_html=True)
                    st.markdown("---")

                    #Carregando arquivo de dados
                    Role_17_data = pd.read_csv('17_Role_Extremo_Organizador_Similarity.csv')
                    Role_17_data = Role_17_data.drop(Role_17_data.columns[0:4], axis=1)
                    Role_17_data.reset_index(drop=True, inplace=True)

                    # Step : Defina o atleta-alvo
                    #base_bruta_similaridade = pd.read_csv("base_bruta_similaridade.csv")
                    target = Role_17_data.loc[(Role_17_data['Atleta'] == jogador_similar)]

                    #Step : Definindo "ID-alvo"
                    given_ID = target.iat[0, -1]
                    
                    selected = Role_17_data

                    # Step 9: Add columns "1", "2", "3" to Role_17_data

                    selected['1'] = given_ID[0]
                    selected['2'] = given_ID[1]
                    selected['3'] = given_ID[2]
                    selected['4'] = given_ID[3]

                    # Assigning correct columns to 1, 2, 3

                    if given_ID[0] == "A":
                        selected['1'] = selected["A1"]
                    elif given_ID[0] == "B":
                        selected['1'] = selected["B1"]
                    elif given_ID[0] == "C":
                        selected['1'] = selected["C1"]
                    elif given_ID[0] == "D":
                        selected['1'] = selected["D1"]
                    elif given_ID[0] == "E":
                        selected['1'] = selected["E1"]
                    elif given_ID[0] == "F":
                        selected['1'] = selected["F1"]
                    elif given_ID[0] == "G":
                        selected['1'] = selected["G1"]
                    elif given_ID[0] == "H":
                        selected['1'] = selected["H1"]
                    elif given_ID[0] == "I":
                        selected['1'] = selected["I1"]
                    elif given_ID[0] == "J":
                        selected['1'] = selected["J1"]
                    elif given_ID[0] == "K":
                        selected['1'] = selected["K1"]
                    elif given_ID[0] == "L":
                        selected['1'] = selected["L1"]
                    elif given_ID[0] == "M":
                        selected['1'] = selected["M1"]


                    if given_ID[1] == "A":
                        selected['2'] = selected["A1"]
                    elif given_ID[1] == "B":
                        selected['2'] = selected["B1"]
                    elif given_ID[1] == "C":
                        selected['2'] = selected["C1"]
                    elif given_ID[1] == "D":
                        selected['2'] = selected["D1"]
                    elif given_ID[1] == "E":
                        selected['2'] = selected["E1"]
                    elif given_ID[1] == "F":
                        selected['2'] = selected["F1"]
                    elif given_ID[1] == "G":
                        selected['2'] = selected["G1"]
                    elif given_ID[1] == "H":
                        selected['2'] = selected["H1"]
                    elif given_ID[1] == "I":
                        selected['2'] = selected["I1"]
                    elif given_ID[1] == "J":
                        selected['2'] = selected["J1"]
                    elif given_ID[1] == "K":
                        selected['2'] = selected["K1"]
                    elif given_ID[1] == "L":
                        selected['2'] = selected["L1"]
                    elif given_ID[1] == "M":
                        selected['2'] = selected["M1"]
                    
                    
                    if given_ID[2] == "A":
                        selected['3'] = selected["A1"]
                    elif given_ID[2] == "B":
                        selected['3'] = selected["B1"]
                    elif given_ID[2] == "C":
                        selected['3'] = selected["C1"]
                    elif given_ID[2] == "D":
                        selected['3'] = selected["D1"]
                    elif given_ID[2] == "E":
                        selected['3'] = selected["E1"]
                    elif given_ID[2] == "F":
                        selected['3'] = selected["F1"]
                    elif given_ID[2] == "G":
                        selected['3'] = selected["G1"]
                    elif given_ID[2] == "H":
                        selected['3'] = selected["H1"]
                    elif given_ID[2] == "I":
                        selected['3'] = selected["I1"]
                    elif given_ID[2] == "J":
                        selected['3'] = selected["J1"]
                    elif given_ID[2] == "K":
                        selected['3'] = selected["K1"]
                    elif given_ID[2] == "L":
                        selected['3'] = selected["L1"]
                    elif given_ID[2] == "M":
                        selected['3'] = selected["M1"]

                    if given_ID[3] == "A":
                        selected['4'] = selected["A1"]
                    elif given_ID[3] == "B":
                        selected['4'] = selected["B1"]
                    elif given_ID[3] == "C":
                        selected['4'] = selected["C1"]
                    elif given_ID[3] == "D":
                        selected['4'] = selected["D1"]
                    elif given_ID[3] == "E":
                        selected['4'] = selected["E1"]
                    elif given_ID[3] == "F":
                        selected['4'] = selected["F1"]
                    elif given_ID[3] == "G":
                        selected['4'] = selected["G1"]
                    elif given_ID[3] == "H":
                        selected['4'] = selected["H1"]
                    elif given_ID[3] == "I":
                        selected['4'] = selected["I1"]
                    elif given_ID[3] == "J":
                        selected['4'] = selected["J1"]
                    elif given_ID[3] == "K":
                        selected['4'] = selected["K1"]
                    elif given_ID[3] == "L":
                        selected['4'] = selected["L1"]
                    elif given_ID[3] == "M":
                        selected['4'] = selected["M1"]

                    # Applying PCA for Scaled Selected Columns

                    leagues = ["ARG1", "AUT", "BEL1", "BRA1", "BRA2", "BUL", "CHN", 
                            "COL", "DEN", "ENG1", "ENG2", "FRA1", "FRA2", "GER1", 
                            "GER2", "GRE", "HOL", "ITA1", "ITA2", "JAP", "MEX", "PAR", 
                            "POR1", "QAT", "RUS", "SAUD", "SCT", "SER", "SPA1", 
                            "SPA2", "SWZ", "TUR", "UAE", "UKR", "URU", "USA"]

                    # Iterate over each league
                    for league in leagues:

                        # Extract columns 46 through 50
                        ExtremoOrganizador = selected.iloc[:, np.r_[-4:0]]

                        # Defining Columns
                        ExtremoOrganizador_columns = ExtremoOrganizador.columns

                        # Applying PCA
                        pca = PCA(n_components=2)
                        principalComponents = pca.fit_transform(ExtremoOrganizador)

                        # Create a DataFrame with loadings
                        LoadingsExtremoOrganizador = pd.DataFrame(pca.components_.T**2, index=ExtremoOrganizador_columns, columns=['loading factor 1', 'loading factor 2'])

                        # Multiplying Matrices to obtain Pre_Variables
                        Similarity = pd.DataFrame(np.matmul(ExtremoOrganizador, LoadingsExtremoOrganizador['loading factor 1']) + np.matmul(ExtremoOrganizador, LoadingsExtremoOrganizador['loading factor 2']),
                                                columns=["Similarity"])

                    # Rebuilding Full Training Set
                    selected = selected.join(Similarity)

                    ##############################################################
                    ##############################################################

                    # Lista de Similares
                    # Initialize an empty list to store DataFrames
                    target = selected.loc[(Role_17_data['Atleta'] == jogador_similar) & (Role_17_data['Liga'] == liga_similar)]
                    target_similarity = target.iat[0, -1]

                    selected["Índice de Similaridade"] = (selected['Similarity']/target_similarity)*100
                    selected["Índice de Similaridade"] = round(selected["Índice de Similaridade"], 2)

                    target = selected.loc[(selected['Atleta'] == jogador_similar) & (selected['Liga'] == liga_similar)]
                    selected['Dif_Similarity'] = abs(selected["Índice de Similaridade"] - 100)

                    selected = selected.sort_values(by='Dif_Similarity')

                    lista_similares = selected.iloc[1:31, np.r_[0, 2, 30, 35, -2:0]]
                    lista_similares = lista_similares.sort_values(by='Rating', ascending=False)
                    lista_similares = lista_similares.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Dif_Similarity':'Diferença de Similaridade'})

                    # Lista de Jogadores Similares Ordenados segundo o Rating
                    st.markdown("<h4 style='text-align: center;'>30 Jogadores + Similares</b></h4>", unsafe_allow_html=True)
                    #st.dataframe(lista_similares, use_container_width=True, hide_index=True)
                    st.markdown("---")

                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index(drop=True)
                        # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                        formatter = {"Rating": "{:.3f}", "Índice de Similaridade": "{:.2f}", "Diferença de Similaridade": "{:.2f}"}  # Format the 'Rating' column to 3 decimal places
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px',
                                            'font-size': '15px'})

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML without the index and display it
                        styled_html = style_table(lista_similares).to_html(escape=False, index=False, hide_index=True)
                        st.markdown(styled_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    # Lista de Latinos
                    selected_latam = selected.iloc[1:31, :]
                    selected_latam = selected_latam[(selected_latam["Nacionalidade"] == "Argentina")|(selected_latam["Nacionalidade"] == "Brazil")
                                        |(selected_latam["Nacionalidade"] == "Bolivia")|(selected_latam["Nacionalidade"] == "Chile")
                                        |(selected_latam["Nacionalidade"] == "Colombia")|(selected_latam["Nacionalidade"] == "Costa Rica")
                                        |(selected_latam["Nacionalidade"] == "Ecuador")|(selected_latam["Nacionalidade"] == "Mexico")
                                        |(selected_latam["Nacionalidade"] == "Panama")|(selected_latam["Nacionalidade"] == "Paraguay")
                                        |(selected_latam["Nacionalidade"] == "Peru")|(selected_latam["Nacionalidade"] == "Uruguay")
                                        |(selected_latam["Nacionalidade"] == "Venezuela")]
                    lista_similares_latam = selected_latam.iloc[0:30, :]
                    lista_similares_latam = lista_similares_latam.sort_values(by="Rating", ascending = False)

                    #Texto para os Gráficos
                    st.markdown("<h4 style='text-align: center;'><br>5 Jogadores Latinos Similares Melhor Ranquedos</b></h4>", unsafe_allow_html=True)
                    st.markdown("---")    


                    # Gerar Gráficos com os 5 melhores
                    # Arquivo para o Gráfico
                    Role_17_Mean_Charts = lista_similares_latam.iloc[:, np.r_[0, 2, 30, 36:49]]
                    target = target.iloc[:, np.r_[0, 2, 30, 36:49]]
                    # Renomeando Colunas
                    Role_17_Mean_Charts = Role_17_Mean_Charts.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 'Duelos_Defensivos_Ganhos_Percentil':'Duelos_Defensivos_Ganhos', 'Duelos_Aéreos_Ganhos_Percentil':'Duelos_Aéreos_Ganhos',
                                                                                'Finalizações_Bloqueadas_Percentil':'Finalizações_Bloqueadas', 'Interceptações_Ajustadas_a_Posse_Percentil':'Interceptações_Ajustadas_a_Posse', 'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 
                                                                                'Passes_Frontais_Certos_Percentil':'Passes_Frontais_Certos', 'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos', 'Passes_Laterais_Certos_Percentil':'Passes_Laterais_Certos', 'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos', 
                                                                                'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos', 'Corridas_Progressivas_Percentil':'Corridas_Progressivas', 'Passes_TerçoFinal_Certos_Percentil':'Passes_TerçoFinal_Certos'})
                    
                    target = target.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 'Duelos_Defensivos_Ganhos_Percentil':'Duelos_Defensivos_Ganhos', 'Duelos_Aéreos_Ganhos_Percentil':'Duelos_Aéreos_Ganhos',
                                                                                'Finalizações_Bloqueadas_Percentil':'Finalizações_Bloqueadas', 'Interceptações_Ajustadas_a_Posse_Percentil':'Interceptações_Ajustadas_a_Posse', 'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 
                                                                                'Passes_Frontais_Certos_Percentil':'Passes_Frontais_Certos', 'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos', 'Passes_Laterais_Certos_Percentil':'Passes_Laterais_Certos', 'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos', 
                                                                                'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos', 'Corridas_Progressivas_Percentil':'Corridas_Progressivas', 'Passes_TerçoFinal_Certos_Percentil':'Passes_TerçoFinal_Certos'})
                    #Dropping Atleta-alvo
                    Role_17_Mean_Charts = Role_17_Mean_Charts[Role_17_Mean_Charts['Atleta'] != jogador_similar] 
                    #Extraindo 5 melhores
                    Role_17_Mean_Charts = Role_17_Mean_Charts.iloc[0:5, :]


                    #Primeiro Gráfico
                    Role_17_first = Role_17_Mean_Charts.iloc[0:1, :]
                    Role_17_first = pd.concat([Role_17_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_17_first.iat[0, 1]
                    jogadores_clube = Role_17_first.iat[0, 2]
                    jogadores_liga = Role_17_first.iat[0, 3]
                    alvo = Role_17_first.iat[1, 1]
                    alvo_clube = Role_17_first.iat[1, 2]
                    alvo_liga = Role_17_first.iat[1, 3]

                    #Splitting Data
                    Role_17_first_1 = Role_17_first.iloc[:, np.r_[0:3, 3:11]]
                    Role_17_first_2 = Role_17_first.iloc[:, np.r_[0:3, 11:17]]

                    # Preparing Graph 1
                    params = list(Role_17_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_17_first_1[params][x])
                        a = 0
                        b = max(Role_17_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_17_first_1['Atleta'])):
                        if Role_17_first_1['Atleta'][x] == jogadores:
                            a_values = Role_17_first_1.iloc[x].values.tolist()
                        if Role_17_first_1['Atleta'][x] == alvo:
                            b_values = Role_17_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_17_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_17_first_2[params][x])
                        a = 0
                        b = max(Role_17_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_17_first_2['Atleta'])):
                        if Role_17_first_2['Atleta'][x] == jogadores:
                            a_values = Role_17_first_2.iloc[x].values.tolist()
                        if Role_17_first_2['Atleta'][x] == alvo:
                            b_values = Role_17_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################

                    #Segundo Gráfico
                    Role_17_first = Role_17_Mean_Charts.iloc[1:2, :]
                    Role_17_first = pd.concat([Role_17_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_17_first.iat[0, 1]
                    jogadores_clube = Role_17_first.iat[0, 2]
                    jogadores_liga = Role_17_first.iat[0, 3]
                    #alvo = Role_17_first.iat[1, 1]
                    #alvo_clube = Role_17_first.iat[1, 2]
                    #alvo_liga = Role_17_first.iat[1, 3]

                    #Splitting Data
                    Role_17_first_1 = Role_17_first.iloc[:, np.r_[0:3, 3:11]]
                    Role_17_first_2 = Role_17_first.iloc[:, np.r_[0:3, 11:17]]

                    # Preparing Graph 1
                    params = list(Role_17_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_17_first_1[params][x])
                        a = 0
                        b = max(Role_17_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_17_first_1['Atleta'])):
                        if Role_17_first_1['Atleta'][x] == jogadores:
                            a_values = Role_17_first_1.iloc[x].values.tolist()
                        if Role_17_first_1['Atleta'][x] == alvo:
                            b_values = Role_17_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_17_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_17_first_2[params][x])
                        a = 0
                        b = max(Role_17_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_17_first_2['Atleta'])):
                        if Role_17_first_2['Atleta'][x] == jogadores:
                            a_values = Role_17_first_2.iloc[x].values.tolist()
                        if Role_17_first_2['Atleta'][x] == alvo:
                            b_values = Role_17_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Terceiro Gráfico
                    Role_17_first = Role_17_Mean_Charts.iloc[2:3, :]
                    Role_17_first = pd.concat([Role_17_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_17_first.iat[0, 1]
                    jogadores_clube = Role_17_first.iat[0, 2]
                    jogadores_liga = Role_17_first.iat[0, 3]
                    #alvo = Role_17_first.iat[1, 1]
                    #alvo_clube = Role_17_first.iat[1, 2]
                    #alvo_liga = Role_17_first.iat[1, 3]

                    #Splitting Data
                    Role_17_first_1 = Role_17_first.iloc[:, np.r_[0:3, 3:11]]
                    Role_17_first_2 = Role_17_first.iloc[:, np.r_[0:3, 11:17]]

                    # Preparing Graph 1
                    params = list(Role_17_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_17_first_1[params][x])
                        a = 0
                        b = max(Role_17_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_17_first_1['Atleta'])):
                        if Role_17_first_1['Atleta'][x] == jogadores:
                            a_values = Role_17_first_1.iloc[x].values.tolist()
                        if Role_17_first_1['Atleta'][x] == alvo:
                            b_values = Role_17_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_17_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_17_first_2[params][x])
                        a = 0
                        b = max(Role_17_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_17_first_2['Atleta'])):
                        if Role_17_first_2['Atleta'][x] == jogadores:
                            a_values = Role_17_first_2.iloc[x].values.tolist()
                        if Role_17_first_2['Atleta'][x] == alvo:
                            b_values = Role_17_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Quarto Gráfico
                    Role_17_first = Role_17_Mean_Charts.iloc[3:4, :]
                    Role_17_first = pd.concat([Role_17_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_17_first.iat[0, 1]
                    jogadores_clube = Role_17_first.iat[0, 2]
                    jogadores_liga = Role_17_first.iat[0, 3]
                    #alvo = Role_17_first.iat[1, 1]
                    #alvo_clube = Role_17_first.iat[1, 2]
                    #alvo_liga = Role_17_first.iat[1, 3]

                    #Splitting Data
                    Role_17_first_1 = Role_17_first.iloc[:, np.r_[0:3, 3:11]]
                    Role_17_first_2 = Role_17_first.iloc[:, np.r_[0:3, 11:17]]

                    # Preparing Graph 1
                    params = list(Role_17_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_17_first_1[params][x])
                        a = 0
                        b = max(Role_17_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_17_first_1['Atleta'])):
                        if Role_17_first_1['Atleta'][x] == jogadores:
                            a_values = Role_17_first_1.iloc[x].values.tolist()
                        if Role_17_first_1['Atleta'][x] == alvo:
                            b_values = Role_17_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_17_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_17_first_2[params][x])
                        a = 0
                        b = max(Role_17_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_17_first_2['Atleta'])):
                        if Role_17_first_2['Atleta'][x] == jogadores:
                            a_values = Role_17_first_2.iloc[x].values.tolist()
                        if Role_17_first_2['Atleta'][x] == alvo:
                            b_values = Role_17_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Quinto Gráfico
                    Role_17_first = Role_17_Mean_Charts.iloc[4:5, :]
                    Role_17_first = pd.concat([Role_17_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_17_first.iat[0, 1]
                    jogadores_clube = Role_17_first.iat[0, 2]
                    jogadores_liga = Role_17_first.iat[0, 3]
                    #alvo = Role_17_first.iat[1, 1]
                    #alvo_clube = Role_17_first.iat[1, 2]
                    #alvo_liga = Role_17_first.iat[1, 3]

                    #Splitting Data
                    Role_17_first_1 = Role_17_first.iloc[:, np.r_[0:3, 3:11]]
                    Role_17_first_2 = Role_17_first.iloc[:, np.r_[0:3, 11:17]]

                    # Preparing Graph 1
                    params = list(Role_17_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_17_first_1[params][x])
                        a = 0
                        b = max(Role_17_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_17_first_1['Atleta'])):
                        if Role_17_first_1['Atleta'][x] == jogadores:
                            a_values = Role_17_first_1.iloc[x].values.tolist()
                        if Role_17_first_1['Atleta'][x] == alvo:
                            b_values = Role_17_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_17_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_17_first_2[params][x])
                        a = 0
                        b = max(Role_17_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_17_first_2['Atleta'])):
                        if Role_17_first_2['Atleta'][x] == jogadores:
                            a_values = Role_17_first_2.iloc[x].values.tolist()
                        if Role_17_first_2['Atleta'][x] == alvo:
                            b_values = Role_17_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)
                    #####################################################################################################################
                    #####################################################################################################################
                    #####################################################################################################################
                    #####################################################################################################################
                    #####################################################################################################################
                    #####################################################################################################################

                if perfil_similar == ("Extremo Tático"):
                ###############################################################################
                ###########################################################################
                    # EXTREMO TÁTICO
                    # Texto de Abertura>
                    markdown_amount_1 = f"<div style='text-align:center; font-size:{fontsize}px'>{jogador_similar:}</div>"
                    st.markdown("<h4 style='text-align: center;'>Jogador Selecionado</b></h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_1, unsafe_allow_html=True)
                    st.markdown("---")

                    #Carregando arquivo de dados
                    Role_18_data = pd.read_csv('18_Role_Extremo_Tático_Similarity.csv')
                    Role_18_data = Role_18_data.drop(Role_18_data.columns[0:4], axis=1)
                    Role_18_data.reset_index(drop=True, inplace=True)

                    # Step : Defina o atleta-alvo
                    #base_bruta_similaridade = pd.read_csv("base_bruta_similaridade.csv")
                    target = Role_18_data.loc[(Role_18_data['Atleta'] == jogador_similar)]

                    #Step : Definindo "ID-alvo"
                    given_ID = target.iat[0, -1]
                    
                    selected = Role_18_data

                    # Step 9: Add columns "1", "2", "3" to Role_18_data

                    selected['1'] = given_ID[0]
                    selected['2'] = given_ID[1]
                    selected['3'] = given_ID[2]


                    # Assigning correct columns to 1, 2, 3

                    if given_ID[0] == "A":
                        selected['1'] = selected["A1"]
                    elif given_ID[0] == "B":
                        selected['1'] = selected["B1"]
                    elif given_ID[0] == "C":
                        selected['1'] = selected["C1"]
                    elif given_ID[0] == "D":
                        selected['1'] = selected["D1"]
                    elif given_ID[0] == "E":
                        selected['1'] = selected["E1"]
                    elif given_ID[0] == "F":
                        selected['1'] = selected["F1"]
                    elif given_ID[0] == "G":
                        selected['1'] = selected["G1"]



                    if given_ID[1] == "A":
                        selected['2'] = selected["A1"]
                    elif given_ID[1] == "B":
                        selected['2'] = selected["B1"]
                    elif given_ID[1] == "C":
                        selected['2'] = selected["C1"]
                    elif given_ID[1] == "D":
                        selected['2'] = selected["D1"]
                    elif given_ID[1] == "E":
                        selected['2'] = selected["E1"]
                    elif given_ID[1] == "F":
                        selected['2'] = selected["F1"]
                    elif given_ID[1] == "G":
                        selected['2'] = selected["G1"]
                    
                    
                    if given_ID[2] == "A":
                        selected['3'] = selected["A1"]
                    elif given_ID[2] == "B":
                        selected['3'] = selected["B1"]
                    elif given_ID[2] == "C":
                        selected['3'] = selected["C1"]
                    elif given_ID[2] == "D":
                        selected['3'] = selected["D1"]
                    elif given_ID[2] == "E":
                        selected['3'] = selected["E1"]
                    elif given_ID[2] == "F":
                        selected['3'] = selected["F1"]
                    elif given_ID[2] == "G":
                        selected['3'] = selected["G1"]

                    # Applying PCA for Scaled Selected Columns

                    leagues = ["ARG1", "AUT", "BEL1", "BRA1", "BRA2", "BUL", "CHN", 
                            "COL", "DEN", "ENG1", "ENG2", "FRA1", "FRA2", "GER1", 
                            "GER2", "GRE", "HOL", "ITA1", "ITA2", "JAP", "MEX", "PAR", 
                            "POR1", "QAT", "RUS", "SAUD", "SCT", "SER", "SPA1", 
                            "SPA2", "SWZ", "TUR", "UAE", "UKR", "URU", "USA"]

                    # Iterate over each league
                    for league in leagues:

                        # Extract columns 46 through 50
                        ExtremoTático = selected.iloc[:, np.r_[-3:0]]

                        # Defining Columns
                        ExtremoTático_columns = ExtremoTático.columns

                        # Applying PCA
                        pca = PCA(n_components=2)
                        principalComponents = pca.fit_transform(ExtremoTático)

                        # Create a DataFrame with loadings
                        LoadingsExtremoTático = pd.DataFrame(pca.components_.T**2, index=ExtremoTático_columns, columns=['loading factor 1', 'loading factor 2'])

                        # Multiplying Matrices to obtain Pre_Variables
                        Similarity = pd.DataFrame(np.matmul(ExtremoTático, LoadingsExtremoTático['loading factor 1']) + np.matmul(ExtremoTático, LoadingsExtremoTático['loading factor 2']),
                                                columns=["Similarity"])

                    # Rebuilding Full Training Set
                    selected = selected.join(Similarity)

                    ##############################################################
                    ##############################################################

                    # Lista de Similares
                    # Initialize an empty list to store DataFrames
                    target = selected.loc[(Role_18_data['Atleta'] == jogador_similar) & (Role_18_data['Liga'] == liga_similar)]
                    target_similarity = target.iat[0, -1]

                    selected["Índice de Similaridade"] = (selected['Similarity']/target_similarity)*100
                    selected["Índice de Similaridade"] = round(selected["Índice de Similaridade"], 2)

                    target = selected.loc[(selected['Atleta'] == jogador_similar) & (selected['Liga'] == liga_similar)]
                    selected['Dif_Similarity'] = abs(selected["Índice de Similaridade"] - 100)

                    selected = selected.sort_values(by='Dif_Similarity')

                    lista_similares = selected.iloc[1:31, np.r_[0, 2, 24, 29, -2:0]]
                    lista_similares = lista_similares.sort_values(by='Rating', ascending=False)
                    lista_similares = lista_similares.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Dif_Similarity':'Diferença de Similaridade'})

                    # Lista de Jogadores Similares Ordenados segundo o Rating
                    st.markdown("<h4 style='text-align: center;'>30 Jogadores + Similares</b></h4>", unsafe_allow_html=True)
                    #st.dataframe(lista_similares, use_container_width=True, hide_index=True)
                    st.markdown("---")

                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index(drop=True)
                        # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                        formatter = {"Rating": "{:.3f}", "Índice de Similaridade": "{:.2f}", "Diferença de Similaridade": "{:.2f}"}  # Format the 'Rating' column to 3 decimal places
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px',
                                            'font-size': '15px'})

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML without the index and display it
                        styled_html = style_table(lista_similares).to_html(escape=False, index=False, hide_index=True)
                        st.markdown(styled_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    # Lista de Latinos
                    selected_latam = selected.iloc[1:31, :]
                    selected_latam = selected_latam[(selected_latam["Nacionalidade"] == "Argentina")|(selected_latam["Nacionalidade"] == "Brazil")
                                        |(selected_latam["Nacionalidade"] == "Bolivia")|(selected_latam["Nacionalidade"] == "Chile")
                                        |(selected_latam["Nacionalidade"] == "Colombia")|(selected_latam["Nacionalidade"] == "Costa Rica")
                                        |(selected_latam["Nacionalidade"] == "Ecuador")|(selected_latam["Nacionalidade"] == "Mexico")
                                        |(selected_latam["Nacionalidade"] == "Panama")|(selected_latam["Nacionalidade"] == "Paraguay")
                                        |(selected_latam["Nacionalidade"] == "Peru")|(selected_latam["Nacionalidade"] == "Uruguay")
                                        |(selected_latam["Nacionalidade"] == "Venezuela")]
                    lista_similares_latam = selected_latam.iloc[0:30, :]
                    lista_similares_latam = lista_similares_latam.sort_values(by="Rating", ascending = False)

                    #Texto para os Gráficos
                    st.markdown("<h4 style='text-align: center;'><br>5 Jogadores Latinos Similares Melhor Ranquedos</b></h4>", unsafe_allow_html=True)
                    st.markdown("---")    


                    # Gerar Gráficos com os 5 melhores
                    # Arquivo para o Gráfico
                    Role_18_Mean_Charts = lista_similares_latam.iloc[:, np.r_[0, 2, 24, 30:37]]
                    target = target.iloc[:, np.r_[0, 2, 24, 30:37]]
                    # Renomeando Colunas
                    Role_18_Mean_Charts = Role_18_Mean_Charts.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 
                                                          'Duelos_Defensivos_Ganhos_Percentil':'Duelos_Defensivos_Ganhos', 
                                                            'Passes_Frontais_Percentil':'Passes_Frontais',
                                                            'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certosl', 
                                                            'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos',
                                                            'xG_Percentil':'xG', 
                                                            'xA_Percentil':'xA'})
                    
                    target = target.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 
                                                          'Duelos_Defensivos_Ganhos_Percentil':'Duelos_Defensivos_Ganhos', 
                                                            'Passes_Frontais_Percentil':'Passes_Frontais',
                                                            'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certosl', 
                                                            'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos',
                                                            'xG_Percentil':'xG', 
                                                            'xA_Percentil':'xA'})
                    #Dropping Atleta-alvo
                    Role_18_Mean_Charts = Role_18_Mean_Charts[Role_18_Mean_Charts['Atleta'] != jogador_similar] 
                    #Extraindo 5 melhores
                    Role_18_Mean_Charts = Role_18_Mean_Charts.iloc[0:5, :]


                    #Primeiro Gráfico
                    Role_18_first = Role_18_Mean_Charts.iloc[0:1, :]
                    Role_18_first = pd.concat([Role_18_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_18_first.iat[0, 1]
                    jogadores_clube = Role_18_first.iat[0, 2]
                    jogadores_liga = Role_18_first.iat[0, 3]
                    alvo = Role_18_first.iat[1, 1]
                    alvo_clube = Role_18_first.iat[1, 2]
                    alvo_liga = Role_18_first.iat[1, 3]

                    #Splitting Data
                    Role_18_first_1 = Role_18_first.iloc[:, np.r_[0:3, 3:11]]

                    # Preparing Graph 1
                    params = list(Role_18_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_18_first_1[params][x])
                        a = 0
                        b = max(Role_18_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_18_first_1['Atleta'])):
                        if Role_18_first_1['Atleta'][x] == jogadores:
                            a_values = Role_18_first_1.iloc[x].values.tolist()
                        if Role_18_first_1['Atleta'][x] == alvo:
                            b_values = Role_18_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    ############################################################################

                    #Segundo Gráfico
                    Role_18_first = Role_18_Mean_Charts.iloc[1:2, :]
                    Role_18_first = pd.concat([Role_18_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_18_first.iat[0, 1]
                    jogadores_clube = Role_18_first.iat[0, 2]
                    jogadores_liga = Role_18_first.iat[0, 3]

                    #Splitting Data
                    Role_18_first_1 = Role_18_first.iloc[:, np.r_[0:3, 3:11]]

                    # Preparing Graph 1
                    params = list(Role_18_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_18_first_1[params][x])
                        a = 0
                        b = max(Role_18_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_18_first_1['Atleta'])):
                        if Role_18_first_1['Atleta'][x] == jogadores:
                            a_values = Role_18_first_1.iloc[x].values.tolist()
                        if Role_18_first_1['Atleta'][x] == alvo:
                            b_values = Role_18_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    ############################################################################

                    #Terceiro Gráfico
                    Role_18_first = Role_18_Mean_Charts.iloc[2:3, :]
                    Role_18_first = pd.concat([Role_18_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_18_first.iat[0, 1]
                    jogadores_clube = Role_18_first.iat[0, 2]
                    jogadores_liga = Role_18_first.iat[0, 3]

                    #Splitting Data
                    Role_18_first_1 = Role_18_first.iloc[:, np.r_[0:3, 3:11]]

                    # Preparing Graph 1
                    params = list(Role_18_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_18_first_1[params][x])
                        a = 0
                        b = max(Role_18_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_18_first_1['Atleta'])):
                        if Role_18_first_1['Atleta'][x] == jogadores:
                            a_values = Role_18_first_1.iloc[x].values.tolist()
                        if Role_18_first_1['Atleta'][x] == alvo:
                            b_values = Role_18_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    ############################################################################

                    #Quarto Gráfico
                    Role_18_first = Role_18_Mean_Charts.iloc[3:4, :]
                    Role_18_first = pd.concat([Role_18_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_18_first.iat[0, 1]
                    jogadores_clube = Role_18_first.iat[0, 2]
                    jogadores_liga = Role_18_first.iat[0, 3]

                    #Splitting Data
                    Role_18_first_1 = Role_18_first.iloc[:, np.r_[0:3, 3:11]]

                    # Preparing Graph 1
                    params = list(Role_18_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_18_first_1[params][x])
                        a = 0
                        b = max(Role_18_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_18_first_1['Atleta'])):
                        if Role_18_first_1['Atleta'][x] == jogadores:
                            a_values = Role_18_first_1.iloc[x].values.tolist()
                        if Role_18_first_1['Atleta'][x] == alvo:
                            b_values = Role_18_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    ############################################################################

                    #Quinto Gráfico
                    Role_18_first = Role_18_Mean_Charts.iloc[4:5, :]
                    Role_18_first = pd.concat([Role_18_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_18_first.iat[0, 1]
                    jogadores_clube = Role_18_first.iat[0, 2]
                    jogadores_liga = Role_18_first.iat[0, 3]

                    #Splitting Data
                    Role_18_first_1 = Role_18_first.iloc[:, np.r_[0:3, 3:11]]

                    # Preparing Graph 1
                    params = list(Role_18_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_18_first_1[params][x])
                        a = 0
                        b = max(Role_18_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_18_first_1['Atleta'])):
                        if Role_18_first_1['Atleta'][x] == jogadores:
                            a_values = Role_18_first_1.iloc[x].values.tolist()
                        if Role_18_first_1['Atleta'][x] == alvo:
                            b_values = Role_18_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    #####################################################################################################################
                    #####################################################################################################################
                    #####################################################################################################################
                    #####################################################################################################################
                    #####################################################################################################################
                    #####################################################################################################################

                if perfil_similar == ("Extremo Agudo"):
                ###############################################################################
                ###########################################################################
                    # PRIMEIRO VOLANTE EQUILIBRADO
                    # Texto de Abertura>
                    markdown_amount_1 = f"<div style='text-align:center; font-size:{fontsize}px'>{jogador_similar:}</div>"
                    st.markdown("<h4 style='text-align: center;'>Jogador Selecionado</b></h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_1, unsafe_allow_html=True)
                    st.markdown("---")

                    #Carregando arquivo de dados
                    Role_19_data = pd.read_csv('19_Role_Extremo_Agudo_Similarity.csv')
                    Role_19_data = Role_19_data.drop(Role_19_data.columns[0:4], axis=1)
                    Role_19_data.reset_index(drop=True, inplace=True)

                    # Step : Defina o atleta-alvo
                    #base_bruta_similaridade = pd.read_csv("base_bruta_similaridade.csv")
                    target = Role_19_data.loc[(Role_19_data['Atleta'] == jogador_similar)]

                    #Step : Definindo "ID-alvo"
                    given_ID = target.iat[0, -1]
                    
                    selected = Role_19_data

                    # Step 9: Add columns "1", "2", "3" to Role_19_data

                    selected['1'] = given_ID[0]
                    selected['2'] = given_ID[1]
                    selected['3'] = given_ID[2]
                    selected['4'] = given_ID[3]

                    # Assigning correct columns to 1, 2, 3

                    if given_ID[0] == "A":
                        selected['1'] = selected["A1"]
                    elif given_ID[0] == "B":
                        selected['1'] = selected["B1"]
                    elif given_ID[0] == "C":
                        selected['1'] = selected["C1"]
                    elif given_ID[0] == "D":
                        selected['1'] = selected["D1"]
                    elif given_ID[0] == "E":
                        selected['1'] = selected["E1"]
                    elif given_ID[0] == "F":
                        selected['1'] = selected["F1"]
                    elif given_ID[0] == "G":
                        selected['1'] = selected["G1"]
                    elif given_ID[0] == "H":
                        selected['1'] = selected["H1"]
                    elif given_ID[0] == "I":
                        selected['1'] = selected["I1"]
                    elif given_ID[0] == "J":
                        selected['1'] = selected["J1"]
                    elif given_ID[0] == "K":
                        selected['1'] = selected["K1"]
                    elif given_ID[0] == "L":
                        selected['1'] = selected["L1"]
                    elif given_ID[0] == "M":
                        selected['1'] = selected["M1"]


                    if given_ID[1] == "A":
                        selected['2'] = selected["A1"]
                    elif given_ID[1] == "B":
                        selected['2'] = selected["B1"]
                    elif given_ID[1] == "C":
                        selected['2'] = selected["C1"]
                    elif given_ID[1] == "D":
                        selected['2'] = selected["D1"]
                    elif given_ID[1] == "E":
                        selected['2'] = selected["E1"]
                    elif given_ID[1] == "F":
                        selected['2'] = selected["F1"]
                    elif given_ID[1] == "G":
                        selected['2'] = selected["G1"]
                    elif given_ID[1] == "H":
                        selected['2'] = selected["H1"]
                    elif given_ID[1] == "I":
                        selected['2'] = selected["I1"]
                    elif given_ID[1] == "J":
                        selected['2'] = selected["J1"]
                    elif given_ID[1] == "K":
                        selected['2'] = selected["K1"]
                    elif given_ID[1] == "L":
                        selected['2'] = selected["L1"]
                    elif given_ID[1] == "M":
                        selected['2'] = selected["M1"]
                    
                    
                    if given_ID[2] == "A":
                        selected['3'] = selected["A1"]
                    elif given_ID[2] == "B":
                        selected['3'] = selected["B1"]
                    elif given_ID[2] == "C":
                        selected['3'] = selected["C1"]
                    elif given_ID[2] == "D":
                        selected['3'] = selected["D1"]
                    elif given_ID[2] == "E":
                        selected['3'] = selected["E1"]
                    elif given_ID[2] == "F":
                        selected['3'] = selected["F1"]
                    elif given_ID[2] == "G":
                        selected['3'] = selected["G1"]
                    elif given_ID[2] == "H":
                        selected['3'] = selected["H1"]
                    elif given_ID[2] == "I":
                        selected['3'] = selected["I1"]
                    elif given_ID[2] == "J":
                        selected['3'] = selected["J1"]
                    elif given_ID[2] == "K":
                        selected['3'] = selected["K1"]
                    elif given_ID[2] == "L":
                        selected['3'] = selected["L1"]
                    elif given_ID[2] == "M":
                        selected['3'] = selected["M1"]

                    if given_ID[3] == "A":
                        selected['4'] = selected["A1"]
                    elif given_ID[3] == "B":
                        selected['4'] = selected["B1"]
                    elif given_ID[3] == "C":
                        selected['4'] = selected["C1"]
                    elif given_ID[3] == "D":
                        selected['4'] = selected["D1"]
                    elif given_ID[3] == "E":
                        selected['4'] = selected["E1"]
                    elif given_ID[3] == "F":
                        selected['4'] = selected["F1"]
                    elif given_ID[3] == "G":
                        selected['4'] = selected["G1"]
                    elif given_ID[3] == "H":
                        selected['4'] = selected["H1"]
                    elif given_ID[3] == "I":
                        selected['4'] = selected["I1"]
                    elif given_ID[3] == "J":
                        selected['4'] = selected["J1"]
                    elif given_ID[3] == "K":
                        selected['4'] = selected["K1"]
                    elif given_ID[3] == "L":
                        selected['4'] = selected["L1"]
                    elif given_ID[3] == "M":
                        selected['4'] = selected["M1"]

                    # Applying PCA for Scaled Selected Columns

                    leagues = ["ARG1", "AUT", "BEL1", "BRA1", "BRA2", "BUL", "CHN", 
                            "COL", "DEN", "ENG1", "ENG2", "FRA1", "FRA2", "GER1", 
                            "GER2", "GRE", "HOL", "ITA1", "ITA2", "JAP", "MEX", "PAR", 
                            "POR1", "QAT", "RUS", "SAUD", "SCT", "SER", "SPA1", 
                            "SPA2", "SWZ", "TUR", "UAE", "UKR", "URU", "USA"]

                    # Iterate over each league
                    for league in leagues:

                        # Extract columns 46 through 50
                        ExtremoAgudo = selected.iloc[:, np.r_[-4:0]]

                        # Defining Columns
                        ExtremoAgudo_columns = ExtremoAgudo.columns

                        # Applying PCA
                        pca = PCA(n_components=2)
                        principalComponents = pca.fit_transform(ExtremoAgudo)

                        # Create a DataFrame with loadings
                        LoadingsExtremoAgudo = pd.DataFrame(pca.components_.T**2, index=ExtremoAgudo_columns, columns=['loading factor 1', 'loading factor 2'])

                        # Multiplying Matrices to obtain Pre_Variables
                        Similarity = pd.DataFrame(np.matmul(ExtremoAgudo, LoadingsExtremoAgudo['loading factor 1']) + np.matmul(ExtremoAgudo, LoadingsExtremoAgudo['loading factor 2']),
                                                columns=["Similarity"])

                    # Rebuilding Full Training Set
                    selected = selected.join(Similarity)

                    ##############################################################
                    ##############################################################

                    # Lista de Similares
                    # Initialize an empty list to store DataFrames
                    target = selected.loc[(Role_19_data['Atleta'] == jogador_similar) & (Role_19_data['Liga'] == liga_similar)]
                    target_similarity = target.iat[0, -1]

                    selected["Índice de Similaridade"] = (selected['Similarity']/target_similarity)*100
                    selected["Índice de Similaridade"] = round(selected["Índice de Similaridade"], 2)

                    target = selected.loc[(selected['Atleta'] == jogador_similar) & (selected['Liga'] == liga_similar)]
                    selected['Dif_Similarity'] = abs(selected["Índice de Similaridade"] - 100)

                    selected = selected.sort_values(by='Dif_Similarity')

                    lista_similares = selected.iloc[1:31, np.r_[0, 2, 30, 35, -2:0]]
                    lista_similares = lista_similares.sort_values(by='Rating', ascending=False)
                    lista_similares = lista_similares.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Dif_Similarity':'Diferença de Similaridade'})

                    # Lista de Jogadores Similares Ordenados segundo o Rating
                    st.markdown("<h4 style='text-align: center;'>30 Jogadores + Similares</b></h4>", unsafe_allow_html=True)
                    #st.dataframe(lista_similares, use_container_width=True, hide_index=True)
                    st.markdown("---")

                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index(drop=True)
                        # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                        formatter = {"Rating": "{:.3f}", "Índice de Similaridade": "{:.2f}", "Diferença de Similaridade": "{:.2f}"}  # Format the 'Rating' column to 3 decimal places
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px',
                                            'font-size': '15px'})

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML without the index and display it
                        styled_html = style_table(lista_similares).to_html(escape=False, index=False, hide_index=True)
                        st.markdown(styled_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    # Lista de Latinos
                    selected_latam = selected.iloc[1:31, :]
                    selected_latam = selected_latam[(selected_latam["Nacionalidade"] == "Argentina")|(selected_latam["Nacionalidade"] == "Brazil")
                                        |(selected_latam["Nacionalidade"] == "Bolivia")|(selected_latam["Nacionalidade"] == "Chile")
                                        |(selected_latam["Nacionalidade"] == "Colombia")|(selected_latam["Nacionalidade"] == "Costa Rica")
                                        |(selected_latam["Nacionalidade"] == "Ecuador")|(selected_latam["Nacionalidade"] == "Mexico")
                                        |(selected_latam["Nacionalidade"] == "Panama")|(selected_latam["Nacionalidade"] == "Paraguay")
                                        |(selected_latam["Nacionalidade"] == "Peru")|(selected_latam["Nacionalidade"] == "Uruguay")
                                        |(selected_latam["Nacionalidade"] == "Venezuela")]
                    lista_similares_latam = selected_latam.iloc[0:30, :]
                    lista_similares_latam = lista_similares_latam.sort_values(by="Rating", ascending = False)

                    #Texto para os Gráficos
                    st.markdown("<h4 style='text-align: center;'><br>5 Jogadores Latinos Similares Melhor Ranquedos</b></h4>", unsafe_allow_html=True)
                    st.markdown("---")    


                    # Gerar Gráficos com os 5 melhores
                    # Arquivo para o Gráfico
                    Role_19_Mean_Charts = lista_similares_latam.iloc[:, np.r_[0, 2, 30, 36:49]]
                    target = target.iloc[:, np.r_[0, 2, 30, 36:49]]
                    # Renomeando Colunas
                    Role_19_Mean_Charts = Role_19_Mean_Charts.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 'Duelos_Defensivos_Ganhos_Percentil':'Duelos_Defensivos_Ganhos', 'Duelos_Aéreos_Ganhos_Percentil':'Duelos_Aéreos_Ganhos',
                                                                                'Finalizações_Bloqueadas_Percentil':'Finalizações_Bloqueadas', 'Interceptações_Ajustadas_a_Posse_Percentil':'Interceptações_Ajustadas_a_Posse', 'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 
                                                                                'Passes_Frontais_Certos_Percentil':'Passes_Frontais_Certos', 'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos', 'Passes_Laterais_Certos_Percentil':'Passes_Laterais_Certos', 'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos', 
                                                                                'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos', 'Corridas_Progressivas_Percentil':'Corridas_Progressivas', 'Passes_TerçoFinal_Certos_Percentil':'Passes_TerçoFinal_Certos'})
                    
                    target = target.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 'Duelos_Defensivos_Ganhos_Percentil':'Duelos_Defensivos_Ganhos', 'Duelos_Aéreos_Ganhos_Percentil':'Duelos_Aéreos_Ganhos',
                                                                                'Finalizações_Bloqueadas_Percentil':'Finalizações_Bloqueadas', 'Interceptações_Ajustadas_a_Posse_Percentil':'Interceptações_Ajustadas_a_Posse', 'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 
                                                                                'Passes_Frontais_Certos_Percentil':'Passes_Frontais_Certos', 'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos', 'Passes_Laterais_Certos_Percentil':'Passes_Laterais_Certos', 'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos', 
                                                                                'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos', 'Corridas_Progressivas_Percentil':'Corridas_Progressivas', 'Passes_TerçoFinal_Certos_Percentil':'Passes_TerçoFinal_Certos'})
                    #Dropping Atleta-alvo
                    Role_19_Mean_Charts = Role_19_Mean_Charts[Role_19_Mean_Charts['Atleta'] != jogador_similar] 
                    #Extraindo 5 melhores
                    Role_19_Mean_Charts = Role_19_Mean_Charts.iloc[0:5, :]


                    #Primeiro Gráfico
                    Role_19_first = Role_19_Mean_Charts.iloc[0:1, :]
                    Role_19_first = pd.concat([Role_19_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_19_first.iat[0, 1]
                    jogadores_clube = Role_19_first.iat[0, 2]
                    jogadores_liga = Role_19_first.iat[0, 3]
                    alvo = Role_19_first.iat[1, 1]
                    alvo_clube = Role_19_first.iat[1, 2]
                    alvo_liga = Role_19_first.iat[1, 3]

                    #Splitting Data
                    Role_19_first_1 = Role_19_first.iloc[:, np.r_[0:3, 3:11]]
                    Role_19_first_2 = Role_19_first.iloc[:, np.r_[0:3, 11:17]]

                    # Preparing Graph 1
                    params = list(Role_19_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_19_first_1[params][x])
                        a = 0
                        b = max(Role_19_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_19_first_1['Atleta'])):
                        if Role_19_first_1['Atleta'][x] == jogadores:
                            a_values = Role_19_first_1.iloc[x].values.tolist()
                        if Role_19_first_1['Atleta'][x] == alvo:
                            b_values = Role_19_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_19_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_19_first_2[params][x])
                        a = 0
                        b = max(Role_19_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_19_first_2['Atleta'])):
                        if Role_19_first_2['Atleta'][x] == jogadores:
                            a_values = Role_19_first_2.iloc[x].values.tolist()
                        if Role_19_first_2['Atleta'][x] == alvo:
                            b_values = Role_19_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################

                    #Segundo Gráfico
                    Role_19_first = Role_19_Mean_Charts.iloc[1:2, :]
                    Role_19_first = pd.concat([Role_19_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_19_first.iat[0, 1]
                    jogadores_clube = Role_19_first.iat[0, 2]
                    jogadores_liga = Role_19_first.iat[0, 3]
                    #alvo = Role_19_first.iat[1, 1]
                    #alvo_clube = Role_19_first.iat[1, 2]
                    #alvo_liga = Role_19_first.iat[1, 3]

                    #Splitting Data
                    Role_19_first_1 = Role_19_first.iloc[:, np.r_[0:3, 3:11]]
                    Role_19_first_2 = Role_19_first.iloc[:, np.r_[0:3, 11:17]]

                    # Preparing Graph 1
                    params = list(Role_19_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_19_first_1[params][x])
                        a = 0
                        b = max(Role_19_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_19_first_1['Atleta'])):
                        if Role_19_first_1['Atleta'][x] == jogadores:
                            a_values = Role_19_first_1.iloc[x].values.tolist()
                        if Role_19_first_1['Atleta'][x] == alvo:
                            b_values = Role_19_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_19_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_19_first_2[params][x])
                        a = 0
                        b = max(Role_19_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_19_first_2['Atleta'])):
                        if Role_19_first_2['Atleta'][x] == jogadores:
                            a_values = Role_19_first_2.iloc[x].values.tolist()
                        if Role_19_first_2['Atleta'][x] == alvo:
                            b_values = Role_19_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Terceiro Gráfico
                    Role_19_first = Role_19_Mean_Charts.iloc[2:3, :]
                    Role_19_first = pd.concat([Role_19_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_19_first.iat[0, 1]
                    jogadores_clube = Role_19_first.iat[0, 2]
                    jogadores_liga = Role_19_first.iat[0, 3]
                    #alvo = Role_19_first.iat[1, 1]
                    #alvo_clube = Role_19_first.iat[1, 2]
                    #alvo_liga = Role_19_first.iat[1, 3]

                    #Splitting Data
                    Role_19_first_1 = Role_19_first.iloc[:, np.r_[0:3, 3:11]]
                    Role_19_first_2 = Role_19_first.iloc[:, np.r_[0:3, 11:17]]

                    # Preparing Graph 1
                    params = list(Role_19_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_19_first_1[params][x])
                        a = 0
                        b = max(Role_19_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_19_first_1['Atleta'])):
                        if Role_19_first_1['Atleta'][x] == jogadores:
                            a_values = Role_19_first_1.iloc[x].values.tolist()
                        if Role_19_first_1['Atleta'][x] == alvo:
                            b_values = Role_19_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_19_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_19_first_2[params][x])
                        a = 0
                        b = max(Role_19_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_19_first_2['Atleta'])):
                        if Role_19_first_2['Atleta'][x] == jogadores:
                            a_values = Role_19_first_2.iloc[x].values.tolist()
                        if Role_19_first_2['Atleta'][x] == alvo:
                            b_values = Role_19_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Quarto Gráfico
                    Role_19_first = Role_19_Mean_Charts.iloc[3:4, :]
                    Role_19_first = pd.concat([Role_19_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_19_first.iat[0, 1]
                    jogadores_clube = Role_19_first.iat[0, 2]
                    jogadores_liga = Role_19_first.iat[0, 3]
                    #alvo = Role_19_first.iat[1, 1]
                    #alvo_clube = Role_19_first.iat[1, 2]
                    #alvo_liga = Role_19_first.iat[1, 3]

                    #Splitting Data
                    Role_19_first_1 = Role_19_first.iloc[:, np.r_[0:3, 3:11]]
                    Role_19_first_2 = Role_19_first.iloc[:, np.r_[0:3, 11:17]]

                    # Preparing Graph 1
                    params = list(Role_19_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_19_first_1[params][x])
                        a = 0
                        b = max(Role_19_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_19_first_1['Atleta'])):
                        if Role_19_first_1['Atleta'][x] == jogadores:
                            a_values = Role_19_first_1.iloc[x].values.tolist()
                        if Role_19_first_1['Atleta'][x] == alvo:
                            b_values = Role_19_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_19_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_19_first_2[params][x])
                        a = 0
                        b = max(Role_19_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_19_first_2['Atleta'])):
                        if Role_19_first_2['Atleta'][x] == jogadores:
                            a_values = Role_19_first_2.iloc[x].values.tolist()
                        if Role_19_first_2['Atleta'][x] == alvo:
                            b_values = Role_19_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Quinto Gráfico
                    Role_19_first = Role_19_Mean_Charts.iloc[4:5, :]
                    Role_19_first = pd.concat([Role_19_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_19_first.iat[0, 1]
                    jogadores_clube = Role_19_first.iat[0, 2]
                    jogadores_liga = Role_19_first.iat[0, 3]
                    #alvo = Role_19_first.iat[1, 1]
                    #alvo_clube = Role_19_first.iat[1, 2]
                    #alvo_liga = Role_19_first.iat[1, 3]

                    #Splitting Data
                    Role_19_first_1 = Role_19_first.iloc[:, np.r_[0:3, 3:11]]
                    Role_19_first_2 = Role_19_first.iloc[:, np.r_[0:3, 11:17]]

                    # Preparing Graph 1
                    params = list(Role_19_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_19_first_1[params][x])
                        a = 0
                        b = max(Role_19_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_19_first_1['Atleta'])):
                        if Role_19_first_1['Atleta'][x] == jogadores:
                            a_values = Role_19_first_1.iloc[x].values.tolist()
                        if Role_19_first_1['Atleta'][x] == alvo:
                            b_values = Role_19_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_19_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_19_first_2[params][x])
                        a = 0
                        b = max(Role_19_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_19_first_2['Atleta'])):
                        if Role_19_first_2['Atleta'][x] == jogadores:
                            a_values = Role_19_first_2.iloc[x].values.tolist()
                        if Role_19_first_2['Atleta'][x] == alvo:
                            b_values = Role_19_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)
                    #####################################################################################################################
                    #####################################################################################################################
                    #####################################################################################################################
                    #####################################################################################################################
                    #####################################################################################################################
                    #####################################################################################################################
                if perfil_similar == ("Atacante Referência"):
                ###############################################################################
                ###########################################################################
                    # ATACANTE REFERÊNCIA
                    # Texto de Abertura>
                    markdown_amount_1 = f"<div style='text-align:center; font-size:{fontsize}px'>{jogador_similar:}</div>"
                    st.markdown("<h4 style='text-align: center;'>Jogador Selecionado</b></h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_1, unsafe_allow_html=True)
                    st.markdown("---")

                    #Carregando arquivo de dados
                    Role_20_data = pd.read_csv('20_Role_Atacante_Referência_Similarity.csv')
                    Role_20_data = Role_20_data.drop(Role_20_data.columns[0:4], axis=1)
                    Role_20_data.reset_index(drop=True, inplace=True)

                    # Step : Defina o atleta-alvo
                    #base_bruta_similaridade = pd.read_csv("base_bruta_similaridade.csv")
                    target = Role_20_data.loc[(Role_20_data['Atleta'] == jogador_similar)]

                    #Step : Definindo "ID-alvo"
                    given_ID = target.iat[0, -1]
                    
                    selected = Role_20_data

                    # Step 9: Add columns "1", "2", "3" to Role_20_data

                    selected['1'] = given_ID[0]
                    selected['2'] = given_ID[1]
                    selected['3'] = given_ID[2]
                    selected['4'] = given_ID[3]

                    # Assigning correct columns to 1, 2, 3

                    if given_ID[0] == "A":
                        selected['1'] = selected["A1"]
                    elif given_ID[0] == "B":
                        selected['1'] = selected["B1"]
                    elif given_ID[0] == "C":
                        selected['1'] = selected["C1"]
                    elif given_ID[0] == "D":
                        selected['1'] = selected["D1"]
                    elif given_ID[0] == "E":
                        selected['1'] = selected["E1"]
                    elif given_ID[0] == "F":
                        selected['1'] = selected["F1"]
                    elif given_ID[0] == "G":
                        selected['1'] = selected["G1"]
                    elif given_ID[0] == "H":
                        selected['1'] = selected["H1"]
                    elif given_ID[0] == "I":
                        selected['1'] = selected["I1"]
                    elif given_ID[0] == "J":
                        selected['1'] = selected["J1"]
                    elif given_ID[0] == "K":
                        selected['1'] = selected["K1"]
                    elif given_ID[0] == "L":
                        selected['1'] = selected["L1"]
                    elif given_ID[0] == "M":
                        selected['1'] = selected["M1"]


                    if given_ID[1] == "A":
                        selected['2'] = selected["A1"]
                    elif given_ID[1] == "B":
                        selected['2'] = selected["B1"]
                    elif given_ID[1] == "C":
                        selected['2'] = selected["C1"]
                    elif given_ID[1] == "D":
                        selected['2'] = selected["D1"]
                    elif given_ID[1] == "E":
                        selected['2'] = selected["E1"]
                    elif given_ID[1] == "F":
                        selected['2'] = selected["F1"]
                    elif given_ID[1] == "G":
                        selected['2'] = selected["G1"]
                    elif given_ID[1] == "H":
                        selected['2'] = selected["H1"]
                    elif given_ID[1] == "I":
                        selected['2'] = selected["I1"]
                    elif given_ID[1] == "J":
                        selected['2'] = selected["J1"]
                    elif given_ID[1] == "K":
                        selected['2'] = selected["K1"]
                    elif given_ID[1] == "L":
                        selected['2'] = selected["L1"]
                    elif given_ID[1] == "M":
                        selected['2'] = selected["M1"]
                    
                    
                    if given_ID[2] == "A":
                        selected['3'] = selected["A1"]
                    elif given_ID[2] == "B":
                        selected['3'] = selected["B1"]
                    elif given_ID[2] == "C":
                        selected['3'] = selected["C1"]
                    elif given_ID[2] == "D":
                        selected['3'] = selected["D1"]
                    elif given_ID[2] == "E":
                        selected['3'] = selected["E1"]
                    elif given_ID[2] == "F":
                        selected['3'] = selected["F1"]
                    elif given_ID[2] == "G":
                        selected['3'] = selected["G1"]
                    elif given_ID[2] == "H":
                        selected['3'] = selected["H1"]
                    elif given_ID[2] == "I":
                        selected['3'] = selected["I1"]
                    elif given_ID[2] == "J":
                        selected['3'] = selected["J1"]
                    elif given_ID[2] == "K":
                        selected['3'] = selected["K1"]
                    elif given_ID[2] == "L":
                        selected['3'] = selected["L1"]
                    elif given_ID[2] == "M":
                        selected['3'] = selected["M1"]

                    if given_ID[3] == "A":
                        selected['4'] = selected["A1"]
                    elif given_ID[3] == "B":
                        selected['4'] = selected["B1"]
                    elif given_ID[3] == "C":
                        selected['4'] = selected["C1"]
                    elif given_ID[3] == "D":
                        selected['4'] = selected["D1"]
                    elif given_ID[3] == "E":
                        selected['4'] = selected["E1"]
                    elif given_ID[3] == "F":
                        selected['4'] = selected["F1"]
                    elif given_ID[3] == "G":
                        selected['4'] = selected["G1"]
                    elif given_ID[3] == "H":
                        selected['4'] = selected["H1"]
                    elif given_ID[3] == "I":
                        selected['4'] = selected["I1"]
                    elif given_ID[3] == "J":
                        selected['4'] = selected["J1"]
                    elif given_ID[3] == "K":
                        selected['4'] = selected["K1"]
                    elif given_ID[3] == "L":
                        selected['4'] = selected["L1"]
                    elif given_ID[3] == "M":
                        selected['4'] = selected["M1"]

                    # Applying PCA for Scaled Selected Columns

                    leagues = ["ARG1", "AUT", "BEL1", "BRA1", "BRA2", "BUL", "CHN", 
                            "COL", "DEN", "ENG1", "ENG2", "FRA1", "FRA2", "GER1", 
                            "GER2", "GRE", "HOL", "ITA1", "ITA2", "JAP", "MEX", "PAR", 
                            "POR1", "QAT", "RUS", "SAUD", "SCT", "SER", "SPA1", 
                            "SPA2", "SWZ", "TUR", "UAE", "UKR", "URU", "USA"]

                    # Iterate over each league
                    for league in leagues:

                        # Extract columns 46 through 50
                        AtacanteReferência = selected.iloc[:, np.r_[-4:0]]

                        # Defining Columns
                        AtacanteReferência_columns = AtacanteReferência.columns

                        # Applying PCA
                        pca = PCA(n_components=2)
                        principalComponents = pca.fit_transform(AtacanteReferência)

                        # Create a DataFrame with loadings
                        LoadingsAtacanteReferência = pd.DataFrame(pca.components_.T**2, index=AtacanteReferência_columns, columns=['loading factor 1', 'loading factor 2'])

                        # Multiplying Matrices to obtain Pre_Variables
                        Similarity = pd.DataFrame(np.matmul(AtacanteReferência, LoadingsAtacanteReferência['loading factor 1']) + np.matmul(AtacanteReferência, LoadingsAtacanteReferência['loading factor 2']),
                                                columns=["Similarity"])

                    # Rebuilding Full Training Set
                    selected = selected.join(Similarity)

                    ##############################################################
                    ##############################################################

                    # Lista de Similares
                    # Initialize an empty list to store DataFrames
                    target = selected.loc[(Role_20_data['Atleta'] == jogador_similar) & (Role_20_data['Liga'] == liga_similar)]
                    target_similarity = target.iat[0, -1]

                    selected["Índice de Similaridade"] = (selected['Similarity']/target_similarity)*100
                    selected["Índice de Similaridade"] = round(selected["Índice de Similaridade"], 2)

                    target = selected.loc[(selected['Atleta'] == jogador_similar) & (selected['Liga'] == liga_similar)]
                    selected['Dif_Similarity'] = abs(selected["Índice de Similaridade"] - 100)

                    selected = selected.sort_values(by='Dif_Similarity')

                    lista_similares = selected.iloc[1:31, np.r_[0, 2, 27, 32, -2:0]]
                    lista_similares = lista_similares.sort_values(by='Rating', ascending=False)
                    lista_similares = lista_similares.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Dif_Similarity':'Diferença de Similaridade'})

                    # Lista de Jogadores Similares Ordenados segundo o Rating
                    st.markdown("<h4 style='text-align: center;'>30 Jogadores + Similares</b></h4>", unsafe_allow_html=True)
                    #st.dataframe(lista_similares, use_container_width=True, hide_index=True)
                    st.markdown("---")

                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index(drop=True)
                        # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                        formatter = {"Rating": "{:.3f}", "Índice de Similaridade": "{:.2f}", "Diferença de Similaridade": "{:.2f}"}  # Format the 'Rating' column to 3 decimal places
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px',
                                            'font-size': '15px'})

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML without the index and display it
                        styled_html = style_table(lista_similares).to_html(escape=False, index=False, hide_index=True)
                        st.markdown(styled_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    # Lista de Latinos
                    selected_latam = selected.iloc[1:31, :]
                    selected_latam = selected_latam[(selected_latam["Nacionalidade"] == "Argentina")|(selected_latam["Nacionalidade"] == "Brazil")
                                        |(selected_latam["Nacionalidade"] == "Bolivia")|(selected_latam["Nacionalidade"] == "Chile")
                                        |(selected_latam["Nacionalidade"] == "Colombia")|(selected_latam["Nacionalidade"] == "Costa Rica")
                                        |(selected_latam["Nacionalidade"] == "Ecuador")|(selected_latam["Nacionalidade"] == "Mexico")
                                        |(selected_latam["Nacionalidade"] == "Panama")|(selected_latam["Nacionalidade"] == "Paraguay")
                                        |(selected_latam["Nacionalidade"] == "Peru")|(selected_latam["Nacionalidade"] == "Uruguay")
                                        |(selected_latam["Nacionalidade"] == "Venezuela")]
                    lista_similares_latam = selected_latam.iloc[0:30, :]
                    lista_similares_latam = lista_similares_latam.sort_values(by="Rating", ascending = False)

                    #Texto para os Gráficos
                    st.markdown("<h4 style='text-align: center;'><br>5 Jogadores Latinos Similares Melhor Ranquedos</b></h4>", unsafe_allow_html=True)
                    st.markdown("---")    


                    # Gerar Gráficos com os 5 melhores
                    # Arquivo para o Gráfico
                    Role_20_Mean_Charts = lista_similares_latam.iloc[:, np.r_[0, 2, 27, 33:43]]
                    target = target.iloc[:, np.r_[0, 2, 27, 33:43]]
                    # Renomeando Colunas
                    Role_20_Mean_Charts = Role_20_Mean_Charts.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 'Duelos_Defensivos_Ganhos_Percentil':'Duelos_Defensivos_Ganhos', 'Duelos_Aéreos_Ganhos_Percentil':'Duelos_Aéreos_Ganhos',
                                                                                'Finalizações_Bloqueadas_Percentil':'Finalizações_Bloqueadas', 'Interceptações_Ajustadas_a_Posse_Percentil':'Interceptações_Ajustadas_a_Posse', 'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 
                                                                                'Passes_Frontais_Certos_Percentil':'Passes_Frontais_Certos', 'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos', 'Passes_Laterais_Certos_Percentil':'Passes_Laterais_Certos', 'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos', 
                                                                                'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos', 'Corridas_Progressivas_Percentil':'Corridas_Progressivas', 'Passes_TerçoFinal_Certos_Percentil':'Passes_TerçoFinal_Certos'})
                    
                    target = target.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 'Duelos_Defensivos_Ganhos_Percentil':'Duelos_Defensivos_Ganhos', 'Duelos_Aéreos_Ganhos_Percentil':'Duelos_Aéreos_Ganhos',
                                                                                'Finalizações_Bloqueadas_Percentil':'Finalizações_Bloqueadas', 'Interceptações_Ajustadas_a_Posse_Percentil':'Interceptações_Ajustadas_a_Posse', 'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 
                                                                                'Passes_Frontais_Certos_Percentil':'Passes_Frontais_Certos', 'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos', 'Passes_Laterais_Certos_Percentil':'Passes_Laterais_Certos', 'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos', 
                                                                                'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos', 'Corridas_Progressivas_Percentil':'Corridas_Progressivas', 'Passes_TerçoFinal_Certos_Percentil':'Passes_TerçoFinal_Certos'})
                    #Dropping Atleta-alvo
                    Role_20_Mean_Charts = Role_20_Mean_Charts[Role_20_Mean_Charts['Atleta'] != jogador_similar] 
                    #Extraindo 5 melhores
                    Role_20_Mean_Charts = Role_20_Mean_Charts.iloc[0:5, :]


                    #Primeiro Gráfico
                    Role_20_first = Role_20_Mean_Charts.iloc[0:1, :]
                    Role_20_first = pd.concat([Role_20_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_20_first.iat[0, 1]
                    jogadores_clube = Role_20_first.iat[0, 2]
                    jogadores_liga = Role_20_first.iat[0, 3]
                    alvo = Role_20_first.iat[1, 1]
                    alvo_clube = Role_20_first.iat[1, 2]
                    alvo_liga = Role_20_first.iat[1, 3]

                    #Splitting Data
                    Role_20_first_1 = Role_20_first.iloc[:, np.r_[0:3, 3:9]]
                    Role_20_first_2 = Role_20_first.iloc[:, np.r_[0:3, 9:14]]

                    # Preparing Graph 1
                    params = list(Role_20_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_20_first_1[params][x])
                        a = 0
                        b = max(Role_20_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_20_first_1['Atleta'])):
                        if Role_20_first_1['Atleta'][x] == jogadores:
                            a_values = Role_20_first_1.iloc[x].values.tolist()
                        if Role_20_first_1['Atleta'][x] == alvo:
                            b_values = Role_20_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_20_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_20_first_2[params][x])
                        a = 0
                        b = max(Role_20_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_20_first_2['Atleta'])):
                        if Role_20_first_2['Atleta'][x] == jogadores:
                            a_values = Role_20_first_2.iloc[x].values.tolist()
                        if Role_20_first_2['Atleta'][x] == alvo:
                            b_values = Role_20_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################

                    #Segundo Gráfico
                    Role_20_first = Role_20_Mean_Charts.iloc[1:2, :]
                    Role_20_first = pd.concat([Role_20_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_20_first.iat[0, 1]
                    jogadores_clube = Role_20_first.iat[0, 2]
                    jogadores_liga = Role_20_first.iat[0, 3]
                    #alvo = Role_20_first.iat[1, 1]
                    #alvo_clube = Role_20_first.iat[1, 2]
                    #alvo_liga = Role_20_first.iat[1, 3]

                    #Splitting Data
                    Role_20_first_1 = Role_20_first.iloc[:, np.r_[0:3, 3:9]]
                    Role_20_first_2 = Role_20_first.iloc[:, np.r_[0:3, 9:14]]

                    # Preparing Graph 1
                    params = list(Role_20_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_20_first_1[params][x])
                        a = 0
                        b = max(Role_20_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_20_first_1['Atleta'])):
                        if Role_20_first_1['Atleta'][x] == jogadores:
                            a_values = Role_20_first_1.iloc[x].values.tolist()
                        if Role_20_first_1['Atleta'][x] == alvo:
                            b_values = Role_20_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_20_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_20_first_2[params][x])
                        a = 0
                        b = max(Role_20_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_20_first_2['Atleta'])):
                        if Role_20_first_2['Atleta'][x] == jogadores:
                            a_values = Role_20_first_2.iloc[x].values.tolist()
                        if Role_20_first_2['Atleta'][x] == alvo:
                            b_values = Role_20_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Terceiro Gráfico
                    Role_20_first = Role_20_Mean_Charts.iloc[2:3, :]
                    Role_20_first = pd.concat([Role_20_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_20_first.iat[0, 1]
                    jogadores_clube = Role_20_first.iat[0, 2]
                    jogadores_liga = Role_20_first.iat[0, 3]
                    #alvo = Role_20_first.iat[1, 1]
                    #alvo_clube = Role_20_first.iat[1, 2]
                    #alvo_liga = Role_20_first.iat[1, 3]

                    #Splitting Data
                    Role_20_first_1 = Role_20_first.iloc[:, np.r_[0:3, 3:9]]
                    Role_20_first_2 = Role_20_first.iloc[:, np.r_[0:3, 9:14]]

                    # Preparing Graph 1
                    params = list(Role_20_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_20_first_1[params][x])
                        a = 0
                        b = max(Role_20_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_20_first_1['Atleta'])):
                        if Role_20_first_1['Atleta'][x] == jogadores:
                            a_values = Role_20_first_1.iloc[x].values.tolist()
                        if Role_20_first_1['Atleta'][x] == alvo:
                            b_values = Role_20_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_20_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_20_first_2[params][x])
                        a = 0
                        b = max(Role_20_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_20_first_2['Atleta'])):
                        if Role_20_first_2['Atleta'][x] == jogadores:
                            a_values = Role_20_first_2.iloc[x].values.tolist()
                        if Role_20_first_2['Atleta'][x] == alvo:
                            b_values = Role_20_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Quarto Gráfico
                    Role_20_first = Role_20_Mean_Charts.iloc[3:4, :]
                    Role_20_first = pd.concat([Role_20_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_20_first.iat[0, 1]
                    jogadores_clube = Role_20_first.iat[0, 2]
                    jogadores_liga = Role_20_first.iat[0, 3]
                    #alvo = Role_20_first.iat[1, 1]
                    #alvo_clube = Role_20_first.iat[1, 2]
                    #alvo_liga = Role_20_first.iat[1, 3]

                    #Splitting Data
                    Role_20_first_1 = Role_20_first.iloc[:, np.r_[0:3, 3:9]]
                    Role_20_first_2 = Role_20_first.iloc[:, np.r_[0:3, 9:14]]

                    # Preparing Graph 1
                    params = list(Role_20_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_20_first_1[params][x])
                        a = 0
                        b = max(Role_20_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_20_first_1['Atleta'])):
                        if Role_20_first_1['Atleta'][x] == jogadores:
                            a_values = Role_20_first_1.iloc[x].values.tolist()
                        if Role_20_first_1['Atleta'][x] == alvo:
                            b_values = Role_20_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_20_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_20_first_2[params][x])
                        a = 0
                        b = max(Role_20_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_20_first_2['Atleta'])):
                        if Role_20_first_2['Atleta'][x] == jogadores:
                            a_values = Role_20_first_2.iloc[x].values.tolist()
                        if Role_20_first_2['Atleta'][x] == alvo:
                            b_values = Role_20_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Quinto Gráfico
                    Role_20_first = Role_20_Mean_Charts.iloc[4:5, :]
                    Role_20_first = pd.concat([Role_20_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_20_first.iat[0, 1]
                    jogadores_clube = Role_20_first.iat[0, 2]
                    jogadores_liga = Role_20_first.iat[0, 3]
                    #alvo = Role_20_first.iat[1, 1]
                    #alvo_clube = Role_20_first.iat[1, 2]
                    #alvo_liga = Role_20_first.iat[1, 3]

                    #Splitting Data
                    Role_20_first_1 = Role_20_first.iloc[:, np.r_[0:3, 3:9]]
                    Role_20_first_2 = Role_20_first.iloc[:, np.r_[0:3, 9:14]]

                    # Preparing Graph 1
                    params = list(Role_20_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_20_first_1[params][x])
                        a = 0
                        b = max(Role_20_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_20_first_1['Atleta'])):
                        if Role_20_first_1['Atleta'][x] == jogadores:
                            a_values = Role_20_first_1.iloc[x].values.tolist()
                        if Role_20_first_1['Atleta'][x] == alvo:
                            b_values = Role_20_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_20_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_20_first_2[params][x])
                        a = 0
                        b = max(Role_20_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_20_first_2['Atleta'])):
                        if Role_20_first_2['Atleta'][x] == jogadores:
                            a_values = Role_20_first_2.iloc[x].values.tolist()
                        if Role_20_first_2['Atleta'][x] == alvo:
                            b_values = Role_20_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)
                    #####################################################################################################################
                    #####################################################################################################################
                    #####################################################################################################################
                    #####################################################################################################################
                    #####################################################################################################################
                    #####################################################################################################################
                if perfil_similar == ("Atacante Móvel"):
                ###############################################################################
                ###########################################################################
                    # PRIMEIRO VOLANTE EQUILIBRADO
                    # Texto de Abertura>
                    markdown_amount_1 = f"<div style='text-align:center; font-size:{fontsize}px'>{jogador_similar:}</div>"
                    st.markdown("<h4 style='text-align: center;'>Jogador Selecionado</b></h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_1, unsafe_allow_html=True)
                    st.markdown("---")

                    #Carregando arquivo de dados
                    Role_21_data = pd.read_csv('21_Role_Atacante_Móvel_Similarity.csv')
                    Role_21_data = Role_21_data.drop(Role_21_data.columns[0:4], axis=1)
                    Role_21_data.reset_index(drop=True, inplace=True)

                    # Step : Defina o atleta-alvo
                    #base_bruta_similaridade = pd.read_csv("base_bruta_similaridade.csv")
                    target = Role_21_data.loc[(Role_21_data['Atleta'] == jogador_similar)]

                    #Step : Definindo "ID-alvo"
                    given_ID = target.iat[0, -1]
                    
                    selected = Role_21_data

                    # Step 9: Add columns "1", "2", "3" to Role_21_data

                    selected['1'] = given_ID[0]
                    selected['2'] = given_ID[1]
                    selected['3'] = given_ID[2]
                    selected['4'] = given_ID[3]

                    # Assigning correct columns to 1, 2, 3

                    if given_ID[0] == "A":
                        selected['1'] = selected["A1"]
                    elif given_ID[0] == "B":
                        selected['1'] = selected["B1"]
                    elif given_ID[0] == "C":
                        selected['1'] = selected["C1"]
                    elif given_ID[0] == "D":
                        selected['1'] = selected["D1"]
                    elif given_ID[0] == "E":
                        selected['1'] = selected["E1"]
                    elif given_ID[0] == "F":
                        selected['1'] = selected["F1"]
                    elif given_ID[0] == "G":
                        selected['1'] = selected["G1"]
                    elif given_ID[0] == "H":
                        selected['1'] = selected["H1"]
                    elif given_ID[0] == "I":
                        selected['1'] = selected["I1"]
                    elif given_ID[0] == "J":
                        selected['1'] = selected["J1"]
                    elif given_ID[0] == "K":
                        selected['1'] = selected["K1"]
                    elif given_ID[0] == "L":
                        selected['1'] = selected["L1"]
                    elif given_ID[0] == "M":
                        selected['1'] = selected["M1"]


                    if given_ID[1] == "A":
                        selected['2'] = selected["A1"]
                    elif given_ID[1] == "B":
                        selected['2'] = selected["B1"]
                    elif given_ID[1] == "C":
                        selected['2'] = selected["C1"]
                    elif given_ID[1] == "D":
                        selected['2'] = selected["D1"]
                    elif given_ID[1] == "E":
                        selected['2'] = selected["E1"]
                    elif given_ID[1] == "F":
                        selected['2'] = selected["F1"]
                    elif given_ID[1] == "G":
                        selected['2'] = selected["G1"]
                    elif given_ID[1] == "H":
                        selected['2'] = selected["H1"]
                    elif given_ID[1] == "I":
                        selected['2'] = selected["I1"]
                    elif given_ID[1] == "J":
                        selected['2'] = selected["J1"]
                    elif given_ID[1] == "K":
                        selected['2'] = selected["K1"]
                    elif given_ID[1] == "L":
                        selected['2'] = selected["L1"]
                    elif given_ID[1] == "M":
                        selected['2'] = selected["M1"]
                    
                    
                    if given_ID[2] == "A":
                        selected['3'] = selected["A1"]
                    elif given_ID[2] == "B":
                        selected['3'] = selected["B1"]
                    elif given_ID[2] == "C":
                        selected['3'] = selected["C1"]
                    elif given_ID[2] == "D":
                        selected['3'] = selected["D1"]
                    elif given_ID[2] == "E":
                        selected['3'] = selected["E1"]
                    elif given_ID[2] == "F":
                        selected['3'] = selected["F1"]
                    elif given_ID[2] == "G":
                        selected['3'] = selected["G1"]
                    elif given_ID[2] == "H":
                        selected['3'] = selected["H1"]
                    elif given_ID[2] == "I":
                        selected['3'] = selected["I1"]
                    elif given_ID[2] == "J":
                        selected['3'] = selected["J1"]
                    elif given_ID[2] == "K":
                        selected['3'] = selected["K1"]
                    elif given_ID[2] == "L":
                        selected['3'] = selected["L1"]
                    elif given_ID[2] == "M":
                        selected['3'] = selected["M1"]

                    if given_ID[3] == "A":
                        selected['4'] = selected["A1"]
                    elif given_ID[3] == "B":
                        selected['4'] = selected["B1"]
                    elif given_ID[3] == "C":
                        selected['4'] = selected["C1"]
                    elif given_ID[3] == "D":
                        selected['4'] = selected["D1"]
                    elif given_ID[3] == "E":
                        selected['4'] = selected["E1"]
                    elif given_ID[3] == "F":
                        selected['4'] = selected["F1"]
                    elif given_ID[3] == "G":
                        selected['4'] = selected["G1"]
                    elif given_ID[3] == "H":
                        selected['4'] = selected["H1"]
                    elif given_ID[3] == "I":
                        selected['4'] = selected["I1"]
                    elif given_ID[3] == "J":
                        selected['4'] = selected["J1"]
                    elif given_ID[3] == "K":
                        selected['4'] = selected["K1"]
                    elif given_ID[3] == "L":
                        selected['4'] = selected["L1"]
                    elif given_ID[3] == "M":
                        selected['4'] = selected["M1"]

                    # Applying PCA for Scaled Selected Columns

                    leagues = ["ARG1", "AUT", "BEL1", "BRA1", "BRA2", "BUL", "CHN", 
                            "COL", "DEN", "ENG1", "ENG2", "FRA1", "FRA2", "GER1", 
                            "GER2", "GRE", "HOL", "ITA1", "ITA2", "JAP", "MEX", "PAR", 
                            "POR1", "QAT", "RUS", "SAUD", "SCT", "SER", "SPA1", 
                            "SPA2", "SWZ", "TUR", "UAE", "UKR", "URU", "USA"]

                    # Iterate over each league
                    for league in leagues:

                        # Extract columns 46 through 50
                        AtacanteMóvel = selected.iloc[:, np.r_[-4:0]]

                        # Defining Columns
                        AtacanteMóvel_columns = AtacanteMóvel.columns

                        # Applying PCA
                        pca = PCA(n_components=2)
                        principalComponents = pca.fit_transform(AtacanteMóvel)

                        # Create a DataFrame with loadings
                        LoadingsAtacanteMóvel = pd.DataFrame(pca.components_.T**2, index=AtacanteMóvel_columns, columns=['loading factor 1', 'loading factor 2'])

                        # Multiplying Matrices to obtain Pre_Variables
                        Similarity = pd.DataFrame(np.matmul(AtacanteMóvel, LoadingsAtacanteMóvel['loading factor 1']) + np.matmul(AtacanteMóvel, LoadingsAtacanteMóvel['loading factor 2']),
                                                columns=["Similarity"])

                    # Rebuilding Full Training Set
                    selected = selected.join(Similarity)

                    ##############################################################
                    ##############################################################

                    # Lista de Similares
                    # Initialize an empty list to store DataFrames
                    target = selected.loc[(Role_21_data['Atleta'] == jogador_similar) & (Role_21_data['Liga'] == liga_similar)]
                    target_similarity = target.iat[0, -1]

                    selected["Índice de Similaridade"] = (selected['Similarity']/target_similarity)*100
                    selected["Índice de Similaridade"] = round(selected["Índice de Similaridade"], 2)

                    target = selected.loc[(selected['Atleta'] == jogador_similar) & (selected['Liga'] == liga_similar)]
                    selected['Dif_Similarity'] = abs(selected["Índice de Similaridade"] - 100)

                    selected = selected.sort_values(by='Dif_Similarity')

                    lista_similares = selected.iloc[1:31, np.r_[0, 2, 26, 31, -2:0]]
                    lista_similares = lista_similares.sort_values(by='Rating', ascending=False)
                    lista_similares = lista_similares.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Dif_Similarity':'Diferença de Similaridade'})

                    # Lista de Jogadores Similares Ordenados segundo o Rating
                    st.markdown("<h4 style='text-align: center;'>30 Jogadores + Similares</b></h4>", unsafe_allow_html=True)
                    #st.dataframe(lista_similares, use_container_width=True, hide_index=True)
                    st.markdown("---")

                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index(drop=True)
                        # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                        formatter = {"Rating": "{:.3f}", "Índice de Similaridade": "{:.2f}", "Diferença de Similaridade": "{:.2f}"}  # Format the 'Rating' column to 3 decimal places
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px',
                                            'font-size': '15px'})

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML without the index and display it
                        styled_html = style_table(lista_similares).to_html(escape=False, index=False, hide_index=True)
                        st.markdown(styled_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    # Lista de Latinos
                    selected_latam = selected.iloc[1:31, :]
                    selected_latam = selected_latam[(selected_latam["Nacionalidade"] == "Argentina")|(selected_latam["Nacionalidade"] == "Brazil")
                                        |(selected_latam["Nacionalidade"] == "Bolivia")|(selected_latam["Nacionalidade"] == "Chile")
                                        |(selected_latam["Nacionalidade"] == "Colombia")|(selected_latam["Nacionalidade"] == "Costa Rica")
                                        |(selected_latam["Nacionalidade"] == "Ecuador")|(selected_latam["Nacionalidade"] == "Mexico")
                                        |(selected_latam["Nacionalidade"] == "Panama")|(selected_latam["Nacionalidade"] == "Paraguay")
                                        |(selected_latam["Nacionalidade"] == "Peru")|(selected_latam["Nacionalidade"] == "Uruguay")
                                        |(selected_latam["Nacionalidade"] == "Venezuela")]
                    lista_similares_latam = selected_latam.iloc[0:30, :]
                    lista_similares_latam = lista_similares_latam.sort_values(by="Rating", ascending = False)

                    #Texto para os Gráficos
                    st.markdown("<h4 style='text-align: center;'><br>5 Jogadores Latinos Similares Melhor Ranquedos</b></h4>", unsafe_allow_html=True)
                    st.markdown("---")    


                    # Gerar Gráficos com os 5 melhores
                    # Arquivo para o Gráfico
                    Role_21_Mean_Charts = lista_similares_latam.iloc[:, np.r_[0, 2, 26, 32:41]]
                    target = target.iloc[:, np.r_[0, 2, 26, 32:41]]
                    # Renomeando Colunas
                    Role_21_Mean_Charts = Role_21_Mean_Charts.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 'Duelos_Defensivos_Ganhos_Percentil':'Duelos_Defensivos_Ganhos', 'Duelos_Aéreos_Ganhos_Percentil':'Duelos_Aéreos_Ganhos',
                                                                                'Finalizações_Bloqueadas_Percentil':'Finalizações_Bloqueadas', 'Interceptações_Ajustadas_a_Posse_Percentil':'Interceptações_Ajustadas_a_Posse', 'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 
                                                                                'Passes_Frontais_Certos_Percentil':'Passes_Frontais_Certos', 'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos', 'Passes_Laterais_Certos_Percentil':'Passes_Laterais_Certos', 'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos', 
                                                                                'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos', 'Corridas_Progressivas_Percentil':'Corridas_Progressivas', 'Passes_TerçoFinal_Certos_Percentil':'Passes_TerçoFinal_Certos'})
                    
                    target = target.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 'Duelos_Defensivos_Ganhos_Percentil':'Duelos_Defensivos_Ganhos', 'Duelos_Aéreos_Ganhos_Percentil':'Duelos_Aéreos_Ganhos',
                                                                                'Finalizações_Bloqueadas_Percentil':'Finalizações_Bloqueadas', 'Interceptações_Ajustadas_a_Posse_Percentil':'Interceptações_Ajustadas_a_Posse', 'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 
                                                                                'Passes_Frontais_Certos_Percentil':'Passes_Frontais_Certos', 'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos', 'Passes_Laterais_Certos_Percentil':'Passes_Laterais_Certos', 'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos', 
                                                                                'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos', 'Corridas_Progressivas_Percentil':'Corridas_Progressivas', 'Passes_TerçoFinal_Certos_Percentil':'Passes_TerçoFinal_Certos'})
                    #Dropping Atleta-alvo
                    Role_21_Mean_Charts = Role_21_Mean_Charts[Role_21_Mean_Charts['Atleta'] != jogador_similar] 
                    #Extraindo 5 melhores
                    Role_21_Mean_Charts = Role_21_Mean_Charts.iloc[0:5, :]


                    #Primeiro Gráfico
                    Role_21_first = Role_21_Mean_Charts.iloc[0:1, :]
                    Role_21_first = pd.concat([Role_21_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_21_first.iat[0, 1]
                    jogadores_clube = Role_21_first.iat[0, 2]
                    jogadores_liga = Role_21_first.iat[0, 3]
                    alvo = Role_21_first.iat[1, 1]
                    alvo_clube = Role_21_first.iat[1, 2]
                    alvo_liga = Role_21_first.iat[1, 3]

                    #Splitting Data
                    Role_21_first_1 = Role_21_first.iloc[:, np.r_[0:3, 3:13]]
                    #Role_21_first_2 = Role_21_first.iloc[:, np.r_[0:3, 11:17]]

                    # Preparing Graph 1
                    params = list(Role_21_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_21_first_1[params][x])
                        a = 0
                        b = max(Role_21_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_21_first_1['Atleta'])):
                        if Role_21_first_1['Atleta'][x] == jogadores:
                            a_values = Role_21_first_1.iloc[x].values.tolist()
                        if Role_21_first_1['Atleta'][x] == alvo:
                            b_values = Role_21_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    #Segundo Gráfico
                    Role_21_first = Role_21_Mean_Charts.iloc[1:2, :]
                    Role_21_first = pd.concat([Role_21_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_21_first.iat[0, 1]
                    jogadores_clube = Role_21_first.iat[0, 2]
                    jogadores_liga = Role_21_first.iat[0, 3]
                    #alvo = Role_21_first.iat[1, 1]
                    #alvo_clube = Role_21_first.iat[1, 2]
                    #alvo_liga = Role_21_first.iat[1, 3]

                    #Splitting Data
                    Role_21_first_1 = Role_21_first.iloc[:, np.r_[0:3, 3:13]]
                    #Role_21_first_2 = Role_21_first.iloc[:, np.r_[0:3, 11:17]]

                    # Preparing Graph 1
                    params = list(Role_21_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_21_first_1[params][x])
                        a = 0
                        b = max(Role_21_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_21_first_1['Atleta'])):
                        if Role_21_first_1['Atleta'][x] == jogadores:
                            a_values = Role_21_first_1.iloc[x].values.tolist()
                        if Role_21_first_1['Atleta'][x] == alvo:
                            b_values = Role_21_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    ############################################################################

                    #Terceiro Gráfico
                    Role_21_first = Role_21_Mean_Charts.iloc[2:3, :]
                    Role_21_first = pd.concat([Role_21_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_21_first.iat[0, 1]
                    jogadores_clube = Role_21_first.iat[0, 2]
                    jogadores_liga = Role_21_first.iat[0, 3]
                    #alvo = Role_21_first.iat[1, 1]
                    #alvo_clube = Role_21_first.iat[1, 2]
                    #alvo_liga = Role_21_first.iat[1, 3]

                    #Splitting Data
                    Role_21_first_1 = Role_21_first.iloc[:, np.r_[0:3, 3:13]]
                    #Role_21_first_2 = Role_21_first.iloc[:, np.r_[0:3, 11:17]]

                    # Preparing Graph 1
                    params = list(Role_21_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_21_first_1[params][x])
                        a = 0
                        b = max(Role_21_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_21_first_1['Atleta'])):
                        if Role_21_first_1['Atleta'][x] == jogadores:
                            a_values = Role_21_first_1.iloc[x].values.tolist()
                        if Role_21_first_1['Atleta'][x] == alvo:
                            b_values = Role_21_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    ############################################################################

                    #Quarto Gráfico
                    Role_21_first = Role_21_Mean_Charts.iloc[3:4, :]
                    Role_21_first = pd.concat([Role_21_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_21_first.iat[0, 1]
                    jogadores_clube = Role_21_first.iat[0, 2]
                    jogadores_liga = Role_21_first.iat[0, 3]
                    #alvo = Role_21_first.iat[1, 1]
                    #alvo_clube = Role_21_first.iat[1, 2]
                    #alvo_liga = Role_21_first.iat[1, 3]

                    #Splitting Data
                    Role_21_first_1 = Role_21_first.iloc[:, np.r_[0:3, 3:13]]
                    #Role_21_first_2 = Role_21_first.iloc[:, np.r_[0:3, 11:17]]

                    # Preparing Graph 1
                    params = list(Role_21_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_21_first_1[params][x])
                        a = 0
                        b = max(Role_21_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_21_first_1['Atleta'])):
                        if Role_21_first_1['Atleta'][x] == jogadores:
                            a_values = Role_21_first_1.iloc[x].values.tolist()
                        if Role_21_first_1['Atleta'][x] == alvo:
                            b_values = Role_21_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    ############################################################################

                    #Quinto Gráfico
                    Role_21_first = Role_21_Mean_Charts.iloc[4:5, :]
                    Role_21_first = pd.concat([Role_21_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_21_first.iat[0, 1]
                    jogadores_clube = Role_21_first.iat[0, 2]
                    jogadores_liga = Role_21_first.iat[0, 3]
                    #alvo = Role_21_first.iat[1, 1]
                    #alvo_clube = Role_21_first.iat[1, 2]
                    #alvo_liga = Role_21_first.iat[1, 3]

                    #Splitting Data
                    Role_21_first_1 = Role_21_first.iloc[:, np.r_[0:3, 3:13]]
                    #Role_21_first_2 = Role_21_first.iloc[:, np.r_[0:3, 11:17]]

                    # Preparing Graph 1
                    params = list(Role_21_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_21_first_1[params][x])
                        a = 0
                        b = max(Role_21_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_21_first_1['Atleta'])):
                        if Role_21_first_1['Atleta'][x] == jogadores:
                            a_values = Role_21_first_1.iloc[x].values.tolist()
                        if Role_21_first_1['Atleta'][x] == alvo:
                            b_values = Role_21_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    #####################################################################################################################
                    #####################################################################################################################
                    #####################################################################################################################
                    #####################################################################################################################
                if perfil_similar == ("Segundo Atacante"):
                ###############################################################################
                ###########################################################################
                    # PRIMEIRO VOLANTE EQUILIBRADO
                    # Texto de Abertura>
                    markdown_amount_1 = f"<div style='text-align:center; font-size:{fontsize}px'>{jogador_similar:}</div>"
                    st.markdown("<h4 style='text-align: center;'>Jogador Selecionado</b></h4>", unsafe_allow_html=True)
                    st.markdown(markdown_amount_1, unsafe_allow_html=True)
                    st.markdown("---")

                    #Carregando arquivo de dados
                    Role_22_data = pd.read_csv('22_Role_Segundo_Atacante_Similarity.csv')
                    Role_22_data = Role_22_data.drop(Role_22_data.columns[0:4], axis=1)
                    Role_22_data.reset_index(drop=True, inplace=True)

                    # Step : Defina o atleta-alvo
                    #base_bruta_similaridade = pd.read_csv("base_bruta_similaridade.csv")
                    target = Role_22_data.loc[(Role_22_data['Atleta'] == jogador_similar)]

                    #Step : Definindo "ID-alvo"
                    given_ID = target.iat[0, -1]
                    
                    selected = Role_22_data

                    # Step 9: Add columns "1", "2", "3" to Role_22_data

                    selected['1'] = given_ID[0]
                    selected['2'] = given_ID[1]
                    selected['3'] = given_ID[2]
                    selected['4'] = given_ID[3]

                    # Assigning correct columns to 1, 2, 3

                    if given_ID[0] == "A":
                        selected['1'] = selected["A1"]
                    elif given_ID[0] == "B":
                        selected['1'] = selected["B1"]
                    elif given_ID[0] == "C":
                        selected['1'] = selected["C1"]
                    elif given_ID[0] == "D":
                        selected['1'] = selected["D1"]
                    elif given_ID[0] == "E":
                        selected['1'] = selected["E1"]
                    elif given_ID[0] == "F":
                        selected['1'] = selected["F1"]
                    elif given_ID[0] == "G":
                        selected['1'] = selected["G1"]
                    elif given_ID[0] == "H":
                        selected['1'] = selected["H1"]
                    elif given_ID[0] == "I":
                        selected['1'] = selected["I1"]
                    elif given_ID[0] == "J":
                        selected['1'] = selected["J1"]
                    elif given_ID[0] == "K":
                        selected['1'] = selected["K1"]
                    elif given_ID[0] == "L":
                        selected['1'] = selected["L1"]
                    elif given_ID[0] == "M":
                        selected['1'] = selected["M1"]


                    if given_ID[1] == "A":
                        selected['2'] = selected["A1"]
                    elif given_ID[1] == "B":
                        selected['2'] = selected["B1"]
                    elif given_ID[1] == "C":
                        selected['2'] = selected["C1"]
                    elif given_ID[1] == "D":
                        selected['2'] = selected["D1"]
                    elif given_ID[1] == "E":
                        selected['2'] = selected["E1"]
                    elif given_ID[1] == "F":
                        selected['2'] = selected["F1"]
                    elif given_ID[1] == "G":
                        selected['2'] = selected["G1"]
                    elif given_ID[1] == "H":
                        selected['2'] = selected["H1"]
                    elif given_ID[1] == "I":
                        selected['2'] = selected["I1"]
                    elif given_ID[1] == "J":
                        selected['2'] = selected["J1"]
                    elif given_ID[1] == "K":
                        selected['2'] = selected["K1"]
                    elif given_ID[1] == "L":
                        selected['2'] = selected["L1"]
                    elif given_ID[1] == "M":
                        selected['2'] = selected["M1"]
                    
                    
                    if given_ID[2] == "A":
                        selected['3'] = selected["A1"]
                    elif given_ID[2] == "B":
                        selected['3'] = selected["B1"]
                    elif given_ID[2] == "C":
                        selected['3'] = selected["C1"]
                    elif given_ID[2] == "D":
                        selected['3'] = selected["D1"]
                    elif given_ID[2] == "E":
                        selected['3'] = selected["E1"]
                    elif given_ID[2] == "F":
                        selected['3'] = selected["F1"]
                    elif given_ID[2] == "G":
                        selected['3'] = selected["G1"]
                    elif given_ID[2] == "H":
                        selected['3'] = selected["H1"]
                    elif given_ID[2] == "I":
                        selected['3'] = selected["I1"]
                    elif given_ID[2] == "J":
                        selected['3'] = selected["J1"]
                    elif given_ID[2] == "K":
                        selected['3'] = selected["K1"]
                    elif given_ID[2] == "L":
                        selected['3'] = selected["L1"]
                    elif given_ID[2] == "M":
                        selected['3'] = selected["M1"]

                    if given_ID[3] == "A":
                        selected['4'] = selected["A1"]
                    elif given_ID[3] == "B":
                        selected['4'] = selected["B1"]
                    elif given_ID[3] == "C":
                        selected['4'] = selected["C1"]
                    elif given_ID[3] == "D":
                        selected['4'] = selected["D1"]
                    elif given_ID[3] == "E":
                        selected['4'] = selected["E1"]
                    elif given_ID[3] == "F":
                        selected['4'] = selected["F1"]
                    elif given_ID[3] == "G":
                        selected['4'] = selected["G1"]
                    elif given_ID[3] == "H":
                        selected['4'] = selected["H1"]
                    elif given_ID[3] == "I":
                        selected['4'] = selected["I1"]
                    elif given_ID[3] == "J":
                        selected['4'] = selected["J1"]
                    elif given_ID[3] == "K":
                        selected['4'] = selected["K1"]
                    elif given_ID[3] == "L":
                        selected['4'] = selected["L1"]
                    elif given_ID[3] == "M":
                        selected['4'] = selected["M1"]

                    # Applying PCA for Scaled Selected Columns

                    leagues = ["ARG1", "AUT", "BEL1", "BRA1", "BRA2", "BUL", "CHN", 
                            "COL", "DEN", "ENG1", "ENG2", "FRA1", "FRA2", "GER1", 
                            "GER2", "GRE", "HOL", "ITA1", "ITA2", "JAP", "MEX", "PAR", 
                            "POR1", "QAT", "RUS", "SAUD", "SCT", "SER", "SPA1", 
                            "SPA2", "SWZ", "TUR", "UAE", "UKR", "URU", "USA"]

                    # Iterate over each league
                    for league in leagues:

                        # Extract columns 46 through 50
                        SegundoAtacante = selected.iloc[:, np.r_[-4:0]]

                        # Defining Columns
                        SegundoAtacante_columns = SegundoAtacante.columns

                        # Applying PCA
                        pca = PCA(n_components=2)
                        principalComponents = pca.fit_transform(SegundoAtacante)

                        # Create a DataFrame with loadings
                        LoadingsSegundoAtacante = pd.DataFrame(pca.components_.T**2, index=SegundoAtacante_columns, columns=['loading factor 1', 'loading factor 2'])

                        # Multiplying Matrices to obtain Pre_Variables
                        Similarity = pd.DataFrame(np.matmul(SegundoAtacante, LoadingsSegundoAtacante['loading factor 1']) + np.matmul(SegundoAtacante, LoadingsSegundoAtacante['loading factor 2']),
                                                columns=["Similarity"])

                    # Rebuilding Full Training Set
                    selected = selected.join(Similarity)

                    ##############################################################
                    ##############################################################

                    # Lista de Similares
                    # Initialize an empty list to store DataFrames
                    target = selected.loc[(Role_22_data['Atleta'] == jogador_similar) & (Role_22_data['Liga'] == liga_similar)]
                    target_similarity = target.iat[0, -1]

                    selected["Índice de Similaridade"] = (selected['Similarity']/target_similarity)*100
                    selected["Índice de Similaridade"] = round(selected["Índice de Similaridade"], 2)

                    target = selected.loc[(selected['Atleta'] == jogador_similar) & (selected['Liga'] == liga_similar)]
                    selected['Dif_Similarity'] = abs(selected["Índice de Similaridade"] - 100)

                    selected = selected.sort_values(by='Dif_Similarity')

                    lista_similares = selected.iloc[1:31, np.r_[0, 2, 30, 35, -2:0]]
                    lista_similares = lista_similares.sort_values(by='Rating', ascending=False)
                    lista_similares = lista_similares.rename(columns={'Equipe_Janela_Análise':'Equipe', 'Dif_Similarity':'Diferença de Similaridade'})

                    # Lista de Jogadores Similares Ordenados segundo o Rating
                    st.markdown("<h4 style='text-align: center;'>30 Jogadores + Similares</b></h4>", unsafe_allow_html=True)
                    #st.dataframe(lista_similares, use_container_width=True, hide_index=True)
                    st.markdown("---")

                    # Styling DataFrame using Pandas
                    def style_table(df):
                        df = df.reset_index(drop=True)
                        # Ensure 'Rating' is rounded and formatted to 3 decimal places during styling
                        formatter = {"Rating": "{:.3f}", "Índice de Similaridade": "{:.2f}", "Diferença de Similaridade": "{:.2f}"}  # Format the 'Rating' column to 3 decimal places
                        return df.style.format(formatter).set_table_styles(
                            [{
                                'selector': 'thead th',
                                'props': [('font-weight', 'bold'),
                                        ('border-style', 'solid'),
                                        ('border-width', '0px 0px 2px 0px'),
                                        ('border-color', 'black')]
                            }, {
                                'selector': 'thead th:not(:first-child)',
                                'props': [('text-align', 'center')]  # Centering all headers except the first
                            }, {
                                'selector': 'thead th:last-child',
                                'props': [('color', 'black')]  # Make last column header black
                            }, {
                                'selector': 'td',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'center')]
                            }, {
                                'selector': 'th',
                                'props': [('border-style', 'solid'),
                                        ('border-width', '0px 0px 1px 0px'),
                                        ('border-color', 'black'),
                                        ('text-align', 'left')]
                            }]
                        ).set_properties(**{'padding': '2px',
                                            'font-size': '15px'})

                    # Displaying in Streamlit
                    def main():
                        #st.title("Your DataFrame")

                        # Convert the styled DataFrame to HTML without the index and display it
                        styled_html = style_table(lista_similares).to_html(escape=False, index=False, hide_index=True)
                        st.markdown(styled_html, unsafe_allow_html=True)

                    if __name__ == '__main__':
                        main()

                    # Lista de Latinos
                    selected_latam = selected.iloc[1:31, :]
                    selected_latam = selected_latam[(selected_latam["Nacionalidade"] == "Argentina")|(selected_latam["Nacionalidade"] == "Brazil")
                                        |(selected_latam["Nacionalidade"] == "Bolivia")|(selected_latam["Nacionalidade"] == "Chile")
                                        |(selected_latam["Nacionalidade"] == "Colombia")|(selected_latam["Nacionalidade"] == "Costa Rica")
                                        |(selected_latam["Nacionalidade"] == "Ecuador")|(selected_latam["Nacionalidade"] == "Mexico")
                                        |(selected_latam["Nacionalidade"] == "Panama")|(selected_latam["Nacionalidade"] == "Paraguay")
                                        |(selected_latam["Nacionalidade"] == "Peru")|(selected_latam["Nacionalidade"] == "Uruguay")
                                        |(selected_latam["Nacionalidade"] == "Venezuela")]
                    lista_similares_latam = selected_latam.iloc[0:30, :]

                    lista_similares_latam = lista_similares_latam.sort_values(by="Rating", ascending = False)

                    #Texto para os Gráficos
                    st.markdown("<h4 style='text-align: center;'><br>5 Jogadores Latinos Similares Melhor Ranquedos</b></h4>", unsafe_allow_html=True)
                    st.markdown("---")    


                    # Gerar Gráficos com os 5 melhores
                    # Arquivo para o Gráfico
                    Role_22_Mean_Charts = lista_similares_latam.iloc[:, np.r_[0, 2, 30, 36:49]]
                    target = target.iloc[:, np.r_[0, 2, 30, 36:49]]
                    # Renomeando Colunas
                    Role_22_Mean_Charts = Role_22_Mean_Charts.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 'Duelos_Defensivos_Ganhos_Percentil':'Duelos_Defensivos_Ganhos', 'Duelos_Aéreos_Ganhos_Percentil':'Duelos_Aéreos_Ganhos',
                                                                                'Finalizações_Bloqueadas_Percentil':'Finalizações_Bloqueadas', 'Interceptações_Ajustadas_a_Posse_Percentil':'Interceptações_Ajustadas_a_Posse', 'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 
                                                                                'Passes_Frontais_Certos_Percentil':'Passes_Frontais_Certos', 'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos', 'Passes_Laterais_Certos_Percentil':'Passes_Laterais_Certos', 'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos', 
                                                                                'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos', 'Corridas_Progressivas_Percentil':'Corridas_Progressivas', 'Passes_TerçoFinal_Certos_Percentil':'Passes_TerçoFinal_Certos'})
                    
                    target = target.rename(columns={'Ações_Defensivas_BemSucedidas_Percentil':'Ações_Defensivas_BemSucedidas', 'Duelos_Defensivos_Ganhos_Percentil':'Duelos_Defensivos_Ganhos', 'Duelos_Aéreos_Ganhos_Percentil':'Duelos_Aéreos_Ganhos',
                                                                                'Finalizações_Bloqueadas_Percentil':'Finalizações_Bloqueadas', 'Interceptações_Ajustadas_a_Posse_Percentil':'Interceptações_Ajustadas_a_Posse', 'Passes_Longos_Certos_Percentil':'Passes_Longos_Certos', 
                                                                                'Passes_Frontais_Certos_Percentil':'Passes_Frontais_Certos', 'Passes_Progressivos_Certos_Percentil':'Passes_Progressivos_Certos', 'Passes_Laterais_Certos_Percentil':'Passes_Laterais_Certos', 'Duelos_Ofensivos_Ganhos_Percentil':'Duelos_Ofensivos_Ganhos', 
                                                                                'Dribles_BemSucedidos_Percentil':'Dribles_BemSucedidos', 'Corridas_Progressivas_Percentil':'Corridas_Progressivas', 'Passes_TerçoFinal_Certos_Percentil':'Passes_TerçoFinal_Certos'})
                    #Dropping Atleta-alvo
                    Role_22_Mean_Charts = Role_22_Mean_Charts[Role_22_Mean_Charts['Atleta'] != jogador_similar] 
                    #Extraindo 5 melhores
                    Role_22_Mean_Charts = Role_22_Mean_Charts.iloc[0:5, :]


                    #Primeiro Gráfico
                    Role_22_first = Role_22_Mean_Charts.iloc[0:1, :]
                    Role_22_first = pd.concat([Role_22_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_22_first.iat[0, 1]
                    jogadores_clube = Role_22_first.iat[0, 2]
                    jogadores_liga = Role_22_first.iat[0, 3]
                    alvo = Role_22_first.iat[1, 1]
                    alvo_clube = Role_22_first.iat[1, 2]
                    alvo_liga = Role_22_first.iat[1, 3]

                    #Splitting Data
                    Role_22_first_1 = Role_22_first.iloc[:, np.r_[0:3, 3:11]]
                    Role_22_first_2 = Role_22_first.iloc[:, np.r_[0:3, 11:17]]

                    # Preparing Graph 1
                    params = list(Role_22_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_22_first_1[params][x])
                        a = 0
                        b = max(Role_22_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_22_first_1['Atleta'])):
                        if Role_22_first_1['Atleta'][x] == jogadores:
                            a_values = Role_22_first_1.iloc[x].values.tolist()
                        if Role_22_first_1['Atleta'][x] == alvo:
                            b_values = Role_22_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_22_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_22_first_2[params][x])
                        a = 0
                        b = max(Role_22_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_22_first_2['Atleta'])):
                        if Role_22_first_2['Atleta'][x] == jogadores:
                            a_values = Role_22_first_2.iloc[x].values.tolist()
                        if Role_22_first_2['Atleta'][x] == alvo:
                            b_values = Role_22_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################

                    #Segundo Gráfico
                    Role_22_first = Role_22_Mean_Charts.iloc[1:2, :]
                    Role_22_first = pd.concat([Role_22_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_22_first.iat[0, 1]
                    jogadores_clube = Role_22_first.iat[0, 2]
                    jogadores_liga = Role_22_first.iat[0, 3]
                    #alvo = Role_22_first.iat[1, 1]
                    #alvo_clube = Role_22_first.iat[1, 2]
                    #alvo_liga = Role_22_first.iat[1, 3]

                    #Splitting Data
                    Role_22_first_1 = Role_22_first.iloc[:, np.r_[0:3, 3:11]]
                    Role_22_first_2 = Role_22_first.iloc[:, np.r_[0:3, 11:17]]

                    # Preparing Graph 1
                    params = list(Role_22_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_22_first_1[params][x])
                        a = 0
                        b = max(Role_22_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_22_first_1['Atleta'])):
                        if Role_22_first_1['Atleta'][x] == jogadores:
                            a_values = Role_22_first_1.iloc[x].values.tolist()
                        if Role_22_first_1['Atleta'][x] == alvo:
                            b_values = Role_22_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_22_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_22_first_2[params][x])
                        a = 0
                        b = max(Role_22_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_22_first_2['Atleta'])):
                        if Role_22_first_2['Atleta'][x] == jogadores:
                            a_values = Role_22_first_2.iloc[x].values.tolist()
                        if Role_22_first_2['Atleta'][x] == alvo:
                            b_values = Role_22_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Terceiro Gráfico
                    Role_22_first = Role_22_Mean_Charts.iloc[2:3, :]
                    Role_22_first = pd.concat([Role_22_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_22_first.iat[0, 1]
                    jogadores_clube = Role_22_first.iat[0, 2]
                    jogadores_liga = Role_22_first.iat[0, 3]
                    #alvo = Role_22_first.iat[1, 1]
                    #alvo_clube = Role_22_first.iat[1, 2]
                    #alvo_liga = Role_22_first.iat[1, 3]

                    #Splitting Data
                    Role_22_first_1 = Role_22_first.iloc[:, np.r_[0:3, 3:11]]
                    Role_22_first_2 = Role_22_first.iloc[:, np.r_[0:3, 11:17]]

                    # Preparing Graph 1
                    params = list(Role_22_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_22_first_1[params][x])
                        a = 0
                        b = max(Role_22_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_22_first_1['Atleta'])):
                        if Role_22_first_1['Atleta'][x] == jogadores:
                            a_values = Role_22_first_1.iloc[x].values.tolist()
                        if Role_22_first_1['Atleta'][x] == alvo:
                            b_values = Role_22_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_22_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_22_first_2[params][x])
                        a = 0
                        b = max(Role_22_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_22_first_2['Atleta'])):
                        if Role_22_first_2['Atleta'][x] == jogadores:
                            a_values = Role_22_first_2.iloc[x].values.tolist()
                        if Role_22_first_2['Atleta'][x] == alvo:
                            b_values = Role_22_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Quarto Gráfico
                    Role_22_first = Role_22_Mean_Charts.iloc[3:4, :]
                    Role_22_first = pd.concat([Role_22_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_22_first.iat[0, 1]
                    jogadores_clube = Role_22_first.iat[0, 2]
                    jogadores_liga = Role_22_first.iat[0, 3]
                    #alvo = Role_22_first.iat[1, 1]
                    #alvo_clube = Role_22_first.iat[1, 2]
                    #alvo_liga = Role_22_first.iat[1, 3]

                    #Splitting Data
                    Role_22_first_1 = Role_22_first.iloc[:, np.r_[0:3, 3:11]]
                    Role_22_first_2 = Role_22_first.iloc[:, np.r_[0:3, 11:17]]

                    # Preparing Graph 1
                    params = list(Role_22_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_22_first_1[params][x])
                        a = 0
                        b = max(Role_22_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_22_first_1['Atleta'])):
                        if Role_22_first_1['Atleta'][x] == jogadores:
                            a_values = Role_22_first_1.iloc[x].values.tolist()
                        if Role_22_first_1['Atleta'][x] == alvo:
                            b_values = Role_22_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_22_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_22_first_2[params][x])
                        a = 0
                        b = max(Role_22_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_22_first_2['Atleta'])):
                        if Role_22_first_2['Atleta'][x] == jogadores:
                            a_values = Role_22_first_2.iloc[x].values.tolist()
                        if Role_22_first_2['Atleta'][x] == alvo:
                            b_values = Role_22_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ##########################################################################################
                    ############################################################################

                    #Quinto Gráfico
                    Role_22_first = Role_22_Mean_Charts.iloc[4:5, :]
                    Role_22_first = pd.concat([Role_22_first, target]).reset_index()

                    # Definindo atletas para comparar
                    jogadores = Role_22_first.iat[0, 1]
                    jogadores_clube = Role_22_first.iat[0, 2]
                    jogadores_liga = Role_22_first.iat[0, 3]
                    #alvo = Role_22_first.iat[1, 1]
                    #alvo_clube = Role_22_first.iat[1, 2]
                    #alvo_liga = Role_22_first.iat[1, 3]

                    #Splitting Data
                    Role_22_first_1 = Role_22_first.iloc[:, np.r_[0:3, 3:11]]
                    Role_22_first_2 = Role_22_first.iloc[:, np.r_[0:3, 11:17]]

                    # Preparing Graph 1
                    params = list(Role_22_first_1.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_22_first_1[params][x])
                        a = 0
                        b = max(Role_22_first_1[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_22_first_1['Atleta'])):
                        if Role_22_first_1['Atleta'][x] == jogadores:
                            a_values = Role_22_first_1.iloc[x].values.tolist()
                        if Role_22_first_1['Atleta'][x] == alvo:
                            b_values = Role_22_first_1.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)

                    ############################################################################
                    # Preparing Graph 2
                    params = list(Role_22_first_2.columns)
                    params = params[4:]
                    
                    #Preparing Data
                    ranges = []
                    a_values = []
                    b_values = []

                    for x in params:
                        a = min(Role_22_first_2[params][x])
                        a = 0
                        b = max(Role_22_first_2[params][x])
                        b = 100
                        ranges.append((a, b))

                    for x in range(len(Role_22_first_2['Atleta'])):
                        if Role_22_first_2['Atleta'][x] == jogadores:
                            a_values = Role_22_first_2.iloc[x].values.tolist()
                        if Role_22_first_2['Atleta'][x] == alvo:
                            b_values = Role_22_first_2.iloc[x].values.tolist()
                            
                    a_values = a_values[4:]
                    b_values = b_values[4:]

                    values = [a_values, b_values]

                    #Plotting Data
                    title = dict(
                        title_name = jogadores,
                        title_color = '#B6282F',
                        subtitle_name = jogadores_clube + "/" + jogadores_liga,
                        subtitle_color = '#B6282F',
                        title_name_2 = alvo,
                        title_color_2 = '#344D94',
                        subtitle_name_2 = alvo_clube + "/" + alvo_liga,
                        subtitle_color_2 = '#344D94',
                        title_fontsize = 18,
                    ) 

                    endnote = 'Viz by@JAmerico1898\ Data from Wyscout\nAll data in League percentiles'

                    radar=Radar(fontfamily='Cursive', range_fontsize=8)
                    fig,ax = radar.plot_radar(ranges=ranges,params=params,values=values,radar_color=['#B6282F', '#344D94'], dpi=600, alphas=[.8,.6], title=title, endnote=endnote, compare=True)
                    st.pyplot(fig)
                    #####################################################################################################################
                    #####################################################################################################################
                    #####################################################################################################################
                    #####################################################################################################################
                    #####################################################################################################################
                    #####################################################################################################################

























